{
	"info": {
		"_postman_id": "566b6779-f6e7-4ac6-be04-39a361a515fb",
		"name": "3 MB Collection Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "525986-566b6779-f6e7-4ac6-be04-39a361a515fb"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "5556f68e-4ca0-4c5c-9088-02b4b06aff3c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c3dec659-ba3b-42a9-867a-56b3ff9979bb"
							}
						}
					],
					"id": "d3f648ae-4bfa-47c6-9472-0777043d59e8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "478263bc-83e7-4ec6-9704-6476480af21b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "119502eb-1f56-41f6-b08e-e4779ec51dd7"
							}
						}
					],
					"id": "2c4ca7b5-94ec-4516-8f10-9c8c4211bff0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "084634c0-8fe6-4d3c-89f9-bbba0eb7df58"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c173c89f-8645-4269-88fa-bc0a5f5af9a4"
							}
						}
					],
					"id": "9b229ca9-fb97-414f-9e8d-3d1e54e8027e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "7030ed5f-1896-4466-9caa-734e7d6f4a1f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3db76141-6252-4d63-9f3e-3340d1d8ddf8"
							}
						}
					],
					"id": "5f484d90-f93b-4f64-8255-02590db6e147",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "f886bb31-fcee-4963-96e0-4a507a4b4526"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "1d088c8d-b9ba-401a-89e9-b712334c317e"
							}
						}
					],
					"id": "44176bd4-9756-47fc-bebd-0b0d1dddaa55",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "7c19af2c-0efc-41a7-b29a-a777cdaca2d6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f10c0b35-ccf3-4977-bc91-716cb04710a5"
							}
						}
					],
					"id": "462ee455-4da2-43f2-8276-04a9eb67b85b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "b5dec661-7819-490d-bb62-aff5593bdaec"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "bcfff4ff-0905-4677-9e46-c52060e33394"
							}
						}
					],
					"id": "4a678d0f-2890-4013-92f6-873a9de21a9e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "6b58f051-51d4-4af7-b399-6dcce2e116a9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "cf547f7a-a6db-4113-ab7d-3e9b129e2199"
							}
						}
					],
					"id": "30add90c-2cdf-4ed2-b8ea-e7f84e2a6cda",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "7f0219ef-b759-43bc-ae08-de97d81ddca5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f0012220-5842-4b4b-97e9-93434deb8516"
							}
						}
					],
					"id": "4ef21187-e426-4c22-9b37-2f1b3e782481",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "78abc265-d8a7-4b8e-8635-c52e1c54f9aa"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "251d60ad-6b15-483c-9272-4a39ca452ad0"
							}
						}
					],
					"id": "5cfa867b-b27a-4bf9-96f5-7ef6c240d4e3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "fd13bddc-1937-4079-8cb5-54be29da7e42"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "83c0625a-c39f-47bf-9081-b83080111b93"
							}
						}
					],
					"id": "5feecd9f-888e-4279-a244-40f92583255e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "db859a77-12a7-412d-85b7-df062f906695"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "abf83d7b-0c74-4c3c-becf-27d058398cfb"
							}
						}
					],
					"id": "2f500443-8281-40bf-92a7-0efcd4dac1e1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "83057720-d93e-4bb2-a345-a4531fb5a358"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b4dcb200-8fa5-4f37-9fff-0dc2f6130b0c"
							}
						}
					],
					"id": "b3642ef8-ae6d-45d8-b5bc-bc81ccb3febc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "f6416d81-7907-4843-82f0-e42cd2bda44c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "56629545-8dfa-431b-a7b4-1f708e86a9c0"
							}
						}
					],
					"id": "f874c12b-ea92-4706-9ce5-de8f2efd17a9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "676f590f-c57e-4b0d-b2c7-f70164d4a5c8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "fd666ad7-7ef7-49d5-8ed5-ba54d68be42f"
							}
						}
					],
					"id": "be477dcb-6c82-4d03-a9bd-850631f63ed9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "5ee0f73e-4144-4ecd-9f08-ec28426b620e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "506475be-3a78-462e-8f40-6d4ecb1df4ce"
							}
						}
					],
					"id": "19432869-f958-4262-9a88-938148260b2f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "ff770675-6317-4014-9d06-fccd491a1434"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "1518249e-92e7-4fc6-a08d-0f9b445c48e0"
							}
						}
					],
					"id": "2e8c2dac-3995-4499-9f29-f36e4e9eeb5a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "36e5a0a0-25a8-44e2-be9f-8d43d24e6fb8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a1360021-6b97-46bb-a8a0-0fbb2c6830ec"
							}
						}
					],
					"id": "06f5d514-0407-4c82-86db-81cf59744f82",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "b1c100f7-ccee-4436-9e60-45cc20483ec8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "45a6eec7-be83-40ac-a529-2e4fc8dc411d"
							}
						}
					],
					"id": "067f2b60-6961-4ebe-a22d-6010e45cf7d4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "f9e74e89-ab0d-48d7-b5d9-9c54e59e98f4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "29e2d70d-e2ae-4e5c-8dbe-63e4782c918c"
							}
						}
					],
					"id": "0d4a6ecc-75d4-4c29-a68f-abaee7dd2b59",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "2b22ca85-b772-4345-9328-5e0ea8e20e3b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "be592601-bda8-4260-9f6f-6d02a14cf641"
							}
						}
					],
					"id": "777e373e-6a36-4000-90b2-a79c083fb438",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "16ab4f4c-a90f-40fe-bf9b-32ef7bc8551d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "62043611-64fc-431f-89c1-5533c9cb9253"
							}
						}
					],
					"id": "6b53fa05-7ed1-47d5-92e3-4e3c36cd5f91",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "adf5cef0-984f-481a-93a0-53da8e40a021"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "78a82d10-dd4a-4d24-be6d-effa29a58540"
							}
						}
					],
					"id": "269be3b2-b21f-4396-a3fb-e9a328dfd65b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "2cb13354-d0c8-46ef-83b5-d52636de8736"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ff1c1909-9737-41fb-b3d9-87df406839bf"
							}
						}
					],
					"id": "2e38ef93-1813-47d2-a8d6-33b124b76f00",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "30fe6741-c436-4de3-adbd-628066521999"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a2e6295b-586f-49d8-8649-7172808dbd13"
							}
						}
					],
					"id": "f867430b-053b-4435-a8b2-eef4f9d383f2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "4418346c-3579-44ce-a9f3-41eb0c58a4f5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "b8a5b5c5-1117-4f86-a7b1-eff0c7006866"
							}
						}
					],
					"id": "bd4a72fb-e4e7-4e3d-bad0-34a83a2420e4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "2275832a-f38f-40f3-9ab7-bb6e4826d990"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "72edd079-d5d7-4b5a-b841-d0372b78b09e"
							}
						}
					],
					"id": "cb7808d6-e73c-4e27-a3bf-d55d41f8dd85",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "3c7a70dc-f66d-413e-a744-43a593befb1c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b3937227-f882-40f8-9175-32f05973b1e3"
							}
						}
					],
					"id": "e0199721-3636-4529-91f9-a842c7e0c1ea",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "d314c7e4-4c2b-491c-9c45-64db2266d3db"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "ccbbe76c-b9fc-4d36-859d-b7ee41f6f77f"
							}
						}
					],
					"id": "e690d949-34c1-4948-93b8-4e27099c80bb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "a282b952-4513-484e-82f3-dbcd17e50bd6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a93b4503-9851-4e59-b55d-c714011fa604"
							}
						}
					],
					"id": "db3a120c-8ef3-498a-9afc-2c4eab76940d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "ead17764-b065-401c-93e7-c9015623ad22"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "27d197b6-213e-42e8-b8f9-f8f7542b4364"
							}
						}
					],
					"id": "5f790656-6d9e-48c4-bee0-bf5340dcadb7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "b150059c-4539-4517-bee5-21d811b429ed"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "e89e1240-29c4-49e5-9068-6180211f0887"
							}
						}
					],
					"id": "9218ba86-d8ac-4c46-948b-a4d596ff9940",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "f5eab35f-dc88-44ab-a5e1-5f33e8380ea3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4958d3f4-a54b-4cc7-be4e-ad2a57019e4f"
							}
						}
					],
					"id": "e379dec4-aae2-4238-a1c9-ccc7f96de632",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "59a16f0b-d0cd-4f4a-a594-68f1ee0fce41"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "268bb886-ec85-4a2b-9e37-42084455455e"
							}
						}
					],
					"id": "ec8f424b-6dd0-4027-a3d4-a1faf72a9236",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "46cd6dae-3881-4758-a3b9-a499589cef6e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "fae61b2e-1527-41af-b5f0-a546cefcedc4"
							}
						}
					],
					"id": "52e9268d-f167-4b33-9ad3-3d139f4442ae",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "614ff013-b384-4326-8499-85cfccdf1753"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "71c48ecf-7a35-48e2-af12-1ed0de1970ce"
							}
						}
					],
					"id": "685074e2-0460-458d-bc15-da2fcfa778bc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "a23f25dc-e2a0-4e2d-a526-42cace893070"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "db18ec72-e073-446f-874a-f8ca49f63b81"
							}
						}
					],
					"id": "bad0d0d2-24f2-435b-820d-fcca4394cc3e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "24193632-105b-4987-b7cc-59a603e06cc4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "638f5b7c-1971-48ae-8831-e8e9ab253f11"
							}
						}
					],
					"id": "c401e8bb-ad5c-4f19-ad21-dc0ac171c72a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "23c4b770-df69-4bba-a00b-28d615b7fe0e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "eda9c19e-0542-451e-a17b-6233f4e5288a"
							}
						}
					],
					"id": "b0b04946-85da-441e-987b-1521775204e0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "7053823e-f43d-42d2-8915-7f2bd98253a0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "921e130c-c485-430f-acb6-c3e9a79b3daf"
							}
						}
					],
					"id": "1e63021a-f2c9-4913-8516-42f32436b5d2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "0137835c-9254-419a-b4a3-b6fa1b64053f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "f58008fe-26e8-454d-9e6c-9e90cbb4bbcc"
							}
						}
					],
					"id": "0d4137e2-fbf0-49c7-a71f-59a7f83d7660",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "aa48eae9-2b6c-466f-bed6-b4a2ef316767"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c8193fac-45ed-497d-a132-10e55e81b5ee"
							}
						}
					],
					"id": "a7c9b84c-33f0-43d9-8364-9b59bdd2cef0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "c8a5aaa9-d7bb-4d18-b67d-2b161ad0bd84"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b39e7322-ddab-481b-acf8-09bfd84f214e"
							}
						}
					],
					"id": "dbccad20-f617-4e71-8e0d-2f56ffe778b1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "6da07f6a-3c77-4559-9a20-2e2525f5a65b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "e59075f9-145b-4ee5-a64c-bd413c2393ab"
							}
						}
					],
					"id": "cbaed569-9fc0-40d6-aefb-2526ba50ee8b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "b18231ab-9f30-495a-886e-04c873dcfd0a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0a907958-2d2d-477f-ab9d-8ba722620a24"
							}
						}
					],
					"id": "5440424d-b0cf-4845-bff4-d5a838254660",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "9ab530fb-7beb-439b-98a1-fd06272e97cf"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b86d9ca6-5809-49d6-a56e-96cd569f5796"
							}
						}
					],
					"id": "fe3114b5-871f-48aa-9328-5d2d5dd5a8c0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "0f21bbfa-cb95-468f-885e-46abe46375d9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "7c0042da-2669-4be2-a726-9ad1550c6a73"
							}
						}
					],
					"id": "85326488-c931-45eb-b8f6-1f92a2dace68",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "f211d568-c84b-4d74-9375-75a01f934b92"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "488e9529-1e8c-446f-8651-a21cc80e0ac9"
							}
						}
					],
					"id": "ed394aee-c129-45c6-a27f-701184332cf4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "b6cea1db-307a-4e68-8fad-b20382833644"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "930bb20c-5fed-479d-a25e-33b6d2d6b2fd"
							}
						}
					],
					"id": "b2542dde-6160-4428-81bb-7bf74e1ac443",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "0642a05c-0638-45bc-a395-5c86ed0fbcf0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "91c2c03e-10eb-4d89-ae51-e5f763bc5705"
							}
						}
					],
					"id": "bb0722f2-77df-4d7b-9e38-6837c9f9e22a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "763c822d-6d08-4f4c-9f30-a2a5c279b068"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4caa1800-abeb-4ce1-96fc-2168b7416c51"
							}
						}
					],
					"id": "1dddf1ad-48e6-4dc3-add7-7e95ab0d8afc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "c4b58afc-ca5c-45b4-b51d-919c271a5f1e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e16b9923-9e76-43cd-a696-2f746048e3c7"
							}
						}
					],
					"id": "14061058-2d96-4406-87ac-35815fae7cfc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "faf920fc-9cbd-4110-b156-a0eb409d13fa"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "5fd5b832-c880-4729-9ca1-6db907ae0cb2"
							}
						}
					],
					"id": "aab78fa5-7ab7-4e4a-86d8-fa1ee039ff21",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "df84bfe2-c945-4189-85fd-e8b6aa5b80b6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "5a7503c6-402f-4901-bc67-b8df7efa6ea9"
							}
						}
					],
					"id": "4c3b8209-42b4-4829-8078-1b7d5ff8a53e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "4c6cac45-63cd-441f-bade-a0b0fe85d5a9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "541a85f3-1c4f-4a26-9311-42d426d9860e"
							}
						}
					],
					"id": "1fbb3364-70d7-4d73-be0e-51997a715bf1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "f6e161d1-5cd6-4186-8179-afda2e0b43cc"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "c9b319f1-e86f-416c-b549-dd3678de6bb2"
							}
						}
					],
					"id": "305b0f7c-f109-4c0c-aa0a-358eaa2948cf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "c4aea798-86aa-4caf-8679-f35ab0b07dcb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0a4c864e-b17f-4680-83c6-ac4a68407130"
							}
						}
					],
					"id": "3568ace3-0d04-4734-9c19-b510fd4ea1ac",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "f19e0b69-aa13-486f-b628-56bceb0c2560"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c600d07c-2838-41c1-855c-74bdddb5bf58"
							}
						}
					],
					"id": "c7ccc84e-5f08-4abc-810f-0b7c3976331f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "be232a66-3781-494e-af83-bf3258adb9bc"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "957c61c8-1adc-49fd-b4ea-fceff8579476"
							}
						}
					],
					"id": "07edcac9-3ca4-4018-9bc5-2808a11055ba",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "ba68fb7f-b7d5-419d-a499-ed478baa59db"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "841413e9-c86b-4f7f-9248-8d63de4db48d"
							}
						}
					],
					"id": "ee04832e-d655-4e74-92ef-fcb1fc775692",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "6f542f1b-8c1b-4e38-846e-a3811d00c016"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "bd717e52-2790-4a44-8797-286c32bf249f"
							}
						}
					],
					"id": "ae8c7f31-6bcf-4ac5-baa1-69ac1ebc1237",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "f9a355e3-f2dc-48ae-ad94-5a4242daae78"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "9de9cc9e-7420-4c2e-aa22-d241eafa8771"
							}
						}
					],
					"id": "1c5e3493-54d2-4de4-b6b8-d8347551685e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "5cb199cf-7d97-401a-bab1-ce9d30a5fc69"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "fd5d09f0-38eb-4630-b185-1c489aec0a8d"
							}
						}
					],
					"id": "908a9ebf-fade-450c-a62d-7b77b692edcf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "cce0006a-505c-482b-a31f-730c1c94aa36"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "86c21b82-a659-4c39-a5f0-993a2231f5dc"
							}
						}
					],
					"id": "fe3e03cf-bf8d-47e4-bb31-061cb48c0989",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "3942ef18-e293-4588-a927-a232126ca1f3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "d01ad035-6eee-4e60-8448-3a5514555975"
							}
						}
					],
					"id": "f839c34d-16e8-48cc-b64d-e44acb6eaa28",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "3af1ce7a-1f54-461e-acfe-700be368dc91"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c33978e1-fc37-4506-b1be-f252d0b60db9"
							}
						}
					],
					"id": "1d7cb51f-1aec-4a42-815a-be5e1eae657c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "40e2d702-b8ae-46b1-9f63-b86df343a2cc"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "68369a76-ac33-4794-8346-a2e9a2bf3cda"
							}
						}
					],
					"id": "cfb18d98-fec3-48bc-a186-9999440942a5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "63a5b2d6-2b43-4c2f-b4e7-b545c41f4d10"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "4658ddbd-08ad-45a0-a4c0-04aefe4514f7"
							}
						}
					],
					"id": "c2708557-0b78-4f33-b829-0502e96242d1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "8f70fb7b-d568-4501-9c11-e4b692f3244b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8c012391-d9a1-41ad-8094-d05e8b793ee4"
							}
						}
					],
					"id": "d27dab3e-e3a6-4e16-8b26-49c444ccd863",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "b6ffe0e4-4b58-4851-9404-4283c0b77bd6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "5aa7de3e-20b6-4084-8b4c-9366b8941787"
							}
						}
					],
					"id": "ec7405c6-d722-4c1d-9257-a6ecadf9f4b0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "bb41b327-5cb1-4229-a9b5-21b04bc82d15"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "4ba2d832-4995-49f4-96ff-8b4dab515ef1"
							}
						}
					],
					"id": "c0352265-fcc0-41d7-9a5e-d7beb7d0e94f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "6c97be66-d128-4f00-ae6d-1d2e00b17008"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0c1a1102-7ecd-489c-993c-922274d2af0a"
							}
						}
					],
					"id": "598b26e0-7a68-474e-98c3-f9edfcafd63b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "cdd36f5a-0753-4fa0-911a-86a07aca8672"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1ce1a24b-4c0e-4dc4-b104-515c163c7b0f"
							}
						}
					],
					"id": "3b2931aa-dbd5-427d-9361-c14c87cbc078",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "0ec67a8d-caa3-46ec-aa6c-b16b515b4731"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "7367a3b1-6d94-4bb3-a88d-bd6f1e484d72"
							}
						}
					],
					"id": "338ea104-7d16-4f0f-9ba8-5dd8cd85ed16",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "cbbea5af-7681-40f8-a92e-df1b3243f67f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "48fd79f0-f9ad-475c-8da7-acdf6fd4b275"
							}
						}
					],
					"id": "4a213509-2185-4bcd-81d5-05d290b1ee5b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "9f122c47-9149-4b17-a8e2-bc8c80d5c429"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "12c38721-24ad-44f0-b448-4629769d9ecd"
							}
						}
					],
					"id": "06c6b3e0-fa39-4bb9-8636-f77fbb35bd82",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "3c929ffa-c132-4170-a634-f574acb1c900"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "3b02cab9-b6fa-423c-9d1a-200b990e20c7"
							}
						}
					],
					"id": "5028615d-4b93-4a20-a045-bbab786b6494",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "3f8c27ea-1f48-498d-ac39-4d613a94a5e5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "57df7f3b-d8db-41be-847e-7d3613e126a3"
							}
						}
					],
					"id": "c01cbd2b-fc1a-4dff-8a7e-21ce1c4a10ed",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "c7afaa6e-7fb9-44d2-ae3d-1566f33f48eb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "11b44cdb-0d7b-4d1a-9b2e-304dd08780b4"
							}
						}
					],
					"id": "2db3d8a5-ba7c-43cc-a806-2c7f41c245a1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "7a9ecdbf-e7de-4a1a-be13-4ec37460d2de"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "ac0a6ff7-06c3-4a27-aa52-5ceebb017fc2"
							}
						}
					],
					"id": "88af37ed-933b-47bc-bff5-b6b11d31d481",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "06f5e5e5-dc5f-4bb3-a748-758579c44047"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4386f044-84f2-4748-94de-5816ea78d303"
							}
						}
					],
					"id": "2d5734ee-f7cf-41a1-8fe0-fc3f2d121ea2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "8e301aaa-7394-4ccd-82b4-a0dee34a582f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "52814319-adc1-4153-a060-15242b7b898d"
							}
						}
					],
					"id": "2e0501d3-f8fa-4a2e-86c1-602737b60ed3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "0f0e8aa5-6d9c-4104-be82-78d926e54eca"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "e06f9a19-32dc-4f9f-ba6c-06968a1bb88c"
							}
						}
					],
					"id": "56475f32-7daf-487c-8fff-2de3368cfe01",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "a786cb1c-398b-47c7-ab6f-a69334c58297"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8753ee7b-b9f7-4a22-9455-e6786fad3da9"
							}
						}
					],
					"id": "687c3e33-399d-48bd-9c1b-51e4456ac98e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "e5fcde4e-56ae-434e-bd6f-e86ced7dbbba"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8b1115fb-91e6-462b-a4d1-96be547dee07"
							}
						}
					],
					"id": "43698070-7392-42c5-853d-d9012afe36e1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "2955ff82-30ab-4f0a-895b-6656f5423b24"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "af6cbb11-9efe-46fd-938a-1ea76d780807"
							}
						}
					],
					"id": "334007ed-3c3f-499b-9985-380d18558371",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "9e0dfe8c-02b6-4153-80a3-272debc9c84e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "7dc06bc2-b061-42c1-96fa-de6076c52e5b"
							}
						}
					],
					"id": "27d876b8-aa23-45d4-9f23-a9ebb3b3e71a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "565f4b1a-7963-4963-a8fd-945520022eb1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "967a7251-3306-43b0-8377-e1242b7ba25d"
							}
						}
					],
					"id": "45c0f045-739c-4714-afc8-2ef458a3cfa7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "29b1538e-4f0a-4f70-8488-5d14731af283"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "a81e4bac-9531-4f1c-a35e-afa885d79e0f"
							}
						}
					],
					"id": "5eb6eafa-bad0-4146-ae0c-7aaa859ccd57",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "7f566445-9795-42cb-8efa-f6a91eb96cc7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "7ff46037-fbe5-40a1-bacc-157ef614f57d"
							}
						}
					],
					"id": "4c535ce2-08ec-447a-a8e4-e0c6840c2f4d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "ab099044-ad55-4397-b9b9-bfbd2e8bfa68"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d5d64322-68d0-4468-a6ea-cc1fae9dd20c"
							}
						}
					],
					"id": "9a158199-b757-4e45-ab0d-101a021a7ac6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "d87d63b3-94a4-4b20-b3d0-502638e6a000"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "48f71787-ad59-4c63-aa70-f3183d3e3e43"
							}
						}
					],
					"id": "9e1882a8-2179-4d3d-9b37-709fa9032b97",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "01dc3e53-71ef-4c49-9737-67b75b225330"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3d7827eb-08d2-4ff0-813b-880a927b730e"
							}
						}
					],
					"id": "1791a324-2c0e-44f3-8a6e-525cb781338f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "abdfef2b-031a-4bcd-bddf-8576b7734347"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "58aeb9f5-e6f9-4168-9f27-4051e211335b"
							}
						}
					],
					"id": "da41ae7b-8776-4f44-9dcb-c5a89c96264e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "ac820a8d-8ff4-4c1e-8647-06ac6c4283a0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "e7166a28-c13c-4af4-be31-b6e8b56e8c33"
							}
						}
					],
					"id": "5ab6f9e0-d7f6-43f0-9d9e-38b7d90cb95e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "5dfb2436-f0f8-4e46-b1de-9c6035f0dea8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "234954d8-ef82-481c-80fc-06c9cf76aca7"
							}
						}
					],
					"id": "0b9ec2ec-7275-4723-9129-e51597e2314a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "bf0e2ed1-f6eb-46c1-8af1-5927dfb8ef2b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "85e04cad-6967-47fb-a434-b2735387a646"
							}
						}
					],
					"id": "b8c6f888-9c2e-451b-a27d-f0fae0f0e737",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "fc7974ef-8b0f-424c-ac7e-fb071d453045"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "9cfec6ee-bab4-4b2d-bb62-9f4bef0f4d42"
							}
						}
					],
					"id": "4ab2089e-a0aa-4a22-ae2c-4b9d4c44a69e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "21dd4bcd-d3bf-47d2-9f43-c76adbb06361"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b70e613b-7740-4a0c-9631-3794a4c66a08"
							}
						}
					],
					"id": "398a8faf-f8ea-43ad-b7bd-9b4e0b24e11d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "9729c3cd-8c97-4df5-a7d6-e1295e0a74e3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "afff4f5d-0b2e-49b2-b8dc-1f2fdd935804"
							}
						}
					],
					"id": "98d8869e-6cba-4278-b040-74783d7875c8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "0a2c70ff-2d92-4e6f-8931-9caf73673cd2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "fc7a487b-b95f-4c6f-8ccf-eeb111966861"
							}
						}
					],
					"id": "8e244a7a-bcb2-4781-ba54-bd480d52ab63",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "12661aad-1a2c-49f6-bb75-009d1841f45f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3a0578da-df64-40d0-bb0c-a9813e1b668b"
							}
						}
					],
					"id": "e90791ff-d255-4db8-91d3-5082d2bf75c6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "d724c830-96a2-4344-8488-199837d19dc1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d020ce17-24d1-4378-9b4b-f9511c9be9e0"
							}
						}
					],
					"id": "584c78d9-ec8b-4b69-a11f-84b1bee5eada",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "6e419ed0-8b9d-4e5e-90b6-6f2e3b93a587"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "1c1ed3ec-d829-4728-8733-578a5a567dc1"
							}
						}
					],
					"id": "229126c2-3b97-47ee-8aaf-3447dfe6990c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "df63337f-bb41-4570-b2e9-5135c89a42f9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "dc3f51c1-9e74-4700-81dc-36adb2d1a202"
							}
						}
					],
					"id": "d2724a07-3d65-46b5-ba1c-a79177a0b2be",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "d619158e-f644-45bf-98e4-deb1a128f3fb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "9b910668-f364-4f01-a6f7-82bf597c1eba"
							}
						}
					],
					"id": "6b1b0716-4836-4ae2-9c41-8a2da84bf790",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "ef1f3ddd-d75f-46b4-b34c-e6528251310d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "accbaa42-d35f-4a82-a54c-1f23c8bd2089"
							}
						}
					],
					"id": "e0b448d4-00cc-4d92-95fa-ac48edbb71de",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "5ed63eb6-e625-4c8b-890c-fb240d2fe5f5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3ed2d4f3-d0da-470f-aaf4-66e39d7011fb"
							}
						}
					],
					"id": "79109043-c2b2-4841-859e-c9283cf823b4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "c45ad154-cf03-4110-a3e8-ff1c0949d922"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1c413df0-2926-406e-afce-2b28075149d2"
							}
						}
					],
					"id": "6f90a277-cbcf-45e7-b89f-1b09c60ad732",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "34432add-24c0-4568-a3ba-9adbc938fd44"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "c700f441-3a7e-4a9d-907f-0d8c969e442d"
							}
						}
					],
					"id": "e47c2031-aa35-4e0f-b39c-35b74cd4a341",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "816c8874-09f7-4193-b7e4-6e14413326fe"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e87253ca-71fb-4f1d-935f-e4a265dba45d"
							}
						}
					],
					"id": "2affa66b-69cf-4764-8436-b14ea7b815f9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "49a392d8-8201-4477-81d5-6df8ba96e1ab"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b9ad56b6-7760-4602-b7ea-f0c9193439ad"
							}
						}
					],
					"id": "2cf03294-7dc3-4553-8290-40aed5ec6d8f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "c62d05dc-8c8d-4f33-a6e6-9b45f69b5bdd"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "a9fca17f-061c-4ec0-904e-e82c383cfd2b"
							}
						}
					],
					"id": "56f06dd9-e1a7-4c39-bcb3-90c6162ce807",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "8986b739-e846-4cce-a491-40e7601e6a3e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ca7375c0-32a4-4d61-a0ce-a403a0a05173"
							}
						}
					],
					"id": "df4f2e18-4217-4a6d-85fd-816b137ab4ff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "81bfb161-b4a1-442a-a37f-529b30958eae"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2ac6bb72-d371-41a7-801a-5b562735b79e"
							}
						}
					],
					"id": "c53d2de1-3a6c-4afc-8d08-c1423360df93",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "5331eb4f-0d37-49b9-8bbd-620d5d6e37c8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "683b4ef9-102f-4e55-9b38-897fc00b2759"
							}
						}
					],
					"id": "9ea6ce0c-e58c-477f-bb58-60b71f429e46",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "9326c7a4-b857-4a92-94b0-62c929f21df9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c560eee3-6ec9-4696-9893-e4e71cccd243"
							}
						}
					],
					"id": "55c6bc81-109b-456a-a30e-f031de275657",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "0b905cac-dcec-4e3f-bbd3-74a8fcff1031"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c3cc03d2-568b-4ea8-9ae6-a74c030ae55b"
							}
						}
					],
					"id": "ff7677e3-3efc-445a-b462-dc6e382e0943",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "eb157e91-91b2-4817-a3c9-e15194e43db7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "f8d334e5-6614-46b9-84e7-f7068f9449ae"
							}
						}
					],
					"id": "ef30d7cb-8653-419d-9e3e-6c0e9ca05b84",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "b15f22ec-d3d5-47a9-bedb-12919aa82914"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "427f7e33-ac52-4ae7-ae70-c4cf61be158a"
							}
						}
					],
					"id": "724fdad3-ace2-4801-99c7-0719936f9d75",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "45a5a714-9bc6-4ef0-ad02-cf12361d19b4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "bfe640e1-a0c2-4842-ad26-748ba7608513"
							}
						}
					],
					"id": "11036432-2a45-48dd-99df-6cd782e7fe39",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "4611fb8d-2d67-4f86-90b5-1867e887eae1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "21a894d3-30f3-4061-a78a-9dc38b848310"
							}
						}
					],
					"id": "8458632a-37c4-437e-8b70-94c00eedfe3a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "231d0735-b7f3-4364-8538-08449a13c996"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "70aa5c62-d074-4af1-8be1-49a88261b167"
							}
						}
					],
					"id": "e0f67a17-3403-404a-863a-7e980bbff4c4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "f22196d3-d225-44d4-9faa-69a912809634"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "fe6c8802-26f4-4220-aa0a-4652def35927"
							}
						}
					],
					"id": "26ac078d-26ac-46ff-912b-002114ff90fd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "84565e16-e449-4cc6-b043-8dbee3828a7d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "3056f561-99ba-4e8e-a0e8-f6b26ee7112c"
							}
						}
					],
					"id": "cb1a3c38-2468-4743-a94e-748ff7be445a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "11dbadc6-c0a5-4f65-bd6d-45e895213c82"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4d33b001-5d54-4978-a676-96dd792deecf"
							}
						}
					],
					"id": "2344c782-e2c6-4973-ac79-a02a985170eb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "564994bc-87b2-4a73-91e4-323fe1063ab8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e40a4791-7e19-4b7d-934b-fe9cfeded4d4"
							}
						}
					],
					"id": "9098435f-20c3-4bac-8e5c-f22958ede515",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "45dde172-fb6f-49a7-b09f-38799eaf3c27"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "3ef3982d-a908-4cde-af37-eadf4b20f9e2"
							}
						}
					],
					"id": "b310b736-3c4a-4f0e-805c-f9e2ea5a4c85",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "42945f7b-0d6c-4f6b-8b5c-86be65e46bbf"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d3492b5d-2167-4b37-94d0-7bf0a036f9d7"
							}
						}
					],
					"id": "c6106339-a3a1-4a42-b67e-fc2c0e8892ed",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "0fc022f4-a42f-4221-81cb-7f99422a172b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "7a77c50c-c346-40c4-b8b1-7697ae9b8fba"
							}
						}
					],
					"id": "ab2c6221-751f-428c-a0f6-fabb8ba220d6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "c3d76b51-2bb3-42b6-9789-3895b102f71e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "432fa790-70aa-4ced-89a7-44c9d3b0ad08"
							}
						}
					],
					"id": "d648b9f0-2b41-4052-9557-9ad0f9bc7aa3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "8f28b889-52c8-43f4-b31b-31b9ccb0aebf"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "9ab0f28e-8570-492d-a3f4-572e9d2eff85"
							}
						}
					],
					"id": "1f0c423e-8f9a-429f-9a06-491970c660be",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "cc7ae5cc-172f-496b-b633-17a28bf108e3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "cc4ddb80-996f-4e09-ba0b-a004289ae58e"
							}
						}
					],
					"id": "e58763b7-5605-4be9-8793-c46f1c7fdcfc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "f72ab087-9bb1-4ffb-962b-a3a0a5080e24"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "7ebaf717-f595-440e-a0f0-5d8d2afe7506"
							}
						}
					],
					"id": "714fff7f-7447-4ebd-b684-f449ddd441ac",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "f9399b8c-5288-4154-beaf-d194627e0b00"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8a2dca94-a1de-40e5-ab48-732d88ba30e4"
							}
						}
					],
					"id": "220eb577-26e9-4150-acdf-3a6a48dcbe9d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "d873e5f8-ac2e-480a-89b4-36c7413e2d54"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "9726fff5-4b41-47a1-95a9-2dcab5ee7469"
							}
						}
					],
					"id": "b4ce272d-ca21-41d7-81f6-1338fd1498ac",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "6e2e2053-0a37-4a41-988f-1cb8de076290"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "968a6872-5923-432e-8f80-05b7d4a346d5"
							}
						}
					],
					"id": "315115dd-e5ca-423c-8a3f-d892316c580e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "0fedddc9-09c7-4e07-854e-3b51149ea499"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "72e79b73-33ec-45ff-8233-5cd2982e3a53"
							}
						}
					],
					"id": "f9e96473-09c8-42ce-8572-7f94d3ad2aed",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "995c8d84-6577-494f-97b7-c24f3be6e0b0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3637fe96-8d0d-48aa-b4ff-848c95fd837c"
							}
						}
					],
					"id": "9416cc29-36c2-42df-ac97-f9a62b254407",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "65a157be-3aaf-410c-a3c5-b0291fe74579"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "08321bcb-b290-482d-b6c8-5a066328fde7"
							}
						}
					],
					"id": "38fcd0ea-84bb-44d0-8dd8-c1b37a798c59",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "07478ab6-9e2d-4093-addc-0e375f7174f3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b025e429-1abe-40aa-a548-a97096160bd9"
							}
						}
					],
					"id": "430a2f36-d3b0-4c10-ac0c-1fa90650e5e5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "bef0aa4d-ca0a-4a97-a8ac-c372203c0eca"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d71893c8-559a-4208-a610-05d1394b70fe"
							}
						}
					],
					"id": "d015973b-c43d-46fd-8e04-678fb951643b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "fa509cb7-acbb-4745-9e6a-d225760effc7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "ed239e79-2714-490d-af3b-45450024812a"
							}
						}
					],
					"id": "c5e8e537-df23-4bbb-9951-fd29b3ca68b5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "b198ee86-a419-4374-b088-d087e4c233b2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "710c1cd5-5825-4b27-9177-2471dbaa9b67"
							}
						}
					],
					"id": "6a170bb6-ad09-4d2b-be45-2a2ce3db39c1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "bcf7c4af-541c-4525-b92a-42e45cfb8c48"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "31f2ade5-7dd0-4c88-a7e5-df0559cb5f0f"
							}
						}
					],
					"id": "ae827123-8542-413d-9371-a5117dcb8ed6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "683d71ea-9915-43e9-a5e9-692f590bcc4e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "4f072da9-7e55-4ce4-b757-2cc0054d7da9"
							}
						}
					],
					"id": "cfb6cd34-2a22-4424-ac2a-3ced6437c8f7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "40dd1aba-33ff-4175-9897-919bbcf8e03a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8a720a9f-5294-40f7-8551-44c9d6e7cec6"
							}
						}
					],
					"id": "75b68eb4-3048-4ca0-9533-9331bb46d1ab",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "4830d9e8-c0f9-4f9f-a578-3237a4fe661c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e993b7cd-1b16-4261-91a5-84adf1eef89a"
							}
						}
					],
					"id": "c7a2ae5a-79cf-4243-9a24-aab9c798f819",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "dbf8f26c-5216-45c1-aa96-1e53903aecc3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "a0ac6d47-64a0-4f6e-a233-6426381e8afa"
							}
						}
					],
					"id": "2b17cde7-c0b7-42a4-a5b7-c1212ad7b4de",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "b1d123b8-948a-42d8-923b-a480f7601af5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ffaec45c-a2c3-47fa-ad79-33cd77fc510f"
							}
						}
					],
					"id": "946aa23c-91e7-4d07-9405-9be3511ee22d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "4724a899-6532-4e51-9a55-5a5134292f98"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a70a9006-5189-4cab-b0a2-9e131dd694c6"
							}
						}
					],
					"id": "3cbbd9f6-2811-47fe-b96b-a68a825907ec",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "ce8f5949-bac3-4dd9-92e5-45162b2e5e8e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "121eb0bd-eb26-4685-89b7-d71226938ea2"
							}
						}
					],
					"id": "f0785344-ad8c-4359-b5c4-c143a06b9d90",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "a8267d51-a0ee-4fc8-a055-8857e5f9eed7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "06b59aea-f3f0-420c-b8f7-06cd43d37a91"
							}
						}
					],
					"id": "8af21230-c184-4c5f-b32c-df885cfd0e62",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "b491833a-54d1-4872-945a-8aeb65e988f4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0139abd0-d8e9-45e5-9179-c07d4091ee57"
							}
						}
					],
					"id": "046e354a-8781-4865-99de-e312cc24f23a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "d7e3db68-bbc1-4ec7-86a7-1e460e5ddebe"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "96b1d385-164e-475d-8c59-fca872d3d958"
							}
						}
					],
					"id": "dd34c491-d3d2-48ce-94b5-adc71aac90f9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "4960267c-5539-4a16-b2f7-b3a08e3d19b4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "075ba8f1-7c90-4c46-b143-32113cc56b2f"
							}
						}
					],
					"id": "d23bf95b-6633-488c-a1bf-6169023e2f18",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "f7f01d28-9790-4afb-b36e-5095ba3c5e31"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "63c2d907-4994-437d-a7d3-45598f12c333"
							}
						}
					],
					"id": "96acaa23-12b1-452e-8d94-ae03f13133b9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "7369222e-4fbc-47d8-85df-a012b487fbbb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "90132723-c447-4aad-9e8a-8dfa293e62e0"
							}
						}
					],
					"id": "962cf879-5ba1-4eef-9b6b-25fc17591d52",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "c5901262-20e7-4238-9056-5c27b9a427f4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "56b43abb-9e5f-49b9-aa15-340e2fc7b4e3"
							}
						}
					],
					"id": "fe71ae95-2f79-412e-8b26-16f517f50210",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "4b1f8b0f-a08e-47f9-ae28-3dda7c0f2dc7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e59bda84-b4c7-4d78-93bb-003ad8cffdb0"
							}
						}
					],
					"id": "697c82b2-6e04-40f6-ad81-8c1af8963266",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "1f15d3f0-5a35-4731-b707-b6eeae415a60"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "c3fd5b80-9da0-451b-b410-b21672c08d50"
							}
						}
					],
					"id": "e01949ab-0abe-4580-855f-c1a63e252b62",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "70945c43-1d66-41b4-a5c1-82a833394715"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8d567ded-03fc-4407-8f14-5e2568a3abe0"
							}
						}
					],
					"id": "558a6c10-0c94-439b-a0d7-64c5f9ca113e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "3732da9f-a710-47ca-8ba7-e57c7de91f47"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "6c94c50b-fcfc-4bda-8dbb-2b6dd961d123"
							}
						}
					],
					"id": "14010d21-86fe-4cf3-80b2-d51026ecbb14",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "4ac26bf2-c7c6-45f6-b4c8-2004741339e4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "3bc7ff71-e0be-41ef-a768-c6e9ef5a2b88"
							}
						}
					],
					"id": "2b8986ca-817c-43ab-8ba7-6c9ec7984a49",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "5afaa6a9-3d86-466c-8765-7dd706ab7854"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a65476b3-e8cd-41d2-b67e-b1fe62a074a8"
							}
						}
					],
					"id": "498b9f38-34d4-48ef-a24d-57dc707f7984",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "3efa8fb3-e87d-4579-be66-cbd0fe8c611f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "bb0f84a0-7f6a-44ec-a410-f515423796ff"
							}
						}
					],
					"id": "972fcd00-3e32-419b-aadc-92dca2f62c7e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "399fd961-5619-46c3-963a-c912a00e2186"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "655eb1c3-a0bc-41a9-bd93-43a277caafde"
							}
						}
					],
					"id": "142b5255-5832-4288-8fab-d030d6c8bd05",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "22ecba21-26bd-4add-8fc3-3c518bd3dd76"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "26de9ed9-b3dd-4e9f-87bb-d41485dd4cc6"
							}
						}
					],
					"id": "b0f7d8c5-1ae3-4474-9b62-54f11e4368b1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "036b3685-cd7b-4e4c-bc97-2117c533850d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "7a6a9f96-f632-4751-b730-3641e3bb2801"
							}
						}
					],
					"id": "916bc86a-fe28-4637-896a-7ac0c37a2b12",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "85797484-4eac-45fd-bfff-a90551011189"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "89083777-7258-4423-8220-5e5684a80b2b"
							}
						}
					],
					"id": "4c627620-6f2c-4e41-8e95-09ab463f611b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "5256973a-d5ab-4692-9343-b0f6427ecca8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "83c34b06-0004-455e-b890-e47d61a544ba"
							}
						}
					],
					"id": "d1f35750-56ee-41a3-a1ae-f028ec8dfdca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "0f9b1b4b-c2c7-4f98-a2e9-28b996a1b71b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "49c9fc9d-64d6-4cd6-9d85-34d4eb449f16"
							}
						}
					],
					"id": "505f409c-4dc3-41e2-9ef5-7fc706e85301",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "028ecef4-f57c-4993-8837-2a3d15af77f9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "5455c12c-f097-498e-92d6-07c26c5725f2"
							}
						}
					],
					"id": "04356605-e205-46f0-8529-d66eeebb843d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "c8b5808e-99bc-4c75-974d-a9f212d19b07"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b579314e-3541-4ad3-8298-ee67ab44ce29"
							}
						}
					],
					"id": "849292da-1f52-4384-95e5-56d4e2a5d278",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "352dc37a-e63a-446e-823c-3ae812818154"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "de1ca643-1492-4719-ac4b-232d3a6d7cb0"
							}
						}
					],
					"id": "9acbf679-3597-4c9f-a279-c1c5fe29cda8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "736cfcd4-1738-4a82-abd6-f71f0abe63cc"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "5a209233-01b5-4cef-bdcf-5b8969404e77"
							}
						}
					],
					"id": "1291f802-f5c9-430b-b80e-26083e7fbc80",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "488e58f6-1309-4949-847b-4f50803f09fb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "58f8b44d-aed2-45c7-92f4-4fe5ec32eebb"
							}
						}
					],
					"id": "b4c932e3-0df5-4df1-af1a-a532110344e7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "ad66a8c4-a22c-4cdb-beaa-3e6f6758a56f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "985471b1-82ad-419f-b80b-1cf75f907139"
							}
						}
					],
					"id": "beaf3b2f-0215-4d22-a61e-793c95c86e7f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "81df4b39-adc6-46a1-912f-b84cbe1c7df9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "edfc32fc-8bfb-40ab-bc73-7b81484b16df"
							}
						}
					],
					"id": "e1ab7fb4-70d7-4d0e-88bd-2f1971cbe853",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "707b0e5d-aa54-43b1-ba4e-c7aac6920a4e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "6bca3150-67db-4b54-89ce-5700ade86c21"
							}
						}
					],
					"id": "7ada53ed-1fa8-4bb6-b9a1-fc18eb5f85a6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "546f4102-73be-44d4-b975-20b5a04c297f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2b8bbcfe-07fb-43e1-ace3-5c5cccc56b9f"
							}
						}
					],
					"id": "1f9095b5-45dd-40e0-a19d-d0a03a0941da",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "9cf353e0-98a1-40bb-ad78-4800851f95df"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "fea360a7-ad8b-4cf8-ab7f-228a0bc07c0e"
							}
						}
					],
					"id": "e7cfd400-7005-496f-bf4a-79a2a718fb96",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "86888365-34f2-4d09-823d-df58515ddd4c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3fe1ed08-f323-458e-bbe8-41a88ba0b4a2"
							}
						}
					],
					"id": "e0ea4c29-e3aa-4a39-a269-4d3dd827dc41",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "fc845dbd-f74b-41a9-a720-e360b9820b4c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d43c9240-3451-4d0e-8381-c2f4bb53fc09"
							}
						}
					],
					"id": "856b9f6d-9a61-4e1f-b0a0-6e804c29136a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "938f022a-66fd-4f97-9163-459fafd58284"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "a48609fa-1e04-46ec-b1e0-cbbbb249a478"
							}
						}
					],
					"id": "453eb066-26b6-4a94-b5c8-bceb832f7714",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "986df9a4-f4b7-43cc-a8d4-86709e62baf6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3ed3c14f-e107-40a0-b4b6-86bcd60fefe5"
							}
						}
					],
					"id": "e16db68c-6d9b-4001-9963-28125b31b82f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "df43f399-f482-4964-9227-016bfccc6831"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "dd1fe1d3-a5a6-4667-82b3-af3820e2279d"
							}
						}
					],
					"id": "1544f021-8f5a-4d2c-bb51-f75433922e11",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "c556aaa0-eb1e-41fb-86a5-ae1b3d65e8c2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "2f92dd4d-5047-413b-b6e0-9ec013667355"
							}
						}
					],
					"id": "0ee49451-35b4-4b21-908c-2354ecd5fb05",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "0839bcdc-411b-459f-8e9b-b8781d1df5f3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "888f3ced-754f-434a-acb7-2b3fe466cd87"
							}
						}
					],
					"id": "874fe050-2d2f-4ae9-8706-e1db2e2c24e0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "e42474e5-c881-4c19-bb0e-17ac240ba20c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "37e57876-2432-4727-975c-66fba93736bb"
							}
						}
					],
					"id": "72085664-24b6-4e59-9ef4-a2f29b0afa2b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "8e478e44-3632-4347-a021-321823ee6d5e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "42cd02b0-bc9c-4e10-bc38-3b91d36a3bd3"
							}
						}
					],
					"id": "1dd285e9-09ed-466b-b3eb-44a9f696cfa8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "54b7b2ca-5116-4b36-90cd-1906cb0f5493"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "5b8979a1-2990-44e2-b542-84ad22da93c2"
							}
						}
					],
					"id": "5d1162e3-7d35-4855-9638-745331a0d06c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "c99d4ae2-8755-47aa-a343-85d8eede9b3d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a4a74b8a-5b9a-4b17-853a-1bbf7af379e6"
							}
						}
					],
					"id": "86ae669b-0648-4b27-ac48-bc911d6d4842",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "ced84862-2119-457a-b0de-e32f6c6b9a93"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "5f5ea1c9-834a-4a2b-a052-7c4fd35f88b2"
							}
						}
					],
					"id": "28efc3ce-6304-4e6a-bbef-707d9ee7808c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "4918cc4c-9245-4fe4-a7cc-15f84b7971bb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "12c41754-f98b-4ece-b073-e8bab6828ad0"
							}
						}
					],
					"id": "26447a58-6a20-4ff1-83b9-8818fa2663a6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "5ca053e1-2e3d-4a47-b427-592cb4f912a5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8256f3f2-0f4d-4e30-af15-fb171bcb7317"
							}
						}
					],
					"id": "d761f028-2a6d-4375-ad5e-f3d33990899e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "dfe8e805-c3b8-4b6e-a2d3-0df153a82b4e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "03453967-940a-4f07-a700-fe47ef8dd97a"
							}
						}
					],
					"id": "070a7077-9cb4-4de0-a8ef-7768c58aad16",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "fc921fd9-076f-49b4-b888-1345928457aa"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d3ea94cc-5eb0-4591-a53c-567bd5390ac9"
							}
						}
					],
					"id": "460182b0-8bb9-4f9a-98aa-1ccec6cb2279",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "6da02424-ff42-4177-bace-3e93dbe47d6d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a1ef269d-8b94-4db6-9a51-084278f35806"
							}
						}
					],
					"id": "68240c87-efc1-4a37-8277-907770bb7ef8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "90bd316f-6d0f-4e99-8d06-158504a510ff"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "940b5af3-b1c5-489a-991d-db9e6e0cf93f"
							}
						}
					],
					"id": "787cf889-f93f-4406-9ffb-cb2857f71ef0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "3380bbc9-96bb-4746-a3c1-299fb0de40b1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "aefb8f1a-36e8-4303-9264-97026500a1db"
							}
						}
					],
					"id": "c483a7e0-c7f6-4a2b-90e1-3a0ea200edfe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "7d5f02f0-8637-462a-8155-b8cb75a2c51b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4d317fc4-a712-4595-bea1-693e248d9f3f"
							}
						}
					],
					"id": "6ad5c101-8840-4f9e-a2ae-c899e44a1854",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "84ab8d5b-5f15-45cc-a555-80d5a2c8de5b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "0409beb0-78f2-4125-941d-8a42407fe24a"
							}
						}
					],
					"id": "cbd0bff9-7fce-41f7-8bc6-303c65feaef4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "7bc4eb59-78a0-467e-aa7f-cfb0c67f1522"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e039d4d8-b684-467c-bc17-2bc0ea34f487"
							}
						}
					],
					"id": "c6f85b8c-44de-424e-b9c8-01914f318ac7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "8c1e3e06-a3ee-4957-a161-7217c8e71870"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d2947561-afe7-48d6-85cc-a95fe4ec7369"
							}
						}
					],
					"id": "c2de0a18-0800-4a44-9c34-ee5d628c0721",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "41be5100-db75-4526-8b0c-2c221c4378a5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "bdfdfa03-2b75-4c55-9f04-b5befbeeff40"
							}
						}
					],
					"id": "e091bd23-c6e6-4f54-beeb-926a8a905a64",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "fc9dfa1c-8928-466e-b00d-45a698590bce"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "800eef84-26bc-4a3a-a44a-a340ff30b58f"
							}
						}
					],
					"id": "410ee5fb-a956-4381-8473-ca2404043e69",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "0f5c467f-dc80-4423-b2fd-8f44ef9a22d6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e23e1dbb-9ec7-4c90-8f85-9198655b9af6"
							}
						}
					],
					"id": "5176c47c-dcbc-4bc8-a8a4-e0c5e86a2c50",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "94967299-faf7-494c-9a5c-b3840333a3d4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "0132759d-7858-4b8e-aaa8-26beaed0e113"
							}
						}
					],
					"id": "b3650407-a31e-427b-9947-152cf3c398ba",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "694786e0-4eff-434b-8a4a-0db145afbf28"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0ea74a40-063b-484e-829a-d49d81ef23b3"
							}
						}
					],
					"id": "88350699-a132-4856-a083-3cc188384d16",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "edbe6ea7-fde6-451b-a570-38e5b629db13"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8e375d53-daff-4834-aed5-4a526e34aec7"
							}
						}
					],
					"id": "5a7b4034-b8e7-4928-8d70-671db6d801cf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "a0bff859-cda8-4015-991b-be56240c77bc"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "2a0f783f-bacb-40d5-8adc-f0c61285a0ef"
							}
						}
					],
					"id": "99de8e31-cfa0-441b-8fa8-329383934093",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "54ad70e5-0e15-4f08-a829-c1aea8780071"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e668ecb5-2b29-4a5c-9227-85b01e4dc513"
							}
						}
					],
					"id": "9343eab2-d0ae-403c-a40e-8dbbc51d388b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "d83fe038-93ff-444f-9ce0-279fbf0ddaa1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "33b1ea6d-6bd4-4ae6-9ff9-e198f6fbc130"
							}
						}
					],
					"id": "dba7786b-73db-4295-b91a-ea31c3314811",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "5a2b2cc5-9302-4e13-a836-f9c9d5874bc3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "fcdccf28-ed56-48b2-89ea-8ce2048cfb8b"
							}
						}
					],
					"id": "6369fd7b-84d0-4a30-9d1a-a08ebda9289b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "876814c0-8d36-4278-a4bc-56ce1f2d58c2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c1272ffc-043a-45f1-9077-a13f61d2eda0"
							}
						}
					],
					"id": "5f64c874-de93-4f22-9551-dcea0d25740e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "9bf7163f-f144-4e9c-b4a9-04917d017b76"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "02d63224-2421-49e2-9594-5a42e7de5cc6"
							}
						}
					],
					"id": "b6885c5f-416d-42a1-b663-f78a4ae5dab8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "4560181b-6b62-44b9-a9e7-fb41d4efac33"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "27db66c4-fdc3-4501-b74b-8517c346aa43"
							}
						}
					],
					"id": "131f115f-fe4e-491d-8b49-add2573d205a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "fc3eb128-e447-4e67-a792-986bb16af719"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "45736f79-92a0-455d-af76-57decf137c4f"
							}
						}
					],
					"id": "7ab3bdbf-f1ed-4850-b3e5-2209a7e36a1b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "12e9a372-9245-4812-a0f4-9f1f76a48c6b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "abb06397-9b88-412f-8071-52ac8057d5c6"
							}
						}
					],
					"id": "4497abfc-8275-46ca-a70e-beea83b37636",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "b81f2735-330c-4c0f-bcbc-26010a8e4a02"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "99821503-f834-4c63-a13e-cd035ab79b30"
							}
						}
					],
					"id": "f8191714-4068-41ee-ada7-8966d0859494",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "66459d45-1618-4659-a2cc-8363eaaf3ca5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1f5d56a3-8c7a-4fa4-852b-50fa1c16f8ac"
							}
						}
					],
					"id": "1fa8c79d-b21b-42f7-808a-6882b76c274e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "620e74df-8e08-42a5-934f-674492f52a7d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0ff1ec23-e099-458a-ad86-10adfe3803f1"
							}
						}
					],
					"id": "26a0aaa2-246f-46d1-a426-e10ed2f02b1f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "b229597f-371f-4f73-bf01-3a9c9e4b9067"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "3cb9f7df-82b7-4875-9f4e-cfece2456934"
							}
						}
					],
					"id": "55f45e63-fff7-41f7-99fb-cffade086a0f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "d8e057d7-8ae4-4208-9fa7-805255c2b495"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "dfbe53fe-9af9-490c-93af-a58bcf069ed0"
							}
						}
					],
					"id": "1bf67676-4441-44bd-bd62-100c64b77a78",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "4f937bf9-67d3-406b-a541-17e503da13e9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e8c9ae31-a027-49e5-933e-82c9be692da3"
							}
						}
					],
					"id": "a3f842ab-a2cf-48fb-987d-81096b144858",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "6c4271dd-d23e-473a-9b12-89df28eac13e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "bd6ec260-132b-4fd2-8296-efcd47d8de60"
							}
						}
					],
					"id": "6a254132-5f95-4c06-b70b-f488be407eee",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "dad604e1-7a71-4ffa-b6e1-e1f1ae50f186"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "beff235c-c266-401c-8335-63468d6332f5"
							}
						}
					],
					"id": "236b16f0-f905-4cfd-a9f2-b831f87f5309",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "c57a3c2c-d853-4ee5-8b71-445abfccd24c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "41bdd8e1-c128-4398-b030-eee42bfaa794"
							}
						}
					],
					"id": "bac4e368-1a36-4815-9804-323c1d59add6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "a1403ddf-c646-4ddb-a20f-3ae28358883d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "09606d4e-73a5-4a27-812e-156807dc46d6"
							}
						}
					],
					"id": "41b87a51-6ccc-42c3-8628-e0183ee2c88b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "2fe2e479-06db-4d9b-9f72-e8e6e1a3949d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d7f4589d-968d-4af1-8321-8624f0d22479"
							}
						}
					],
					"id": "47165f4b-4727-4908-9991-d2a3d80b8cfb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "87f36915-792f-4579-a32e-a795464daca4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c7f45f6e-7742-4397-8303-4410dc74b980"
							}
						}
					],
					"id": "1b5a5ea9-62d1-4b19-82b9-eefb6df17fa1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "6c0f3b3d-5293-49d9-ac34-892d6d9210d2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "9a0b219a-24d7-4d82-b0b5-8d008ce1ded7"
							}
						}
					],
					"id": "c388ae6d-a71a-412c-abee-0b5ff6d7070a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "67dbe74a-aa20-41d9-bd93-5fbbd430faba"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "78a98146-e84c-40f8-adb9-13fda8517d62"
							}
						}
					],
					"id": "d77bd054-4826-44db-9b18-c38759589300",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "ba526d65-4f01-4c40-aac5-8bd0bf0f9765"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1d570001-9e39-4142-b78f-98922aa829bf"
							}
						}
					],
					"id": "2cd7322a-8eea-4e74-a1ac-289f0feb1e5f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "39b6429d-80a1-4dbf-a86f-731223d63ba0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "d15cb9b3-3127-4e2c-9140-729143cab785"
							}
						}
					],
					"id": "93819816-5589-45ba-899f-e78a505e505b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "bd51abc6-70da-4ed1-b7ac-67a02a3912bc"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "14858f38-b24c-4a55-b794-a71325bb63f1"
							}
						}
					],
					"id": "792107c9-0e3a-4d35-ad68-7da7c1a02cc8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "c243986b-9ed2-4a2a-8485-3d1f5113b210"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1a013bed-0d6a-40fb-8806-cf9e406cecb6"
							}
						}
					],
					"id": "e71727d4-7b77-47f3-95bf-48d865967646",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "3e5a262e-e572-44a0-a39c-83965db75fa2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "a2a5a3ea-2a48-4f61-b1bd-6bcca9c9755b"
							}
						}
					],
					"id": "c4994a55-bca7-452c-b01c-1703a3f08917",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "a7b4ce0d-6d1e-4bad-9a3f-e10b5522bc39"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "53e89eac-1318-4edc-ba90-75ef41c83581"
							}
						}
					],
					"id": "917218a4-5663-468f-8f4b-a689c2374283",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "fd701dac-337e-4906-bc36-edfd334d1bec"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "6d668656-aa3e-4b97-9c3e-11bc1deb9939"
							}
						}
					],
					"id": "9bc8158f-09f4-48f6-8bd5-0d42f4622bda",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "627b70ee-b38d-4bab-9447-b057ba8bddb8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "4f2b578a-eee4-4324-a4b6-cb8d005392cd"
							}
						}
					],
					"id": "1b72bf13-0aba-432c-8fa7-17aee9c3d804",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "f0a9f133-9a15-48e3-8856-8f1e457a554b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "071ab40c-4d3a-4233-8f94-4471f44ebca6"
							}
						}
					],
					"id": "b6bfacc6-79b8-4f47-83be-656c58a0a918",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "f7f2b7fe-42f4-4e51-b57c-f0981592e5e7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d014efbd-1b98-4982-b175-8f582c123ad7"
							}
						}
					],
					"id": "625d393c-119b-470f-a09c-14804243c3f4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "2131d7dd-9555-4f18-9a0a-258394f5dd8d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "f18779bd-da7e-41ba-8b47-6d0b14fd1c7e"
							}
						}
					],
					"id": "ca68d0cc-7fc3-4f9b-85f9-299955cf88c5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "e3b44eea-c033-4dbd-88e5-53ec514e5bfd"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e0266738-bff3-4588-b010-50636008a3f4"
							}
						}
					],
					"id": "5ebb9c5c-3a0b-4905-9ed4-6f0b1dce4131",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "d619dbf8-9426-4f15-a94d-27a56c95374f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3a8e1c16-3c73-4e5d-a90d-cf7e78edbcbe"
							}
						}
					],
					"id": "fefc3684-de84-4801-b39a-3a5697b8a57d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "e632a2e8-e54f-4998-87cc-6db2b9b1a146"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "cac1e3c4-d550-4705-82ab-eea0f8e5bbfd"
							}
						}
					],
					"id": "f008b25c-991b-497a-b7f2-f2916d044414",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "cc10aad3-7cde-42a2-ba62-0f693c2b0a60"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f81906eb-cdba-4db3-88b4-7cc3fa1fab45"
							}
						}
					],
					"id": "0eb6f553-daef-4084-be6a-682cc7caa7f7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "2c6d0570-4476-47a5-8d70-660d2f7189a1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e3bc06b4-12f3-4d0a-9737-9152e5e4e4bb"
							}
						}
					],
					"id": "68db0634-8a3b-4ce6-9c0b-7cef39ea52a3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "eeb3cb41-98aa-4dc5-9be8-ee6d5ffa4af3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "1d10665f-8509-40e1-ae8e-e474c0c9fe2d"
							}
						}
					],
					"id": "d7faf4aa-f94f-49ac-ba94-d9c5c9b305ea",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "988cd3f7-5d53-4937-82ef-a809fd69ca28"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8c3f6811-cc0b-4112-871a-478df8e14c08"
							}
						}
					],
					"id": "b33e86c9-e8f0-4836-8e55-406ebe34b03d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "74f0306e-2476-41c7-9a69-ee86a7a9771c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "65c56d8e-4a4f-4ae4-9641-7958302057fc"
							}
						}
					],
					"id": "0ae5eb75-064a-40ba-ae5f-4d34e17bef1f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "6f297905-0967-4c3f-9fa3-40962ba78aba"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "d715df3f-1485-47d3-a9d6-c63e76d5410a"
							}
						}
					],
					"id": "0e0cc43e-8a81-4715-ba04-c1d792fc8fb3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "f69fd71e-14b2-479c-ab27-5e1e848175ce"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d563a36d-1b68-4994-b884-a4733b6dd276"
							}
						}
					],
					"id": "2b1d39d8-afd8-4be5-9916-fb9ce5071273",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "72747fc9-472c-417b-8330-23d7abbb3872"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "76d70e28-aacb-4d05-976c-b9028395dad2"
							}
						}
					],
					"id": "63f3fce2-7ec8-4711-a604-fe8855394a05",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "3bf8f6d3-552a-44f6-9974-d0c9706eb5ef"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "ebca6ad7-e0a3-4b9e-a7e4-6f4e0c64695d"
							}
						}
					],
					"id": "217b7497-9a4b-40d6-b258-ddd15a1cf639",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "a7d0efa9-e4d4-47a8-9f97-886ed92d679c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d8b92278-d994-4930-b234-a31161e6b86a"
							}
						}
					],
					"id": "a51c0c44-ce3a-4976-9435-c90fe3ebb269",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "e4ef7436-8ec7-47f2-bcf5-5e959c7cb448"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3d2028d3-cbe7-4334-9fdc-4b45d06b967c"
							}
						}
					],
					"id": "78e69163-2af6-4816-adb9-28c2af3a91e4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "1b54355f-b384-4396-a381-4853565ccbac"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "a8b67b5e-7f2e-4d6a-9ed7-353de9791d9f"
							}
						}
					],
					"id": "f7c44b4b-d9fa-4e08-a02b-afcf20511ef5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "c5743770-071a-4ad7-9617-2faffb86ffe3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "178f2a8d-f743-4945-82be-7084b527e8d6"
							}
						}
					],
					"id": "242cde65-e31b-407a-a74a-fffb95349350",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "85ca30da-9b57-4143-8015-b159dd2ea642"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "5ea420d2-f849-491f-886d-154db9438b6e"
							}
						}
					],
					"id": "4310d197-7c14-4dfc-93c5-2d3a97c00b08",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "91212747-48cf-458d-b59a-b9182a529bc8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "562421ec-5a66-4840-bc1a-e32bf794241a"
							}
						}
					],
					"id": "9b502291-d3db-48c3-92fb-18a8f4b2d228",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "245bbee0-44cd-41b7-93b2-f24b57ea1d3d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "5a12719f-0b99-4c43-9057-29759230c86a"
							}
						}
					],
					"id": "33efbc1a-050d-42c8-9042-e9fe302458d6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "f801f6b0-0bca-4959-b2d3-d968a7824116"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "7e9838f1-03bc-4a6d-b9ed-57d5d3e117b6"
							}
						}
					],
					"id": "eb31b231-c9e5-474d-94a3-273be50d199a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "8b351242-f6ac-4225-83ac-d5ab6a867553"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "e592dac5-2ab4-45e2-ac28-53c30b52a1f3"
							}
						}
					],
					"id": "383c3bd7-6b6e-4c47-84c0-4b15b43cb7e5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "a2aaecf5-0ab5-4bfd-a142-ccec917fcccb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2dab366b-192a-40d2-a5ba-9c3a870eee43"
							}
						}
					],
					"id": "7f7a0e55-8530-40f0-8f47-6ef8b6425ff1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "b4f26fbc-1507-47a5-b14e-9c7cfedd8e90"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f08d1cbd-9112-4228-a4cb-a775589cb32f"
							}
						}
					],
					"id": "21ed205e-1e50-4f30-8002-319b743f6f7a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "92323a6f-3642-4979-b8cd-2488fef9bc34"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "e567dba3-b0fd-4eae-97f0-3230fb9272c3"
							}
						}
					],
					"id": "9938b800-250d-4650-bcda-2331510d2ab1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "e48b1c93-78aa-4d2f-9322-563e23e3c1e0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "94b8c2f8-9d55-40d3-bef2-e96518d62c8a"
							}
						}
					],
					"id": "dbbc6173-b6f2-4a0e-b6c5-35e348a2e8c4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "5560d45b-c95b-4398-a5aa-d0df9a2ec49d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a1d17d98-e728-47c1-9b17-af574d71706a"
							}
						}
					],
					"id": "f32d8da6-05fe-46a5-8645-e18951e7fa78",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "4aed3b2f-7870-4bc4-b1a5-dff000a89071"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "96b8d07b-a6a9-4a07-befc-7160719b3ebb"
							}
						}
					],
					"id": "9ffeba87-72be-4f97-af53-29aaabd9ca7d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "ca9b32a4-e139-4fd0-8b68-01e80ee6615e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0c2e5aab-7f90-454a-aeab-c549b6319146"
							}
						}
					],
					"id": "cd9cc732-9d11-492e-9c93-f924254a44dc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "b6310151-b79f-4570-81a6-4bac75309503"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2c10e791-4a57-4953-98eb-eee8913e5633"
							}
						}
					],
					"id": "b27d451a-13ac-4140-983d-8a157226abfe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "b940d764-7696-4e7f-af2e-dd3254828785"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "b3f37f84-3aac-4c8b-93a4-ec471542da74"
							}
						}
					],
					"id": "54f6f9fd-234e-40bb-a817-548522bf4551",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "6b1907fc-e5a2-46a4-beb6-cad9bd9670a3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "fc19b7e3-d66d-482d-960d-a24fea3afe4b"
							}
						}
					],
					"id": "aad58007-4d18-40ba-bd86-0a116614d331",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "de0726bb-51ab-456f-b32e-c61c89df9e1b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "9d873f7d-70e1-48ab-81b0-e18f2092e6f6"
							}
						}
					],
					"id": "4239d5a7-d407-4e2f-a7de-47191b36178d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "73c907da-cca2-4162-815e-f5dc85c21afe"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "18c0ceeb-f801-4e53-8362-5f87e9912383"
							}
						}
					],
					"id": "022cd6ec-b5bf-478b-9d10-2cefd89e642e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "84e22889-c940-4a9c-8b34-39201c654f04"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "df6b4447-f486-4618-98f7-aa9e88de5539"
							}
						}
					],
					"id": "e30d329b-34e5-4ca6-acfc-1cef8b1e7933",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "fee45036-41f0-4f28-b3ae-03da89174f02"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ce95f123-a36d-4bde-91b9-6f7f4c3a8727"
							}
						}
					],
					"id": "1e56a076-800a-479d-8d3e-1b173ed46201",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "6c2b5949-d646-4a76-8916-aea9faf90d82"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "3b68ec5f-1651-4240-b4c6-fe879ca9b39d"
							}
						}
					],
					"id": "be5c7165-4790-4aee-86d2-667db2cee1c6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "fc4d940b-b448-492c-b2ad-6f7ddac875bb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8189184b-f819-43b1-8bea-1941dd993bfe"
							}
						}
					],
					"id": "98137c29-957a-4d4a-8ca7-2390462228ff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "1a94413e-5faa-46cf-b209-9ef0b541f1f2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "92bf8e02-6b01-4cdd-a488-24f1134a64fa"
							}
						}
					],
					"id": "0d91a88e-8614-4cc1-9307-f871dfe77cc6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "523288d7-ff63-4f4a-be06-4fc86e910851"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "4f8e9102-bff5-4ada-864e-0b11e191474d"
							}
						}
					],
					"id": "a263fd51-f103-45a6-9807-e59a2a123dc9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "ed2ff509-24b8-4f75-a5f8-6ab0b8215654"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f8f4ee6c-3c7c-46f2-b49e-7fd53dfa54db"
							}
						}
					],
					"id": "b90e089b-38b2-4335-9e3f-3e89437dfc95",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "8cbb1613-d7a0-4ca8-8472-0483806e902e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "79c66972-b655-4ac6-89fe-b584fb857e63"
							}
						}
					],
					"id": "40b213f5-9055-47f0-b01a-b8d2b473a839",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "0acafd71-cf11-411a-8bef-738129e89518"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "f72f83a5-eba5-4e2d-95bd-0fb953501a49"
							}
						}
					],
					"id": "10daae98-8e56-4692-83f2-10ee1e9c417a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "6b8a324c-5e18-4f4f-9ce2-30485a8f5097"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b5c0f594-601d-4e5e-9db0-4371a0ef4804"
							}
						}
					],
					"id": "2d1921e3-c279-4b5e-b063-5f5d88635f8c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "f9afe2a7-51e1-4aaa-9aed-fb8406846e7d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "426b57c0-db94-4ec4-8afd-9eced49d35b1"
							}
						}
					],
					"id": "6683c47a-4c4e-4f5b-ae87-f06012668860",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "563c4368-848e-4339-b159-9569a81a81af"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "591ea32c-acd3-47df-a805-b6712c313e73"
							}
						}
					],
					"id": "af8e9c40-132d-4405-ad02-69086e58bd6f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "95e6cd0a-a283-4a15-b637-39e889f62055"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "73f64fcf-4754-40a2-8542-cc9fa75fe7ad"
							}
						}
					],
					"id": "e777a86d-2542-4393-a3e4-f8a845070d7f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "56f0db43-4571-4b65-9770-0aef44e22d80"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "54eb2bd8-3f75-4d93-bc5c-6b0df9a706a9"
							}
						}
					],
					"id": "203bcd6e-d453-423c-9719-e645ada820d1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "d9f0de72-1dcf-49bc-98ad-7b17dadbbbb1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "75eee1cc-5219-4a7c-b88b-1e004b2f0c4e"
							}
						}
					],
					"id": "4b944f23-4c98-4521-a6f4-3655b444885f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "c06d8391-a368-4200-932a-afb17c89a62b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "18600c7e-8c1f-4ab5-9091-869829952c10"
							}
						}
					],
					"id": "fae49bde-ee08-4cc3-a7a5-cdeff6b56b6e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "cb88f003-93d4-4d38-8d34-abaf135d0359"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "9049dfbc-f0f8-4c76-a671-5a209286dbd3"
							}
						}
					],
					"id": "8c197df2-38ce-4cbf-8e14-d8d0a3887f00",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "54cc3b34-a0c6-4d90-a0eb-cc5b782ed7e9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "e383540f-443d-4769-a5d6-899c79f4ed7d"
							}
						}
					],
					"id": "503bcc29-61be-41d6-96c0-237242e8d3b4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "45210ee9-bb41-40fd-ae0e-2267e14131c6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "afa32017-d7a9-4bf9-bf74-d6ef090ef153"
							}
						}
					],
					"id": "2b2e9510-40d4-49b9-8f26-c98fd704fc92",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "09d5f0ae-9725-4a80-8bee-accdaf4b18f2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3ef87d60-e53d-4aaa-8749-6ea0d0822353"
							}
						}
					],
					"id": "eaa43d0d-218e-4edc-a41f-6495d398eb1b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "12bc3d34-e5da-422a-97b4-ba401c0df643"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "0b16f495-6f30-4a03-bb44-dd8b845d8104"
							}
						}
					],
					"id": "7533c63e-01e9-4ddf-8c8e-90febed6870a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "88d69c72-9a5d-4d0a-b64c-181e70f5acd2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "528e2297-a07d-4971-a227-818123537651"
							}
						}
					],
					"id": "60b1e821-ca0b-4e24-aa81-7a932338f5b5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "ca0779f9-8adc-4bbc-87e4-663440c6a30c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0f7cc79e-fa5c-48c1-90bb-339c2eec013f"
							}
						}
					],
					"id": "3d6885c4-7375-4bd8-ae53-6688d3d75190",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "e5762c98-1169-4917-87d3-9ac4d5829694"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "519d3512-aefe-4107-8336-8a7546c802a2"
							}
						}
					],
					"id": "789a10cf-1405-49b3-86aa-0a9b96db1a9b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "b5285c8d-a1e4-48ad-b4e7-74fee2c81552"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "935b70ce-cdd8-4669-9abc-444a796d297e"
							}
						}
					],
					"id": "5973d6ae-3030-4ebb-865a-beff22c20123",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "9ca9cb70-2c75-4c47-8176-cd92b35f6146"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2afcb793-500a-4de2-a790-f264325b6a60"
							}
						}
					],
					"id": "addbedfc-9717-49be-a124-dde2a802ac27",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "96e8ac5b-2a76-4612-9445-ec90bf8e80f4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "20aedc7c-3da2-4c1a-8575-72f2063d945b"
							}
						}
					],
					"id": "ff9560b6-f16c-4cd2-8238-d403fed2261c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "74cca9e2-0378-4c5a-9136-c195cb9115b2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "5b9ee83b-d818-4d23-8f43-6f685ca1d2ad"
							}
						}
					],
					"id": "117f3d0a-4296-48a6-bc99-484dbf810e39",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "99ec847e-ef0e-4daf-9da4-80e5771357f2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a70019c3-1c87-4de8-b7ed-d18ca0e14993"
							}
						}
					],
					"id": "eddcb104-679b-4b6a-9212-82225e2d4862",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "f3f35901-9ed4-4ba5-a2fa-77f6d9eb454f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "86173f5c-e642-4b2b-afcd-6a51e15082d8"
							}
						}
					],
					"id": "2865741e-2ca4-4e5c-9257-22eb0b518118",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "fbda4b98-0633-4782-9528-f2224933dee6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ae94f6a2-21c7-4f8d-9898-9715f813113e"
							}
						}
					],
					"id": "ae018e12-a60a-49c2-b9a4-74a5516a2d52",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "ed4058ac-30ae-414b-96f7-ed816c51f23b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2030d72e-7b5f-4da2-878c-2988bdcde359"
							}
						}
					],
					"id": "c50ec09a-d523-48f8-b297-cad7323b2d27",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "ce6f2563-330c-4e38-8210-e47a6358d9a8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "4d22dd65-a403-4354-9a29-05da5274f7bf"
							}
						}
					],
					"id": "60a073dc-7aba-4ec4-9390-b206f61ab543",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "377694b1-5113-470c-bf19-14a0a67d45e4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "505c3548-6880-4dfb-af09-007c1a74f234"
							}
						}
					],
					"id": "0c1e4b98-3b09-466f-ae5e-8d6d222e5df8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "caf56f89-60dd-49f9-9169-e4ff9098e98d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ed4c0447-187d-4fa7-a19f-90304b7177e0"
							}
						}
					],
					"id": "42222a5e-d587-481a-9d4e-04e8a1479c1f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "57ff8b16-13bf-4e8d-883e-9f338490384e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "b95e5184-3773-4bad-aba6-5cb7bedef3fb"
							}
						}
					],
					"id": "9945bb62-e2b7-40d7-bcb6-03e4e0af47d8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "25e36549-02d6-4eae-8254-2efcbc9caaf5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "6d576dc9-e952-45b8-b5a5-fd26ef76cc11"
							}
						}
					],
					"id": "8eb34b85-2ee5-403e-be1a-373d6884903c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "58cb79f4-950f-4ab0-a8dc-ed165149ee63"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e888283e-42b7-48b5-8aef-102728b66113"
							}
						}
					],
					"id": "7ec1e733-d21e-420f-ade6-0bea8f16f59c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "acb9ab8a-dcfa-48f2-996b-9eabb58d4e8a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "33027941-4453-410d-9c28-a72f88f16674"
							}
						}
					],
					"id": "c102206c-90c7-4630-9136-b9acb433a77f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "cff1ffe8-bd33-4f18-a36c-924a6bbdb6dd"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "aa619848-5c2c-41e6-a164-fc8235f4c50b"
							}
						}
					],
					"id": "5025a109-c55e-4241-9c13-abf82c918b34",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "47f12ac1-e55b-459f-91a0-42b2c856cc70"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "abc2eb0e-3e24-4604-b3cb-048d4406ed48"
							}
						}
					],
					"id": "a3a08cb8-7c37-4d5b-82d0-6d523a0f914f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "e76ef23d-be2f-43db-9a5d-ce9d7f2035b4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "6640eee9-8436-48c9-8159-c39d68cc97ab"
							}
						}
					],
					"id": "19cea203-cf1c-4831-bd9e-8a9038db31b1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "00754b15-68a6-42ab-88ab-874a6cb4d270"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "7f558015-95a2-4e1b-ad58-360c9fe93cb7"
							}
						}
					],
					"id": "e6a51150-e67e-4049-be50-d9fc9f1d0d60",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "1fd85474-945f-4efa-82e4-ab7286d46eec"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2ff367d6-5317-4e3d-b972-18da6bf5e5ae"
							}
						}
					],
					"id": "5013a5f3-fe30-4ab8-9b5c-ad9a93c35196",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "a9394087-4d7b-4d4c-aae9-f69803583a11"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "2887b05c-e1e5-45c1-8cd7-8904b269355b"
							}
						}
					],
					"id": "607bb893-8cfe-487b-997e-8ec85d14970e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "c011170a-83b2-4464-9f6a-7c46dbf262d2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a251fe13-334c-455b-9511-233cf6e076b7"
							}
						}
					],
					"id": "0fb060f9-7ec9-4ed2-b2c9-42715f60b64c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "5fd841ff-093b-4b22-a10a-adc24d36d27d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "bc24ccf3-0b7c-468b-a142-42190745877e"
							}
						}
					],
					"id": "4010989b-16a7-4aad-8b76-bec47b517e5b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "b6b441e4-8451-4422-bfe4-10fb7c517ec3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "d204579d-9eae-4d19-ba8b-8df6f7103be4"
							}
						}
					],
					"id": "3546f8dd-5f95-437c-bf3e-d4297a6049ca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "312d1594-a514-4176-bf8d-7fc4e2bf755b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d4c48204-376b-49f1-bb23-b68ea3a7e6eb"
							}
						}
					],
					"id": "3f18f1a7-14ab-4866-8f6e-935746eb572d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "ded48ea9-7c5d-4f32-9902-bdd9db5a99a3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f084211e-cd5f-4bf0-aa4b-0473ebbb2da7"
							}
						}
					],
					"id": "3b7f63fe-6f0d-4836-9e70-10c28972504e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "d33c8727-47b7-454c-8e8f-b1f16742bd9e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "434bd481-4261-4e2b-9d45-84902f61df33"
							}
						}
					],
					"id": "20437ef2-dd44-4121-b2a5-c90370d6758d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "edd8a9ea-3c00-4b4d-bd1e-e1598c69fcd9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "21af8814-ce7e-4f16-bce9-3788ecf6b33d"
							}
						}
					],
					"id": "53be2832-b8c1-45d9-a056-0772de8b1433",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "d8549fa2-0ffd-4930-aed6-ebbab70faa50"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "955661c0-5e10-43d0-a6b9-d10919379432"
							}
						}
					],
					"id": "584520f6-6054-4598-9d11-b98c983e41ef",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "fc59cb11-391f-4497-8542-970cff8c6386"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "898d3cf4-ea12-47bf-8e22-1e31b3810634"
							}
						}
					],
					"id": "5eb85724-bbf9-4576-9ccf-5f1d8bead4c4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "911ddb57-38a9-4fb4-b8f0-edb7614ff183"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "309dbfca-5cf3-4efc-a5de-57c362a92460"
							}
						}
					],
					"id": "f7480347-09ee-49d8-87e5-402a559418ae",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "4029f551-fc1a-48e0-8289-b5ab8ca6f0f6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b6bee171-3164-4607-a301-dec4cc42bcdd"
							}
						}
					],
					"id": "2f0f969e-9d5b-4e1c-bd05-f7556dcd3b04",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "23cd6f50-5302-47ef-86d0-a71e0827701f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "f0f4f289-a943-4f14-b18d-c59e9d628e62"
							}
						}
					],
					"id": "192e4cbf-ca47-4d0b-bc73-3512a2f5873d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "8c79de9c-7c13-4936-b9b9-2af8611d47f0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c72dda77-9b00-48d8-b634-3049b627fa2b"
							}
						}
					],
					"id": "537687f9-f9b3-4ac5-ba9a-c1067d5cd031",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "8c5bd246-e2aa-47db-b483-ae1547e0be47"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "74df0910-fb4e-4dea-986c-80e9b9e1122e"
							}
						}
					],
					"id": "16cdcfc6-cf07-4185-ab3f-615db44e2a9e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "6de8e87d-af61-4202-b336-ff22514be56f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "01ba24b9-7768-4a0b-9cae-5baacfc04c8c"
							}
						}
					],
					"id": "a39b22d6-278c-40a9-854f-1245dddf29d7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "f4510356-6060-4a0b-8d23-7d98c142650f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0f6dd7e5-7366-4c1e-9f7a-a931a17f2d1b"
							}
						}
					],
					"id": "9b618c87-ae57-4a6d-840d-61f407fe6716",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "31beb4af-4b25-4e94-a666-28c6d6851c18"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2815efba-d95c-48c5-b7fd-afe3f67a2664"
							}
						}
					],
					"id": "31f516bb-3daa-478e-a6f0-99049960634e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "6a87a1e9-736d-4715-ada7-685cee3f39b4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "d6a0fb31-6a45-4036-9430-a6e1a7018913"
							}
						}
					],
					"id": "a5619448-6ce8-4afa-863e-c3537b37528f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "31f93330-2a22-4911-b824-310fa09599c3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4235399b-e3e6-470f-826a-5db313c4482e"
							}
						}
					],
					"id": "d5b91edc-a706-499e-ac4a-ddddcc3979f5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "c2349513-e27a-429a-a6fb-27cdb2ba30e9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ad6723b5-dfc7-4256-b505-1a0ce30689ea"
							}
						}
					],
					"id": "46623e8d-0d52-4dba-b61f-17405af681b9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "dcd327e7-878d-4c63-8fda-ed1db8f83ed5"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "27509916-032e-4fd8-98f9-1a083f0f2006"
							}
						}
					],
					"id": "c47d5c88-46a7-48c5-b131-801f8ffc325b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "648bd85c-e2c7-41dc-9085-404c196519f8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "33571433-51d5-4645-ae69-7465041a4302"
							}
						}
					],
					"id": "800ec680-f17d-4bac-936c-e471d332bfa1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "f115281a-bd23-4b07-8ea6-c47de2192bd4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3091831f-cb99-47b4-9336-62bc38d422fe"
							}
						}
					],
					"id": "786ee222-91e6-4d5e-8319-7deaf3174d14",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "cf7ae08b-bd3a-404b-a561-9851b6c8297d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0ed0dfc0-b3c8-4181-b741-6704f3abca54"
							}
						}
					],
					"id": "2486db88-0961-4f6c-a568-ead519bd7508",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "076e9950-6c41-490d-b3b0-53c6369a5f4b"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "5f779207-183f-427d-b1ec-17232f15045a"
							}
						}
					],
					"id": "2fa01c4d-f22c-4870-bbfe-bb7afe159a79",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "057ffd98-6eba-46da-87a5-d3626c0d3e11"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "ad857d1c-fad3-4eec-909b-73cf245c1499"
							}
						}
					],
					"id": "f7e3923e-99fd-4af6-91c2-af79aa5c885d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "4a9ff3eb-a92c-42c9-bfff-920df0bd7fea"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "ab518fd1-c00f-4114-a128-3d6e05b3f306"
							}
						}
					],
					"id": "777d10fd-55a4-45cf-ac68-7032e20f9498",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "327b9544-95b7-42d0-bf84-a5809d5bead3",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "a2c09e9b-2b70-4956-9b56-bfab18ffeb4b",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "b2cc1de9-771d-4b0c-9cfc-e522369a45fe",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "3d20e5a0-38f4-49a0-b8ae-189154408bc2"
							}
						}
					],
					"id": "0158a6cb-7071-4949-9974-e2e825f6d55d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "0dee60cd-0386-4b69-bdd7-75466cb4fb32"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "98e9c6fc-ff16-435a-be93-536e195f3659"
							}
						}
					],
					"id": "77412354-2920-4266-a45a-a6ab61e24fd2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "3d1b4e8b-0804-4cd7-8fab-bf6f998eff51"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "006328b3-dccf-4817-bdab-6c43e390fc50"
							}
						}
					],
					"id": "bf0fccc6-08e9-442f-88df-b591f674f3b3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "00c34849-d02e-41cb-bb9b-a6e6b91eb38c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "25a7eb3d-7338-463d-99fb-53169a00b9f2"
							}
						}
					],
					"id": "f728d200-8e01-4d6e-8609-ebe561c165df",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "4f64b24e-3424-448f-9e1a-c61d3e6e8167",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "41770474-6f5e-4931-870b-0da7bc775ce6",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "dc3af1b9-5f9d-4181-82f6-7cd18c213669",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "a4a6edfb-650d-4e44-bc7d-7b6422046e72"
							}
						}
					],
					"id": "a12d13f6-d4b0-40aa-95ff-281c0fe8c66b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "86d4b770-7972-4f17-897e-d890e018d57b"
		},
		{
			"name": "Setup Copy",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "7e00d2ac-f652-4bb4-9f7f-40217a930933"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "82809658-e2ff-4ed1-b059-ddeb90406e3f"
							}
						}
					],
					"id": "3e3da35e-e29e-4d6d-b8b1-aeadbc771711",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "9ebde4dd-d51e-40f4-b927-c3502d551a48"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "9789b05c-e663-4d24-8cb3-7cdc6894d60c"
							}
						}
					],
					"id": "a3b872cd-8825-44cd-8816-b6a0475e120a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "10ad30cf-d3d4-48be-ad3a-74e9265904b9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4a08771a-ebda-40d3-af15-53ed4cd95472"
							}
						}
					],
					"id": "4cbef7c3-d87b-4da0-8dc7-83536fccd608",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "f46f59b8-ed45-4d8e-82c3-de23d1edace8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "9af5e46f-b037-446b-80aa-c2c0e4f8f3b0"
							}
						}
					],
					"id": "c1bee57d-8cf3-4b4f-adb2-a147b3db49ce",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f821c89f-a803-4c59-9e90-a30f8267cb5c"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "b0cfbf9e-49f5-4fdd-94a8-61da3febca6c"
							}
						}
					],
					"id": "a2d96a16-204a-4de4-b4d3-095799192526",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "8cabee45-4c76-4cd6-9403-a7e0a2bebea8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "8df6944d-35ac-4617-b7a1-1e81fa9b86cf"
							}
						}
					],
					"id": "60c18707-b489-4a24-b351-45db30e8b9b0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "3889e036-5816-42ba-88c3-6ea7676ec527"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0d208885-3228-4383-bbe2-5297f56adcd0"
							}
						}
					],
					"id": "b6795c0f-185b-4447-8655-34f7cfdf8f45",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "c9e6c6e2-8e94-4350-aac6-5019049bf395"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b0488117-bd61-4008-a467-eb888a0e155d"
							}
						}
					],
					"id": "e0f541a4-59f0-42d3-b941-ee4768fbb488",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "12b00b4c-cf91-43ce-80d7-416cc8824959"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "66cd6cd2-27a5-452e-9cff-326779aa4acc"
							}
						}
					],
					"id": "fd82b24b-0de1-413e-b10d-9cc587942653",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "0cb1e098-5abd-4566-93b6-0892ef7d5f45"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "31dce58f-c056-4ae7-8551-c8eea8768b64"
							}
						}
					],
					"id": "0995a478-f1dc-47f6-9e06-8931f43acea2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "0ba1d880-35db-408c-b65e-0f024833dc20"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "9bb748b4-eaf7-4bbb-9aa6-81f90e410721"
							}
						}
					],
					"id": "8b0bea86-125b-4d9d-b05d-a2258e83cca0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "021b664a-5f5c-4bac-ac26-6280d7554902",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "a696f4cf-ae10-4fb7-a95d-8892e41bc067",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "d7c948d6-2cf2-4231-b3f6-cc622c5c7371",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "6fd8dbe3-3b83-4aaf-9abc-510bd1929621"
							}
						}
					],
					"id": "935fc839-a996-4ae7-980c-c33957b2aa41",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "58bf045c-8106-4dbb-8fa2-2b4b0b455e72"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "4966b683-3cfb-4b5e-b07e-3615edbdc22a"
							}
						}
					],
					"id": "23236ee6-0508-4805-8146-81b3cddff986",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "dda04920-7655-4703-9306-0786d59a029d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "0ef2f439-822a-41a5-b060-ca668f902ae5"
							}
						}
					],
					"id": "852c8ab1-b7f7-4944-a0bb-bf217511bc22",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "a306683b-1bec-4c33-8083-1514dce7fc3b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "80783abc-e74f-4385-a7ce-806605afeea7"
							}
						}
					],
					"id": "1037c485-288d-48ff-8ad1-54ddb421ec69",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "faad2337-abb8-4ee5-b0ac-1c4acbbe2bea",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "f2b81a44-4939-4b62-aa8c-b5d8593ca9dd",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "f6efba5d-2dfa-499d-90be-c85caeba0b5b",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "d306fa47-0cb5-4271-ac45-c2f01922eb5d"
							}
						}
					],
					"id": "1e767b70-1df4-4e81-b937-0f24d30edb6a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "47bdee9f-82ca-4c40-b049-144a9b5b4361"
		},
		{
			"name": "Setup Copy 2",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "ce7f6b53-c54f-4dbd-b6b4-be6823627e80"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b6467eb2-579a-4148-9e0f-186cc32dcbd1"
							}
						}
					],
					"id": "5ffeaef6-2299-4c89-af5f-1a0fda2c0a95",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "cd60d6c4-82ea-455a-a3a3-0b56f2a23dd5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "e267c12d-4add-4f11-bc5c-629851294c09"
							}
						}
					],
					"id": "e2fd968e-08f8-4e85-b6cb-4d3d8ca82584",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "afb6b6ed-d7f1-4289-8afb-b8282032301e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d2f4fa01-998b-4d52-b0b4-0fd68eb5f831"
							}
						}
					],
					"id": "ffab0efb-181f-4c54-a122-f80765fc5b35",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "4d0e6678-9402-40ef-b568-ee85b24b5687"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3a051cf7-aa28-42e8-ae76-843a2527c5fc"
							}
						}
					],
					"id": "21ca3891-1daa-408e-8e76-c6ab411705db",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "90640c8b-cd5b-48f9-a9d5-dfac63d936c9"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "56e13156-242f-406d-8cc0-a190d9e089d1"
							}
						}
					],
					"id": "6786c26b-c384-40bf-b420-78400590e6bd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "c333f36a-e11d-4328-93de-e5d054257e7a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "dba972bb-8496-457a-bb32-5dc49d520d36"
							}
						}
					],
					"id": "41b67970-192d-424f-bcb8-b1e9fc3d011b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "4e2e7371-69e2-460f-983d-f744779248f1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f3b37c17-d189-49a9-ba9c-bbbdbbadc93c"
							}
						}
					],
					"id": "d9b77a1a-4dce-4899-9aba-f30c85ea074d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "65a05fe1-c954-45de-970d-46dbb8e795e6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "84fa84cd-c6a5-429a-b4e9-e2a337f93dc0"
							}
						}
					],
					"id": "1715587c-2531-4b3b-b397-5e9aac13368b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2307ffc6-bce3-4df9-9ab6-4516d986ed01"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "e2e0198d-76ae-492a-8db6-0bb42325645a"
							}
						}
					],
					"id": "05c2bbfe-3210-47ea-8768-1b7f3f3e0180",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "9656dbf7-21bb-4572-9c29-14f36b4af04b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "26918e55-4885-49c0-91ba-9204d1826ee1"
							}
						}
					],
					"id": "5cf22c53-9190-4581-b1bd-3eb0a240e5ee",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "e3979ac7-96e4-4371-bf4c-f0301e9dda6c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "00884ad9-daa0-4abb-aec9-962fb42ada00"
							}
						}
					],
					"id": "acce49be-fd1b-4e22-a32e-610d7536b6b9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "2767e7ec-fcfc-4876-aaf6-938c96ed4543",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "55d7b549-fa76-4ec7-bfda-16b3a563d3e8",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "9a5a0140-4c5e-4073-9e9a-d796a0dcb635",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "90c43081-1009-4324-b340-9c24c1a22263"
							}
						}
					],
					"id": "072ca314-4006-4931-a251-45481904dbc5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "a677c48c-89eb-40e4-86cd-5e2ef1c36f90"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "89756f58-f65d-4270-a05f-153db0adbd48"
							}
						}
					],
					"id": "d628e4e4-47d9-4071-8dcf-40fe3487f4db",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "03f4becf-91ce-414d-a22c-32901478e327"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "8ced3128-7ced-4857-8c7b-f6219535b173"
							}
						}
					],
					"id": "f1d73485-35b9-457a-bb24-de77bb9c277c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "031790c0-078e-42ab-9e98-76c8d5094c61"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "51c13a5f-9267-4fd4-b5b1-c51d85f50a9a"
							}
						}
					],
					"id": "f56314e6-94ef-4454-8555-26d98126891e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "5bb4dc8c-ad5d-481c-9fd1-4382e239c4e3",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "9322e677-8b31-4006-be20-837291bad154",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "36ec3c52-a74d-41fc-a634-75a99984328b",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "4b55a692-ee93-452b-bb59-2184bbd59d98"
							}
						}
					],
					"id": "8829f00c-b42e-4199-b3f7-06563467e9ac",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "b72acf9c-f2aa-46e6-b504-16a71e7f76a7"
		},
		{
			"name": "Setup Copy 3",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "5c85320e-8852-411f-bf53-919048f497ee"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "521f4a6f-47f2-4f17-8b04-56985b42004b"
							}
						}
					],
					"id": "164b4aa1-ce68-445e-afe4-3d50e9658860",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "3a0bdba0-723a-40dc-b30a-889c250f172d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "f014fe38-b8ce-47e8-92d0-879cb69c5930"
							}
						}
					],
					"id": "ee975d18-619e-4ee2-9843-2d69ccc770a0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "cecfd722-eff6-47d8-a843-8edd67da7bd2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d8efda71-4f66-4889-8532-ffc9eb13a360"
							}
						}
					],
					"id": "148edd7c-32c4-48a3-a006-021f517cc071",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "3b6d3f3b-62f1-4b3f-b48e-01e1e8c8ac88"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "5dfbda57-98a6-4b0e-87ae-87202762c5b3"
							}
						}
					],
					"id": "831a38d8-017d-41e6-923b-3190557992d7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d163f537-0e82-47e9-bc95-b9da518785f0"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "bb6f8e24-666e-4c29-ab34-882e1c866f30"
							}
						}
					],
					"id": "5510d60a-de21-4716-8ff7-8c01fe4b7186",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "c8e4649e-2e0a-4b0d-a278-cac1e2532f11"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "e3ef27b9-90b8-4e1f-b94b-18f63873d23c"
							}
						}
					],
					"id": "6ff06f39-e627-4ff6-926f-4d30e299871e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "f73b4ef3-b767-4bf7-a2a0-979d6f9fa615"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "736c68cc-a7c0-41f7-b0ee-8701210aa2b3"
							}
						}
					],
					"id": "1413786c-4538-4aa5-97f0-4a6ac68703c2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "db9f8a30-d7b4-47b7-a7ed-1cea52d7ebed"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "6751732f-f4c7-4ee9-b495-172418c1b260"
							}
						}
					],
					"id": "f0bc0268-1528-4e47-a267-13a0aa1c2710",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "638c1667-390c-4a3f-bf01-4761386e5ea2"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "2226069f-4d7b-4597-88b0-ac07aac763a0"
							}
						}
					],
					"id": "34567d27-4dfe-4ad5-ab29-fbcf52fbb937",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "9849d1af-e3f9-4acd-b952-68bc6d6953bd"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "ff6ce672-5781-4085-8274-e6cd68131926"
							}
						}
					],
					"id": "e274597b-6082-4a1b-9cb7-1229722ba736",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "026db1fb-8008-4831-9389-c045f3671407"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "c7cbf0f4-fed0-404f-b58d-ce0a3f24cba0"
							}
						}
					],
					"id": "d8df8a8f-08e3-4f72-b0f7-3d720ca7d608",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "169ab07c-69ce-4a3f-9a33-b491e651065d",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "abffb4ca-37ee-4e8c-8ef7-5d649207424b",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "e2038011-b3cb-4fbc-864a-d199ace0c807",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "be0cdff9-a797-41c0-bf66-2001b8b78048"
							}
						}
					],
					"id": "1d64846b-862f-4319-a434-7cc5f5428c78",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "05830248-74aa-4479-a198-b1ac368d26cb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "58d049f9-afd7-4363-be05-eefa2da6e5cd"
							}
						}
					],
					"id": "cf382c32-dd7c-4bf6-ba19-cd633125ed99",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "047f6ffb-6695-48bb-9fb5-0ea3090cc8e4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "1eda1bd3-d472-439c-9436-43a2fe9eb1e0"
							}
						}
					],
					"id": "356dd0fd-d6ec-4f45-b032-a6bffa0f3d92",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "26ff3ae4-1b52-4080-891b-e411acef3732"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "600326b1-1863-4d28-898a-97128eca8260"
							}
						}
					],
					"id": "3611c952-d256-40ce-9688-1c6a24f98f0f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "98cb78df-5b91-4b70-8b0d-c0ea903b818e",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "c813b7e2-f8d3-4819-ae5c-250e7c8f68be",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "9a463eaa-90d1-46be-82a0-f26a8863cfe2",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "c317ccf2-fdac-4b0d-8d68-d6269b544edc"
							}
						}
					],
					"id": "783491d1-da63-4702-9099-d50897561603",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "f7e2a6f7-62f9-4e05-b756-c203d9809e29"
		},
		{
			"name": "Setup Copy 4",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "3e25e123-7ee4-4985-8953-50efdd791b61"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "871bbc0d-e350-4b7c-bfd0-048438edbf6e"
							}
						}
					],
					"id": "af6d9c30-1119-4226-8e53-2b02836c3c19",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "9c8cbd7f-e00f-4557-97d0-fea8e2c4e28b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "6b59c9f8-77bc-4c0b-a027-4d43bc237871"
							}
						}
					],
					"id": "b7e803e3-c85b-4749-beea-a0a8d8e2ce74",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "7560c478-a913-425d-935b-9f771adcdd43"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d096a00c-ec94-41ce-a0e0-2d7ba429516e"
							}
						}
					],
					"id": "154bfdcf-77d4-4720-90a9-282da94c7ed0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "9ef29f69-f195-4255-b46c-53dfe72fc43b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d1fa00fb-6ac6-488e-bea8-afc3cc39a939"
							}
						}
					],
					"id": "f2f1205a-b7a4-4e88-abc1-d6281d452b8b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a6521838-788b-47c9-8c21-c990747bae92"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "242676a7-c3e3-4574-9a39-9bed29f8751c"
							}
						}
					],
					"id": "ae6a0b69-56b2-4dff-b2d3-77b7c6ff71a2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "f7fd393f-0372-4a10-a81d-e4d9163f6cf9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "1c6691b0-f678-4380-b8e9-cbfebcbb7d4f"
							}
						}
					],
					"id": "8747ed48-270e-4f5c-ac95-4b96a4e0066a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "6947a178-2567-46fb-994b-be9ebb4acb67"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "bce55318-95fe-4b91-984e-409f18e03cf1"
							}
						}
					],
					"id": "7898266c-4e96-4a33-b04b-2636dc6fa110",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "48caa7c0-9b72-4d7f-bdc9-49a5819cbbe3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "acfe8a3d-a4c0-424e-aaaa-31eefe6ddc05"
							}
						}
					],
					"id": "2f8d9ab0-23ed-4fbb-836f-e013d1151236",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4dc69159-32ed-4c4c-8e33-d0eabfb9af65"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "e6e80817-6a77-49cd-b22c-51758d05d4df"
							}
						}
					],
					"id": "860dc9cb-20a5-49cb-bfc3-1656a5245fdc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "099e4a64-2d11-4658-98a6-fd69d714d300"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "599546cc-dc85-4816-8006-4c909af0c5ec"
							}
						}
					],
					"id": "0c88eea2-1ee7-4bd6-814b-2acf39cad647",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "ee2d1939-7aeb-4eb5-8947-bfff7e2862f0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "06357265-ea1e-4fd7-b96e-4a2e5756813e"
							}
						}
					],
					"id": "1fc3ca65-819f-4edc-a5b9-5cdcd037e2ba",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "6c2b6d05-9ad2-4285-9dc2-319578b13a95",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "dfd7f95e-a1da-4243-a933-b1eab3c6c5d8",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "7c4a63c8-4901-473e-a09b-e9ded040f133",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "23f771e8-ea8b-4e6d-827d-d08840c296bf"
							}
						}
					],
					"id": "a9d284e2-43e0-45b2-91ac-4896a93e1738",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "d4c51d72-4926-43c0-9746-2ac8d67f9b61"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "b75e5e70-a62c-4bbb-ad2e-b1a709faf909"
							}
						}
					],
					"id": "9df143dc-eaa4-497a-ab72-ae485012459a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "2277411a-f56f-42af-9650-727ae17e5c5e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "cac7ea25-0221-4b7a-9a1e-9492c8add5af"
							}
						}
					],
					"id": "b99ad46f-0863-4a6c-9a6f-a5c43068e112",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "29359286-d88e-46e2-b1c7-9fbac631e4f0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "be08d6c0-6a04-4fd3-b724-531fd7561978"
							}
						}
					],
					"id": "363b02aa-309c-479a-85bf-8a4070528ea2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "fb9ed951-5646-4c62-80d0-a51a4d8cf1a3",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "80170641-6022-46d2-a1f6-d4bd35c48db3",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "c7318931-6e2a-4605-9ceb-1e7936d1d417",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "6ca7179e-de8b-4897-893b-b95dc0ec006a"
							}
						}
					],
					"id": "83788739-931d-4e32-aa7f-88e8f67f0c35",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "90d30b66-da6d-4030-afb0-5cf0e0c2029d"
		},
		{
			"name": "Setup Copy 5",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "bf771765-160f-4b89-a0e2-980bc3828576"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2cc23d8d-3756-4e91-b7c5-caa08b5d06d9"
							}
						}
					],
					"id": "c5c32cef-22ed-4b61-80e9-1e83a1c89316",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "f8162a8c-e42f-422e-9afb-779a6a5a5701"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "2b27434c-5b32-4522-88d0-1f2385b73d06"
							}
						}
					],
					"id": "a5cff08c-821d-4c6a-852b-3a0c6cb4e844",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "6ef1bb62-5387-451d-8596-e76c979c3bdb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "bae3a540-342f-4aa1-9cef-8f4071143ccc"
							}
						}
					],
					"id": "dcc6f930-4293-4f0f-b605-f42c9a3d8b22",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "c913b019-a9ed-4f73-9b39-e173ec2f04de"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2a23c8c6-5f0c-4bf9-bdd8-d69842b12959"
							}
						}
					],
					"id": "45797d72-c119-40fa-90a8-695eae202bfb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "fa8ed691-4aab-42e6-839a-bd90c1c78570"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "ab565275-8a66-4ac4-8915-dc01c3233c0b"
							}
						}
					],
					"id": "afeaefe8-d504-443a-843a-a17c2de2cd95",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "70ce7b12-241d-49bd-b0b2-a65f4ff27b05"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "5452cda4-79b1-4506-b96d-428a758f362b"
							}
						}
					],
					"id": "bb983374-49bb-4d95-b057-1b5fe8dc6400",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "96de9644-e312-4158-86b1-4775d4441768"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "01f116cb-5301-4d22-9962-52673c2074e3"
							}
						}
					],
					"id": "769c4c37-5b6a-4819-91b1-b90fa8fb1eb1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "52336608-f8da-419d-934f-f6aec9ce0b25"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "27f8c49a-2c31-489a-9eaa-6fa0dcaa20ae"
							}
						}
					],
					"id": "2c164fa6-045a-48cb-9e50-2c5b1bd3b186",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ebdc47e1-041a-4d0e-bd4a-9b4770c6d56e"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "2ac60660-5ca6-4f50-a4e1-c876898444c2"
							}
						}
					],
					"id": "0976d6f8-0619-4d9e-ad60-85d186345a9b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "7700d86a-109c-4af1-8836-35781ad814a1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "8f02aa36-a3e8-4ebd-b069-a634c2c6b0cc"
							}
						}
					],
					"id": "573fd5ab-3d25-4bcd-b4c6-7b0ec2cb3ef3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "a3d70dfb-0352-4353-bc83-da09b0fc389e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "b296cf9d-d03f-4cf8-be50-4e254748c0d5"
							}
						}
					],
					"id": "eb23db7a-33ff-4919-b8b0-05eb913c23ec",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "65ce694b-255c-4b7f-b7ea-43d78e025e17",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "6dd7fcc7-4e91-4c57-90bd-ba4ade7c6649",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "7d73fb38-62b1-4897-8ba4-d4b7afb59932",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "77133460-d8d5-49ba-9b47-5c5ca85336c3"
							}
						}
					],
					"id": "0de07f9a-1d14-4115-a2a2-1cff9b246bc0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "0e4e7d7c-daa6-4db3-b5f0-a4f3b9d6a665"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "14db3ffb-9081-408f-8bf7-e350bcded71f"
							}
						}
					],
					"id": "6dd05447-22c6-4d2f-a15d-94d7167025e5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "5d6d0b63-73bd-41bb-9559-d2e8216ecf43"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "51fd0d17-ef60-4782-acc9-ae558193479c"
							}
						}
					],
					"id": "d4cad0ab-1866-4c59-8e9b-14ec2725b4dd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "365d8721-6ee4-45bf-9264-8fa1d7f43baa"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "d711bf50-eda1-4d35-90d1-23cff07bacd5"
							}
						}
					],
					"id": "dedaa655-c780-48ec-b216-e67f00e1ab8b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "34f91f40-4be6-43ec-8701-32ba1e80ab2d",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "b5cb5d37-f64f-4232-ada8-0e39b24ac7e3",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "ca43934e-793a-4d7b-b299-3a66dd3ad279",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "9ba59fcd-5280-429f-8fab-e696e4eed23a"
							}
						}
					],
					"id": "e811aab6-2db7-480f-a74b-2e34572355bf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "4fc7be57-55cd-40f2-9601-a831167252f5"
		},
		{
			"name": "Setup Copy 6",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "864f0edd-b39c-436c-bce2-d65bc47c22cc"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "23a95c82-0656-4e63-a0a9-32e4366d0ab3"
							}
						}
					],
					"id": "b49ad433-b824-4355-b3ff-eb1f01b5539b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "999c1ae8-7511-4955-bb17-eba5fa754f37"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "8024e33e-8772-4641-82bc-e5f5cd210a3a"
							}
						}
					],
					"id": "1079cc47-a9af-4a4a-be63-0fa5672e0bf6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "989035fa-d1f0-4522-a9c3-6476c8392e36"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "5a716eec-4b38-4fee-9a0c-e5268cd1fc9f"
							}
						}
					],
					"id": "efe25460-7e6d-46ae-b7fb-068c51336292",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "b97c668f-64ec-4f19-82d1-41b494f686bf"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "7b38985e-3cd7-42a4-8838-4a304bcbc44e"
							}
						}
					],
					"id": "34cc939a-8ae7-4bcd-82f8-8c8503dcf5e1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4e3f6330-73eb-4e11-b355-3cd1b44dc970"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "8aba3ac8-f58c-4116-92fc-c00ea8ef856f"
							}
						}
					],
					"id": "250b8604-269a-4e08-b814-ee7274522625",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "a49b46cf-7eb0-44a7-a8a0-ef9aef7bd97d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "86fe8245-e9da-41e1-9d78-c3c6285f36a3"
							}
						}
					],
					"id": "bd24e509-ebd0-4ecd-9eb2-8c9eb3c6f053",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "1613f65f-4cd5-405f-a183-c50785573c5e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "81bcea95-e944-4be9-adf0-ad0b02578f98"
							}
						}
					],
					"id": "dac34c41-9e44-495f-9a83-81c19bfb8eb0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "fc0afbf5-3be4-458c-b0b2-d988d294c45b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "5c115ff2-1b77-4206-ac1b-c2b2f06b1083"
							}
						}
					],
					"id": "3a8c2048-3cfc-479e-8961-3df8063d4127",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2a132357-38d8-4bae-ade8-b0c34e149402"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "d2046d57-482d-4665-97f7-04bf443f6fa6"
							}
						}
					],
					"id": "1dbf1824-7198-47a6-82d4-690f03b16039",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "2381c3a9-73ca-4954-a916-ccc8803338fc"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "3d242f14-f684-4562-ae3d-75d7511eebf1"
							}
						}
					],
					"id": "11b88c7e-6818-428d-a666-5b0dddbb9819",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "316e7e83-b946-41a3-8094-67f297cbcd66"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "6eb86b84-e0b6-4655-9299-bf656ffae829"
							}
						}
					],
					"id": "d27c7a17-b9f6-4f7c-a9a7-5a6e6fdc9e6b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "07ea27e3-42c2-49e6-b4de-fc2e46b6e032",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "736e3dba-2261-46b8-b9aa-3ae7e9e3fe50",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "1717e5f8-11a4-47bc-a8d6-8d15d176f34d",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "9a7bb30f-f502-4b23-b811-7985fb1d3dfa"
							}
						}
					],
					"id": "044637bf-e88c-48b0-9992-35216f9169b2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "19f58862-b879-4816-a3cf-926cbfe3081e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "1985ed8e-47b7-4a36-a581-ccbd741c04f4"
							}
						}
					],
					"id": "1d62acba-41d4-4b2a-a7f2-58c174a6e14a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "6960c1c2-629b-457a-a279-c5e411af0bfa"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "ca77e5c8-19c3-474c-8871-96aecfc8343e"
							}
						}
					],
					"id": "a796aecd-006c-408a-a631-b166224f8595",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "4b8b815c-6acf-4deb-9dd2-8ba6c9caecc7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "062fa3eb-b606-4720-8396-31ca076c4130"
							}
						}
					],
					"id": "82506aa4-db88-427c-b866-8b44d1deb07e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "e6da8fb5-01cb-400c-988d-cde99221ba24",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "3c85fc88-4fa6-4117-b4eb-4baeff0bc5b4",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "12e72a01-665e-473f-915b-bacf772db896",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "0b823c6a-abfd-4b87-bc07-9ee3793e2e0a"
							}
						}
					],
					"id": "fe2264dc-1804-4cfc-8fb6-f473a2a4607b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "1b76cb2c-ee53-4437-8e93-e0d8166c01c9"
		},
		{
			"name": "Setup Copy 7",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "14d3343c-2fa0-43ea-9f0f-5ceeb7b9704c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "7f0777c4-c3d4-47ad-acbf-eb850083e58b"
							}
						}
					],
					"id": "c9b02deb-20d1-427e-9aff-cc833bf76976",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "a7460bc4-b9b2-43e2-9781-3854f0ee190d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "54637c57-18b8-4098-8dca-4e682d1fcfbf"
							}
						}
					],
					"id": "c40c89fd-8af2-4136-8e11-4656ef72fef9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "41636acf-d07e-4ee3-9dcc-61d6a8f01021"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "9ba23296-fcba-49f3-bd59-98e2241010df"
							}
						}
					],
					"id": "8c031cf8-46cc-4c99-a13a-fa0968ed70ed",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "5518fb29-3134-4947-b9c4-8ac5938defd9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "5d8d90fb-e908-49c0-b88c-55920aa43e8c"
							}
						}
					],
					"id": "8470c763-9ba2-4bf1-bdfe-c43ec11113d1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "86354f2e-7880-4b88-9658-ccc706e84a83"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "233b3deb-902b-4057-9678-7b00db8e19c7"
							}
						}
					],
					"id": "fc47f7e1-d6bc-4a4d-90a8-e4043c144aaf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "314201c3-f04f-4e63-96f7-fd4cadcc1e7a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "48ab4f94-81f6-4001-9182-639ee5deadc0"
							}
						}
					],
					"id": "e2e86784-a281-42e5-bf85-cd133dbf316b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "669b9532-b23b-4f74-b371-0dfc3b0370e2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1c6ecba5-ca78-4e03-82f4-220f670147a5"
							}
						}
					],
					"id": "104c8fb4-418e-4603-95d2-110772bb64b9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "bd368dca-5f90-478e-8b64-65874150205c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2bdc2ba7-2a49-4007-ac69-dba34cb5de8a"
							}
						}
					],
					"id": "3d3c7461-c4ce-41b4-9c1f-9d2a4b3014ec",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f8431828-cec8-4c17-a9f0-0d855cd82817"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "fd4b668c-0e00-4ebe-83dd-726e94f6a86c"
							}
						}
					],
					"id": "6e7987d6-0680-4a79-998d-42b310c12b42",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "d2601a34-6a84-4dba-b791-629236affcd1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "e2612dac-c50d-44a7-b0af-59302e0c355a"
							}
						}
					],
					"id": "e4cd3bc4-1107-4273-8510-11253bb3384d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "76d7627a-7b15-4046-80db-0911b872683a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "0f8de477-5dab-4342-b789-d16c238d328e"
							}
						}
					],
					"id": "5d1adfda-2e0a-4c97-a2f0-8d7299b1a32a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "b417fe37-f0f4-4f2c-8221-0f412a27b42f",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "a3ecd322-12ef-4122-bb72-b39ddef6167f",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "5284aa28-e68e-4748-bce5-9e544622234d",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "d58cc2b2-c470-4ceb-9586-b689c5df07c7"
							}
						}
					],
					"id": "6c484fb1-b050-4bd0-8beb-31230de22af9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "4da1d5bf-137f-459b-8e0a-692321946b10"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "0951450d-c00d-46eb-8a4b-a0cee9687501"
							}
						}
					],
					"id": "cdcb9371-c195-479a-9ee3-b0ee856d60db",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "a87b524c-3b38-420c-b67e-a7bd5b3b8121"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "1f2c2b0e-56d6-470c-94b3-5118aa129bf6"
							}
						}
					],
					"id": "612bcb34-03e9-431b-bb94-652d187514a8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "867c41ae-ed46-47ad-820a-c3326b61d3d5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "a07922ee-492f-4f59-898f-7d16b110cdcf"
							}
						}
					],
					"id": "318766e4-2528-412c-8441-aea80260c85f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "6e90a5d3-da31-4751-8b71-40cb68d2886d",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "af8188df-ff1a-4f21-8003-d197003fd843",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "73c17ee1-31ea-4d47-9ec2-332da2d829c2",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "2a759476-851f-4bdd-b135-f4d6e18cf9e7"
							}
						}
					],
					"id": "8df394b6-1bea-4a77-87c8-ed572dc5a699",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "4f2d76cd-ccbe-49e0-a1d0-b9ff9a526a5d"
		},
		{
			"name": "Setup Copy 8",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "076b0d87-fb69-4df0-885c-bf897a51ab0a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ebd0dac2-3c49-4da2-a116-8472bd163aef"
							}
						}
					],
					"id": "f865accb-fe22-43ce-a98b-92917db11c2f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "da575829-6f3f-4e48-adbb-1a8484144e2a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "79c7a13e-ff46-427b-beb7-c239b6f7bbe7"
							}
						}
					],
					"id": "d2d46ce3-3fbc-42df-85d0-a96d8656db8f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "2c08021a-fd5a-4eed-8102-c608b1f426e0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "21841ae7-3d7a-49b0-b303-31e9b48812e6"
							}
						}
					],
					"id": "31907442-b4f1-4d57-805d-ce6e99e1d765",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "f9406f96-9bb3-424e-bb0d-6ad60548dfec"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "84fd86ad-f6e5-4b72-95f0-9f16db7a39ba"
							}
						}
					],
					"id": "38e5e6c4-6296-423b-9863-fc9aa77a929e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "075b7dbb-860b-4d12-98b7-15a2a6342090"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "077dcee3-8175-4770-9708-8a178fc36b8d"
							}
						}
					],
					"id": "942324d9-552e-40ad-8ed0-b5d0ff27e89e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "c5c09b5c-67f1-4bed-ad3e-510948f5dace"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "9f8e5d75-3323-471d-bc1b-c5dd105f87ac"
							}
						}
					],
					"id": "8a699ff6-ce31-4d1d-b039-8326dbc2d6c6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "2645848b-14ea-4756-8fd1-725cab634f62"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3c904740-b497-4449-80c9-2c6e689a7680"
							}
						}
					],
					"id": "1eaf226f-03e5-4b4f-ad27-82e1a0bf25b5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "0b9a62b6-02ed-44e4-847e-4e1d59072bb2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8cd3eaba-f0da-4704-b067-7119818e3e06"
							}
						}
					],
					"id": "5cfd4702-be3e-435e-b1f5-087dd1a9a921",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "45d0a066-e2c1-4675-ac31-900f3fb758c4"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "812d1dce-abf3-43cb-8a38-3cd0d209690c"
							}
						}
					],
					"id": "4f6cbf81-a501-4696-8d8f-2aabfd7c3a35",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "916d3b91-8bdc-4ee0-a3ac-d78eebc17c63"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "fcf76957-8f5e-40be-8012-7ed7a53815c9"
							}
						}
					],
					"id": "b220d37f-fb09-4509-bb24-6a7cf431e5e2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "10d43ed3-a4e5-4ae9-bd87-30a62011d238"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "3adb6db0-50f2-4a23-a179-5ff9515d59d0"
							}
						}
					],
					"id": "f405b250-3b9c-4b37-b0fb-a41c62d3aeff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "1f9d2bda-0bcc-444d-9dcf-49d955d4bdb2",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "0d38b8e3-c33b-44fd-b834-ca9267fa1f4a",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "051d29be-6e09-4a6d-815d-634398c1bc0f",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "0995f824-646c-4263-9f46-698e841a4be7"
							}
						}
					],
					"id": "69b34012-015d-494f-a0c2-9d59bdb24f5b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "be2ffeb2-03eb-4c33-868b-61411405dbe7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "9f9b6484-6ed5-4625-af2a-decd7af64c99"
							}
						}
					],
					"id": "82ee1be9-560a-4696-9f1c-a06b07c2d945",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "7af2f833-e380-478c-8b66-fd1c5087397c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "e78d4e44-c683-4eca-a554-a16be89e79fd"
							}
						}
					],
					"id": "b4178764-882f-464e-8b7f-0590214b381f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "9b7031da-5f29-4bd6-a3da-831a0fe7cf86"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "05f44d04-59e6-4e55-a468-ba554ba98dd1"
							}
						}
					],
					"id": "3fbd1ca4-0925-4b90-920b-cefcd0ce6389",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "acadef2b-bbfa-4996-9d96-18de10a06d13",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "866df2da-5754-49ce-a005-2ac663950e6a",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "91f44d17-f163-40e7-a2a3-534b403f00bd",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "dc8e0dce-0146-4f10-a5da-9c1320e4c532"
							}
						}
					],
					"id": "1d008bea-4bf3-4ac1-89df-8c6dd307599f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "a6d89241-68cb-4e64-af4f-4a71ff76d547"
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b6982a9e-877b-4c2e-891b-c2e9e6c8bfdc"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "fd5344da-7d4f-4b49-a022-c3c7be26dffc"
											}
										}
									],
									"id": "00864d63-b03d-4110-a230-396f7cd8b5e7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "c52e737c-e144-48e4-92e7-251716eb7ecb"
											}
										}
									],
									"id": "32b3f397-a55b-4e75-b200-c8ec3377d361",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "f029de6b-9598-42fd-b339-eb131dd97a1f"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "e0bb4aec-4023-46c0-8ef8-875a46ff3402"
											}
										}
									],
									"id": "21a9f8c5-a855-4b6a-9296-1abd1c743cd7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "f119c04e-1e96-4fc4-9a28-caaa8c9ebc4b"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "04431ddb-f3d7-47b8-a27b-adb1252cd680"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "4d8247a0-d89b-44fa-aae3-b3e478a2e119"
											}
										}
									],
									"id": "27f28a5d-e9a0-47f5-a919-a93872e4cfc7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "7e5bd9db-4d08-4b70-b15b-d170da66eaa4"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "40e5af86-ed83-40e4-962c-7eecff97a4dc"
											}
										}
									],
									"id": "1826b468-e79d-436d-b9c7-989cb4dcd12f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "c0c07d69-cbb2-4c6b-bd3c-3f7c07846655"
											}
										}
									],
									"id": "bfc57fb0-cfa2-42a4-a914-ae92a2dd5c28",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "cf4c6585-3591-41c3-a02c-08effba8f1dc"
											}
										}
									],
									"id": "ec5b61b5-805a-4a00-b334-82ffa11ef55d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "77cb6d89-feb7-4d88-8d7b-30f55a9b0988"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "587e7077-55a2-4419-8270-a43ec25ed2f6"
											}
										}
									],
									"id": "064f8d32-1f5e-40e3-912d-cf9e06dc9da5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "48844c9c-546b-4333-920c-6080b62d327f"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "5e945410-a0bb-4274-893e-7fdb719534c9"
											}
										}
									],
									"id": "999a546e-0858-434c-be71-13d83787172b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "bc52ef3c-e723-480f-8be3-b18c916c3244"
						}
					],
					"id": "ac9723e0-e1fe-43d6-8449-dbcf99c5b0ed",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "fb884dfc-3ccc-4859-9fe9-8095dc1d252a"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "01cad625-513e-409f-8228-c9abb6282782"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "45a2aabe-2f97-4f46-be64-0d1954ced19c"
											}
										}
									],
									"id": "104bd44c-9c78-432b-9c48-3889fb9709a0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "81c6f95c-77d9-4c17-b8e9-1665178feec6"
											}
										}
									],
									"id": "bcb4f1f5-c761-4c42-91d5-a5e7fb3b91d2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "bf1633e1-5c66-4ae3-83b6-b369ead31780"
											}
										}
									],
									"id": "48a0f2d4-6f86-447c-b07e-c51b628b43bc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "7bbd7ab7-90c3-4fff-b2c8-55f6bbae9505"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "9c964881-6d1f-4e8a-9035-ed60225c64d4"
											}
										}
									],
									"id": "ed05fc84-3f73-4c3b-8f93-2e6a61ef2c6d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "293d1c16-138e-4ce9-a16b-f129396241d0"
											}
										}
									],
									"id": "860e458c-8fb3-4d3a-aa28-09af7f63c36b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "1cff35ef-bf3e-423c-91ad-832888666f74"
											}
										}
									],
									"id": "7535715b-5dfd-4e67-85c8-b21c586f7792",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "5e70b5ee-c12e-44dc-b069-3fe027ab9318"
						}
					],
					"id": "2720c6d5-c0fe-44ea-a186-745d5189ecd5"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "f55bf38a-5e16-4e15-8a7c-d071240770c7"
													}
												}
											],
											"id": "04f6006c-1d1f-4762-a185-4531d6a564a8",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "989d5b28-5a55-4bb8-b162-79cd2ae01d82"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "18dbd98b-b607-4d34-8a2d-90630e13e0eb"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "e8fb5459-f524-4d52-9d8b-8b60c98dfc44"
													}
												}
											],
											"id": "e4f6cfa5-a536-4b3f-bbb7-597d4c8d8504",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "d4b28253-74d1-4e8d-80e8-fb0319bdea6f"
													}
												}
											],
											"id": "22bae4ea-1465-4858-9892-168a05daaa03",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "9c2f3f03-d670-4418-9928-6290a0cfb005"
													}
												}
											],
											"id": "e464e009-c90d-4c0d-9434-3e0ae01aa659",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "f6bbb514-6980-4ea4-a29b-98ee99da32f9"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "1486e05a-3eaf-4f63-8582-0da8c0b19388"
													}
												}
											],
											"id": "50541e41-609b-40df-af7e-0d1ebc0a4135",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "254f3c35-0a87-4d0c-8fa7-117d07b299a9"
													}
												}
											],
											"id": "2534c86c-edf9-44a7-abc4-508e7b85c36d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "d9f402c4-2e84-471c-97e8-56ec938d147a"
													}
												}
											],
											"id": "74a43801-4292-4d06-8af5-550d2d646203",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "4b38cea9-7a24-4235-8591-c254f6057060"
													}
												}
											],
											"id": "05439a4a-28fd-4f12-a08e-1793cc01d92c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "3ac9e341-3499-4fb0-ad81-d4d50babbaf2"
													}
												}
											],
											"id": "626b1455-ba4f-4394-9c54-711bf6915aed",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "d11f7576-ecb9-4222-bd23-d7212c9b71fd"
													}
												}
											],
											"id": "86bd4f12-7019-4418-ba11-27e3bbcc4c02",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "344e1297-e6e3-41bd-ae9b-faba0ec42c6f"
								}
							],
							"id": "d37d45c2-aac6-4b22-9cbb-0782fd58caa1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "a84b780a-8b4d-4017-ad90-3ab7a5c902ef"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "903c56f4-ba03-46df-a9e0-e6833c8fd183"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "69f85dea-5639-4f20-b7a5-0f18984f3122"
													}
												}
											],
											"id": "c359d738-070c-437b-8f05-98bd74f44523",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "eef2a38c-e66e-4edf-9b40-0788b26ec05f",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "b9b283f6-0602-4f21-9a00-a1a8cc206c7a"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "b3ba43b1-fbc6-4191-9fb0-c376d5720912"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "878e5d3b-612f-4611-ba29-60da24043a46"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "063e33a4-3ebd-4b7a-b04c-11ca1412036e"
													}
												}
											],
											"id": "4f56da3a-0031-463c-a1c6-4826ae06815e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "8830839b-f425-49da-a52f-0dde89dfa9cf"
													}
												}
											],
											"id": "9e6c1e69-5baf-4edb-8807-9c9853dd9e8c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "40688805-7426-4dd3-9e54-9b8838d2e122"
													}
												}
											],
											"id": "233037da-7296-4547-9303-a78cc50bc891",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "46e78122-8747-47ec-9cdc-135a27b5109a"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "4e7083e3-0cdd-4896-b087-a84471b4cebb"
													}
												}
											],
											"id": "a549458a-84aa-4a35-bfcf-62ee4bcf7808",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "bed380d3-d43f-4ec2-99f2-d9e20cd627e6"
													}
												}
											],
											"id": "79e0bbf1-206c-482b-b2b1-a516015648cd",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "ebbdf34f-dbcd-419e-a788-368ce7c2e9e3"
													}
												}
											],
											"id": "e4c0ca4c-c81c-4e40-b89c-268d7399b4ea",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "017340f9-5227-49e7-b34d-9bebec06cf0c"
													}
												}
											],
											"id": "d3e5e74e-4fa4-45f3-a814-f1fcbc24140c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "5d850063-b2a1-48c7-81d9-67ab830a02a1"
													}
												}
											],
											"id": "e3c83de3-597a-40f2-b84e-485750b7f8a9",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "087670e2-49b3-4f4c-a92a-bbe56a9f06a9"
													}
												}
											],
											"id": "0acb8852-d891-453e-8bd7-279335ec0292",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "7b24b75e-f068-45e4-9f79-26a7f9f7213b"
								}
							],
							"id": "b03883e3-6d96-4946-849f-7355141003ad",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "79de1c09-26ed-491c-a3f6-fdf620820e2f"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "6d40b8bd-9e80-43f4-8f0b-83a3e3b6e494"
									}
								}
							]
						}
					],
					"id": "9a7b87bb-6d90-4bfa-b7db-9a67fcfddcb4",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "f340ed99-c8fc-45ab-ad75-8603bd13b573"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "2c563c49-9d12-4b84-8f63-72a6ce2c103c"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "23d574b1-2386-4b69-aef2-b58defa35952",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "aca100c8-196f-4d75-ab9a-7c1341a4fc7c"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "e43fc3e0-df1a-4491-96e6-4b484a52725e"
											}
										}
									],
									"id": "4e4a7ab9-2cd7-44d4-934d-aa1516577199",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "eefba469-b587-4151-8b74-eaef5d309551"
											}
										}
									],
									"id": "5cc0b164-771a-4146-947b-bee353ba5913",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "39cc5ea7-9576-462f-9fc5-603e9962e405"
											}
										}
									],
									"id": "699ce6ab-2446-4eb9-868f-62e5f50c4894",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "d6f11b27-1aae-44a5-a334-038cf3052175"
											}
										}
									],
									"id": "1326ea11-c40b-416a-9c4f-7f8205749462",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "7fd52bc8-3d15-4369-b50f-e293cae7a59a"
											}
										}
									],
									"id": "8afff9d8-4c59-42c5-bf86-54387a5ad06c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "bf2fa462-c46c-4e32-baa3-81ce2110cd86"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "38fec489-2ab1-4a15-913a-b34403104508"
											}
										}
									],
									"id": "72696d9f-087b-427c-948d-eeb2be2ae0fb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "d85008c0-1dc1-4137-8345-f2e416a41d1f"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "1861fd0f-467d-4b3d-bc55-91dd34b97559"
											}
										}
									],
									"id": "8ddb8050-53da-491a-82ab-035804951b50",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b61a4caf-82b7-448c-8cf2-9b1949cc90a1"
											}
										}
									],
									"id": "270f3914-4c83-4d20-813b-c2d8f9f6195e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "14ab0726-634f-4659-858a-54e258a7ef63"
											}
										}
									],
									"id": "e2437ba5-578b-4d68-bbba-ef9c8f64f758",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "162a311d-fdc0-4e15-9dbc-27b7e1960791"
											}
										}
									],
									"id": "05686a17-3de0-448b-97b9-b2254c86f4d2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "c61e318f-64f7-409c-98d4-1344d59ecb26"
											}
										}
									],
									"id": "9d16d1a4-4a51-4169-b321-86a356492803",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "48550a48-bac4-4e22-abd2-a4e9d1cc22f8"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "ef03d4d9-cb0e-46dc-9a49-5db2b096c172"
											}
										}
									],
									"id": "8bb7c177-26ec-4782-9f80-d7c84ea34f3d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "5e367601-62f6-4a1b-963a-37c3602d0c89"
											}
										}
									],
									"id": "75c47f10-ce89-40e0-8bce-27a191841020",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "6d97d09f-9072-4d03-a5fa-5584630fbcd8"
											}
										}
									],
									"id": "a3306b8f-8d82-43a5-92a6-6c915cdd785e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "09cd3131-e770-46e9-9078-7fa97d34f475"
											}
										}
									],
									"id": "4de0cbd9-ce3c-4b83-ad6f-52c581a672ed",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "e9aca2ad-7a6f-4914-9dcc-c8bfe1368dbe"
											}
										}
									],
									"id": "da1c2625-0025-4a4a-8f14-1fcbb6046422",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "898ed390-092a-437e-a76c-f3901dab25f3"
											}
										}
									],
									"id": "76dc697f-3440-4126-913a-b6db7e98ee63",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "afd23d9f-cb56-4b46-a7f7-b326f215b099"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "56fa9aa4-82df-4047-8e9d-4c3f80e6e2fa"
											}
										}
									],
									"id": "8df53321-3a8e-4c05-b76e-ddef4966cca4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "a624cd58-83ac-490f-92f6-0ad76206e256"
											}
										}
									],
									"id": "9e6e4edc-e91a-41b4-a151-6aa5b1c2cebc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "cbb47544-0cf1-4f64-8bee-3c13452b2774"
											}
										}
									],
									"id": "fd839194-ab51-4d8a-9d4b-bd17590bf1f6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "cadb8fb3-c9d6-4eee-9484-71e457ca046a"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "8b4e71f4-bf3f-46fc-839e-83cf1da36121"
											}
										}
									],
									"id": "992fabe5-480f-49ed-b886-2b4bd0f1fdb7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "3573fa31-18ab-4b4c-8479-1671391e4fd0"
						}
					],
					"id": "9a8a4c5b-980c-461e-8170-e64d6dfd844e",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "60944761-1297-4244-97ba-f664c5c5b130"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "fc39a037-aa69-4457-b553-82187bb42216"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "b2821106-6eb3-493c-a81b-1a69d2d9900e"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "fc8abdea-f28d-48e4-80dc-686e5af7e739"
									}
								}
							],
							"id": "9807671a-240f-4ae0-a34d-3dacdd78b111",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "333f80d7-3814-429c-9ff4-6e61d189a103",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "65f0fe34-1f21-4911-a9f9-2eda7f3b8796",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "86a678ab-5900-4761-8f64-8cd635964715",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "cd064f66-c316-4384-a652-fb5a79b31d2d"
									}
								}
							],
							"id": "437b0f79-e6fa-4e4c-960e-31731352315c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "86ec3124-b883-4948-881c-dfff02568062"
									}
								}
							],
							"id": "dda39607-57cb-44d8-8d7b-c12d9fa9f7cb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "8531597e-cdfe-43c9-94ae-24199b033a0a"
									}
								}
							],
							"id": "781f05bc-00f4-4081-8f34-466739374f6f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "664cfec7-98ec-4d81-9ec8-64d66b8c1c3d",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{temp_team_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "fe691ae6-aff3-4103-8d9c-cdda6fae235c"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "4411192d-c9a7-4aaa-9915-1d40ded9c7b3"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "1c350ce3-e520-459d-85a9-d26fa2238864"
									}
								}
							],
							"id": "8950a6f3-b359-4a52-a888-4cbc294cd91a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "b4f27d84-ad6b-4093-9f25-28c466e48470"
									}
								}
							],
							"id": "a684b5dc-6480-4215-9524-a3859804938d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "e04aee15-c5a5-4208-b425-94180f6fb72b"
									}
								}
							],
							"id": "e6f31c88-76c9-4739-83dc-94019b71c989",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "d2b7482e-f4e7-4707-9c99-b196d46b9aaf",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{activity_feed_personal_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "3b31e6e0-0fec-4ad8-87af-6c7fa8252a29"
									}
								}
							],
							"id": "bda9d729-81e6-44e7-9c0d-43bdd4654ac6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "e671065c-71d7-43d1-bc67-f643a65af8b1"
				}
			],
			"id": "fd26408e-bc65-4677-97f1-a90cc474bc10"
		},
		{
			"name": "Tests Copy",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "2a0fb312-ae68-40bb-82a8-3546a903c2f5"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "705573d2-053c-46b9-87ac-b1678cdb1aeb"
											}
										}
									],
									"id": "27dda337-3bb0-4404-b323-6b8f29261310",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ce2e4256-4ae6-4c2f-b761-8a154a559870"
											}
										}
									],
									"id": "528959a6-d5ee-4fd1-b181-07e416b405b0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "34d6bc69-10d1-44ce-a38d-e7b3c31cf4fe"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "de65e356-26d0-428d-a9d0-3f46621c45dd"
											}
										}
									],
									"id": "50214448-c7d0-4944-8f09-f11030bf7183",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "237a078e-cc09-4aa5-9e6c-97e1e6f77b69"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "8e28941a-5fcd-4021-b627-b300ca595eb8"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "249af11b-3945-4008-9604-5ca355ee0379"
											}
										}
									],
									"id": "d193fb40-a434-49ec-8eb9-f975c817bd01",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ce84e036-1c64-40c1-a6f0-00da7f52fc64"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "c5d7d17a-5c36-4da4-b4b2-aad3d2ca42a1"
											}
										}
									],
									"id": "2e806e3f-93b9-457c-856e-2c210f94c611",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "f3b7045b-b235-4f42-a1e1-f51eaf339717"
											}
										}
									],
									"id": "79c63896-d0f5-491a-a1f5-0f1321c45089",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "fd76db87-10a5-437f-b44b-440060a31ef8"
											}
										}
									],
									"id": "3400ad76-93d3-4104-9cf7-755c0ffa4a22",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "792597fb-d415-403f-b299-0a74b0408947"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "34101974-b88e-46db-846d-4956b8f84fb1"
											}
										}
									],
									"id": "2b30cf65-71da-4617-88d7-396ea8bf1d2a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "72ed4b35-7d25-4d12-b491-a2bfa3e8328d"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "434a19df-9ea3-496d-a452-f49fdbd01dc8"
											}
										}
									],
									"id": "fa067d62-ff47-4269-9e1b-5798b999e510",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "59b96a21-ccc0-4b5b-9605-e4e3a2bf18f3"
						}
					],
					"id": "e9523d0a-4229-4f53-800c-c09b037cb2bc",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "8eb0fd7f-e2c7-43dd-b891-2d2a1fae67a4"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "6ef86214-187b-41c9-a8a1-ceabe3558a03"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "68389893-7417-4346-8b80-2fad4c8422e2"
											}
										}
									],
									"id": "ed824ac8-dc71-4b08-b638-218a79cbf364",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "878dbc81-0566-47d4-9c4a-efe22bf5966d"
											}
										}
									],
									"id": "de80cb37-ddfc-4fcf-8a57-5126361b0241",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "f3071c57-42e8-46dd-b291-e96ddb3c536b"
											}
										}
									],
									"id": "cd430581-85e8-41e7-9b4d-29024c41da79",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "38edfd1e-ae8c-4865-bcec-5031e750bad9"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "50573bd1-bcf7-4fff-b7c9-ac06c8fc6f3b"
											}
										}
									],
									"id": "1a57a5a2-17f7-4f04-9379-447bbd937f7a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "8d203b44-94d1-44d6-9ff9-24302d1a5db3"
											}
										}
									],
									"id": "5ea37215-77c7-410a-9192-d245f27582e9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "268582bb-b57f-48ce-8936-01c3427f6a1c"
											}
										}
									],
									"id": "881d760c-3699-4074-b123-e2f2dc8059f5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "19b16257-c7cb-4fe3-8d7f-cac686c8e703"
						}
					],
					"id": "2eb1039c-3816-47ea-a6f1-9386236c73eb"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "1586b903-c06e-493a-b9e1-5788d5999f93"
													}
												}
											],
											"id": "c6bf21b6-8010-4131-92e1-aaef9b3ad654",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "5784a05d-e7e3-48e7-b5ec-e6bc977d3bfa"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "83147a22-75f8-4718-b8fe-a3b9efe6aff0"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "9db69176-c5c6-4314-8566-a92a599a1ad9"
													}
												}
											],
											"id": "a9190c7d-1259-413f-8fe1-2efebadf4063",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "5ac51014-84c0-4c5d-ad63-f2c64d7f6034"
													}
												}
											],
											"id": "860a85ae-ee35-4584-8800-75be58cfc228",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "fc60bbbe-af8f-4d21-85c8-373a323bb112"
													}
												}
											],
											"id": "0a9713ef-db9a-49c4-be81-d5dc6453ad91",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "11befbef-b529-4307-b1e3-b1915e33e1d8"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "f022f227-e7c6-42bc-8e1b-9c10a303604c"
													}
												}
											],
											"id": "81d97034-d764-4141-8a48-fceb13fff4f5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "f5d9e6ab-de5f-45b6-a54f-ca0a86051ee2"
													}
												}
											],
											"id": "4d104e4d-2443-42d0-921c-a871cf4191a4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "762008a8-c1cf-48cd-944a-03b7372cd73f"
													}
												}
											],
											"id": "2940e7ac-a790-4fdf-a3a5-3d190903c432",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "53496e0d-329d-46c0-b76c-b1b567212939"
													}
												}
											],
											"id": "5cf105f7-803b-4f3c-a26d-913f7c02f3d4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "6bc5759b-4111-46ee-9d5c-357c0e7e8397"
													}
												}
											],
											"id": "f3c3f3e5-deff-4cae-8c7d-19447cca3f4e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "cb8bf156-15be-43dc-80af-1505eb337229"
													}
												}
											],
											"id": "4480a04e-8cf2-4709-9c30-379a4e4c7d9a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "b4aaac7c-5d1e-44e1-8e8e-8ab46fee4ee2"
								}
							],
							"id": "0b62310e-62af-4034-94cb-3faed3f34733",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "79b9717b-35d4-43d7-92fe-95b6bf010852"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "2cd200cd-4825-43e3-806d-35cdc309386f"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "7a8b045e-7c71-416b-a35b-9dadf3aed1a3"
													}
												}
											],
											"id": "a9c8b33a-6559-4bd1-88a6-337bdd85d840",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "1a468311-4622-40ec-ab8e-63508f6cb76b",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "0b9a74c9-cddf-4c67-85fb-14649ecadaf8"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "4ecbe697-d8cc-472e-9472-714d08e306fb"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "6c6a4a58-7d89-4861-8582-dbc387598450"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "15029bdc-3444-40a6-820e-ac751650d7fe"
													}
												}
											],
											"id": "34180933-1f46-4994-a848-297f9cd3b6c3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "c35582b0-0c2d-4389-8273-4f9c3ef479c2"
													}
												}
											],
											"id": "9d0a692f-9f91-43d1-837f-978c23f7dd89",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "590500df-132e-4740-ad61-d79c849be7df"
													}
												}
											],
											"id": "e66b51a6-d981-4b21-a90e-25f813c20038",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "b70c431a-25ee-4c46-bd1c-7a168fd47960"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "c76708a9-ce77-4d95-911e-750535bf68c4"
													}
												}
											],
											"id": "37788f01-c65f-4fbf-900d-e010d41c56a1",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "09e66203-f619-4812-bb5f-d2ad0a7f6c94"
													}
												}
											],
											"id": "3ca96503-b7ec-4657-ba3a-ef07e92f2277",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "1adb2dfb-05aa-472d-bfa5-ad4d4838a6a7"
													}
												}
											],
											"id": "39b9a1b7-461e-4275-81cf-f05e59c96f2e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "eecf1f31-800d-4ecd-b106-d90731331475"
													}
												}
											],
											"id": "6567838b-8dfe-4c1c-a4e0-637fd6f1930c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "09eb706e-e2cc-4084-a0c8-31ff49d4cad8"
													}
												}
											],
											"id": "e42d1cb3-cad6-49c6-9208-0ceaebc5c919",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "fb2cc5c5-a66d-4318-b7f5-9a58c406c104"
													}
												}
											],
											"id": "3548427d-13f5-438f-b7ba-a832564d33f2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "d429046a-bea9-4fd7-b68f-a7ee7b426a53"
								}
							],
							"id": "643cb0b8-1a80-4db4-ac05-2eae65c8dd2a",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "b4515e3d-3b49-4b15-9d51-9934725870e0"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "b024b528-7c15-4b17-b314-632e753e6dcf"
									}
								}
							]
						}
					],
					"id": "c5e7ee24-01fb-4010-b8da-3aff36882b7b",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "695ac32f-2853-42cf-88a2-3c8f5938315a"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "0bea9001-3158-4558-86bb-dd212a6cace4"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "8d80c263-ff54-4045-a8b7-e4b29c369bb3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "360570d5-16f4-40ee-89cb-6afcf7131f1a"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "045c7f32-9311-4cfd-89d2-e2c50283691f"
											}
										}
									],
									"id": "9aa01de6-acc3-46a4-9a30-b48ca77b2d74",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "f14fdb50-ff03-4d90-98e0-828a29f5a264"
											}
										}
									],
									"id": "10840dfe-40fe-4e5e-affa-25eb827ce9ab",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "62386e05-0f05-4f51-afa0-b01e8d185d0d"
											}
										}
									],
									"id": "758289dc-673e-4995-a2ad-aa6227c46897",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "646bf97e-ddaa-41ad-b229-68fea295b974"
											}
										}
									],
									"id": "3fd5bc3b-9392-4142-9bd2-e8a581a261da",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "af01029e-e190-4be4-bcd3-98082bf2562b"
											}
										}
									],
									"id": "0a114617-9eca-4781-9e8b-c5990a1de2fd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "e16aea0b-6ef3-4e99-b37d-8c93a44edf82"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "47c95770-dd03-4a8e-a4c1-79053f23af0d"
											}
										}
									],
									"id": "aa4c8f14-c930-455c-aba0-222aeadff3d3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "9e34e516-57a4-4385-b421-a58e5b9baabb"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "f25a4ad8-5608-47b0-a920-ea9fa1879667"
											}
										}
									],
									"id": "54dc4fd1-8810-4857-bba2-c92de1e588f4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "c9b2f73b-0d7f-42ee-b79d-5dcfb4266508"
											}
										}
									],
									"id": "20e1cc21-01d3-4641-8a8e-494db3a0f552",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "0d6f5efc-df42-4504-b286-c650a4b4cc43"
											}
										}
									],
									"id": "2bd37f88-ae40-40a7-9d6b-48048bc3d34e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "d9b3e132-0c3c-43d3-a0c9-ef11066c0a63"
											}
										}
									],
									"id": "356723fe-3f60-4c04-aa15-d9193837c7ae",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "5b4d2282-61c0-4b90-88fc-33ca8fa24ab6"
											}
										}
									],
									"id": "65a128fc-62de-4676-9175-c36403fbd6f9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "e26000e4-b339-4789-a681-8cc663205318"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "7d97f27e-adf2-4be5-8e69-3b191f55f451"
											}
										}
									],
									"id": "bf57a92f-a46c-4925-8c78-6b1448c2c5f9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "997f0845-0f1f-4aa6-a55f-0fe0d4994995"
											}
										}
									],
									"id": "2f2ea53a-7bd9-4f89-8466-24ba520c9e19",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "f512ea99-eedb-4905-bda3-6cb4c7cce201"
											}
										}
									],
									"id": "5ffb801d-36c7-4806-928f-92ef7e16c0d2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "fc160686-d402-444b-84bd-6284fcdfa3d7"
											}
										}
									],
									"id": "bd392de5-a87f-4f52-9df2-90ca2f2efad1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "e094d454-b927-4fa1-870d-964026231016"
											}
										}
									],
									"id": "850eff81-8262-4eb7-9535-4600f680722a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "52f18c6a-7653-47f9-9be0-6a3e67fc013f"
											}
										}
									],
									"id": "57fd3d2e-0c2a-4cc8-8b18-af3b1f9821b7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "26dc6fab-8979-4cb3-a924-390a79a199b4"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "2fae48d0-9c8e-435d-97ba-fd579d5791cf"
											}
										}
									],
									"id": "51f96cd1-dab2-42ea-8330-5e264f6a94f9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "cd51b131-468f-4baa-8428-27dc7a89da82"
											}
										}
									],
									"id": "3996f250-4ede-48de-8aef-a611e9c9e4bf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "78778fb7-443d-41cf-887b-2e6571af6c33"
											}
										}
									],
									"id": "d4736f02-ab2e-4c86-87d4-f0322a5ae58a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "21ac9320-8be0-428b-9d3b-31fe375b5cef"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "c757fc9f-aaf2-4b40-9dd3-8d7eb30604ef"
											}
										}
									],
									"id": "f4916b10-2b6b-46db-817e-3a6a05eab36a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "7b8449f6-4690-41a0-bb37-3745e698b0e5"
						}
					],
					"id": "a7b5f187-490e-4201-921f-b1d2a162a8bf",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "33631ea4-a1b2-4f9a-af79-35748431881f"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "3c9e18ca-c2c3-4be0-8773-8df99bcbf50e"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "6771b6e8-0a57-467a-9cf9-2ab77e3633f2"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "3e4fd372-5381-4c4c-8749-98b6d05fd854"
									}
								}
							],
							"id": "00d6a8a9-8f62-49d6-b6b1-162028d7bd22",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "6f6f68d1-3d5c-4751-8609-d57b94fd3d97",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "4d2e1833-ed79-4aac-a317-0145cf9165d3",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "cce09f68-a505-4e62-9e3a-f67bdd3d67f0",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "5259445f-c48c-4dc1-9204-0a96d1125363"
									}
								}
							],
							"id": "019cb41d-1a10-4722-ba74-30811270c434",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "7c90485c-e0cd-4f6c-8090-af76b6cc82a1"
									}
								}
							],
							"id": "02d0c68e-ad07-4f29-8444-282f843aa83d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "dc385a3e-aaf8-460b-af89-f6a6f40c8375"
									}
								}
							],
							"id": "352fd87c-8c1c-44f1-a9dc-7827da1707d3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "051bec09-83dd-4790-9d19-ccce4d3c54e5",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{temp_team_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "a7b7859e-629f-4608-90e8-bbebb3acb706"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "d6eff650-9106-4d18-a373-f0f3277731a3"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "d8d8a2b1-b652-4bf8-a055-714d8216702f"
									}
								}
							],
							"id": "0cd74de1-a9d6-4f4b-a36e-58ca9976b5a8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "e0949759-c57f-419e-8e0f-ada0ba192699"
									}
								}
							],
							"id": "13dc2762-7b3b-4100-9ad4-6cd9e7ed3d6f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "6c692b77-19d2-43db-96e3-a9288774f3c3"
									}
								}
							],
							"id": "cd047478-831b-49a4-931d-de4ebfdaeb55",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "9c2c58eb-5734-4492-bca5-c77b330c6f06",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{activity_feed_personal_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "3aaf0f46-1818-4718-b637-a0c0da8111d9"
									}
								}
							],
							"id": "847b7bfd-af42-40d0-a4e3-5e22f1503c7b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "c7bf5fae-79ff-47a8-a56c-36668a0288ba"
				}
			],
			"id": "4bcbd4e4-bd1a-4fe0-99e2-820250251c6d"
		},
		{
			"name": "Tests Copy 2",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "060cda47-2f0b-4108-b37f-2bc1be609e6f"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "ee7b0b71-bcb2-423c-8591-c1b8f65231ca"
											}
										}
									],
									"id": "dbf99bac-fc50-429c-9c9b-b61fc98703bf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "588c8f6e-904c-424e-9e83-677b07d03279"
											}
										}
									],
									"id": "7087fe76-1642-4570-bee8-54f9d99e83f5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "5e993fc4-4bbe-4550-b618-d8cb56742110"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "b47cd38c-4bd3-4cec-bff3-7cdcc7a2989d"
											}
										}
									],
									"id": "7b5bbb8b-b76e-440b-aeb0-05877388ecbb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "1a1cd430-e44b-4ae6-8291-15680a305354"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "9b166fa6-880e-4f6d-bf2d-69e534bea1d9"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "67a2231d-80ef-4eb7-a39b-b5592e2874e1"
											}
										}
									],
									"id": "f65b83ca-97f4-44f1-9aff-5f5ad7f080e3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "1c01cf5f-5da7-4771-9511-c516b5fa4949"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "94d2de1c-b7b0-4bc4-83ab-b58b4507d841"
											}
										}
									],
									"id": "dc3e27db-6b93-40e1-abf4-0738fabc1181",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "5f03fec5-c397-4d2f-8a26-8dc249a84d6b"
											}
										}
									],
									"id": "a28c7b98-281e-4aed-900a-e25e4a59a768",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "2426f8b1-a58c-4277-bdf8-38529bf36cd3"
											}
										}
									],
									"id": "6a8cd3b2-3ac2-465f-9a6b-8862a9d6a9df",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "759da307-cb50-49c3-832a-f4aa04e6595c"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "e5097963-6f56-43b9-bb24-156f7bdfbaf7"
											}
										}
									],
									"id": "c20fd78b-07d8-4e00-a824-66afb9fc05f2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "62155b18-dd2f-4b9b-9654-489ef84b9114"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "c6a3d4ea-81d4-48e3-a9fd-c60c4132e4f6"
											}
										}
									],
									"id": "870e7f97-fb34-446d-b60c-21af73f121d6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "eed7b566-98cb-44d4-9d58-7eda07514be1"
						}
					],
					"id": "d9b76df5-bb0c-48d5-8c9e-a19e8ca6d016",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "3f26e81b-a051-4ad6-928d-bcd8a05e6bb9"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "35817fc5-b46b-4063-995a-fc77f3d680aa"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "638a5a9b-a284-402c-8a6a-2b48c87e53db"
											}
										}
									],
									"id": "31cdd964-3a4c-41bc-bb1e-845b6338fc55",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "d4f85e4e-619c-4169-a6aa-99fb74ad5479"
											}
										}
									],
									"id": "d87dcbdb-e27b-4b4c-86c3-1083999ae462",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "d3a22020-c362-4dd5-9d24-ab845e3c42c3"
											}
										}
									],
									"id": "ee1a917e-5c9d-4dfc-b16d-bc4476ea44e1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "3aa44e35-7cb9-4d3d-b01c-b4031c50a97f"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "1a56599a-129d-4da1-ae1b-cb2db0a88cb0"
											}
										}
									],
									"id": "100edac2-e742-4462-a3d1-9dc9f5a3df54",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "495eb601-6f94-4af6-8c8c-e1511245d398"
											}
										}
									],
									"id": "728841e0-86b0-4940-bb16-d99d6cfd3635",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "73add1f7-c448-4e72-a35c-6f1559d75b96"
											}
										}
									],
									"id": "80842a5c-5d2b-4f53-95d6-4e826fa85e60",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "64480c86-37eb-4728-9d18-82294bb8d4b2"
						}
					],
					"id": "af4b39f4-497d-4a8a-9eda-80aa0a21e882"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "692f8ad0-20c7-4a83-9493-51ffa2194042"
													}
												}
											],
											"id": "24b541cf-11f9-4ba3-9cb6-090bae6870c5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "b6d94c84-0c0c-41e5-8315-2a824fe002ae"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "b6c3c599-00f7-4130-ad94-a81eff009dbc"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "a6abe0b2-1886-447f-bd4b-dfa295cec6ef"
													}
												}
											],
											"id": "0599fcda-0a3b-4ada-87b7-84518183b370",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "6b6f8d15-ee7b-466a-a2aa-18e60b593f16"
													}
												}
											],
											"id": "d9a71840-2af6-4210-8da7-7b7e90f91ad4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "5d9fa470-097c-47c8-8b07-2948679d6baa"
													}
												}
											],
											"id": "32347e42-0d1f-4bc4-8c6f-e3c98c0c10e3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "0f948ab6-16b2-4f59-a36a-48dcdf4aa431"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "86dec5b0-e786-4781-936f-605bb6d8d603"
													}
												}
											],
											"id": "32e7c691-933c-4dd5-a5f8-e75edb736324",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "f8b81f0d-0575-4ee3-bc7c-0acb8f26fecf"
													}
												}
											],
											"id": "48ff8dbc-36d0-4d94-8c65-e2266fc1b718",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "8f71ae70-817a-44a0-a87a-d01bc0977820"
													}
												}
											],
											"id": "294c3bd2-41fe-4017-b6ec-58705162d7c6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "577dc006-def2-4fbf-87a2-ac93148e8c93"
													}
												}
											],
											"id": "4e8efc74-ff72-43e3-a4ac-46f694fab8db",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "838b57fa-8c39-4efc-bb36-6ab99cc16e86"
													}
												}
											],
											"id": "da667ebb-5d4e-4922-be98-5629dfa8ba7a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "f6cc781c-6530-423d-9148-cf11f16644d0"
													}
												}
											],
											"id": "c65e9249-0e3f-4922-a18c-fffe30d11706",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "9739afa4-0715-4db1-b4a7-5dea8671401c"
								}
							],
							"id": "d98ecf54-fbfa-460c-935f-93daf37de3b8",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "a374c3e7-8914-4fcd-8e8c-49fe8a2797f4"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "80dee7f6-22a2-46ca-915d-807804524325"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "e5aac4c7-6c91-4931-b4de-544526c03d61"
													}
												}
											],
											"id": "61d2e9ba-1fcd-46a6-808d-be4ab995f1d3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "adb689fb-30ab-4c84-8489-426dcdcf83ae",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "4e53791e-a50a-4654-9448-9c62e1ba394f"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "775968d5-c803-4715-9f40-10b50095c883"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "f9cf0e17-9649-4a3c-b706-663a61fd45ad"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "3fd4c9a1-7046-4894-8131-6086e167647d"
													}
												}
											],
											"id": "e178f4c9-dfe7-4836-8961-284c90525b46",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "4d47aec9-7ba6-479c-b63e-062e8eef2ad6"
													}
												}
											],
											"id": "6362f350-8cae-4daa-977c-0e20f7f13cfe",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "73a7d778-79da-4e84-82dc-e3317f3e0f27"
													}
												}
											],
											"id": "050f57c3-99a4-4d40-8097-ccee40d44d4e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "3eaaa9e9-d1d4-4204-a1dc-e6d42ff82616"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "1af7f634-866a-4618-affe-e43d20291e13"
													}
												}
											],
											"id": "438f80cb-b191-4fd0-9904-9811649a24c3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "2eeaafe2-4c30-485e-9b70-c9965b239934"
													}
												}
											],
											"id": "68a0c1d8-5047-4e50-ac5a-9c16bf45abdb",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "ef9cdd83-217a-42b2-912d-2059dafa8a49"
													}
												}
											],
											"id": "31150bff-7061-4721-bedc-17ee04192707",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "e9fcfcc7-aa0f-4699-b874-57f335e44394"
													}
												}
											],
											"id": "a20ee3c4-4029-40a0-9d6f-216dcb47ebbf",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "43e345d0-e7a3-410c-9838-3fc621ba5731"
													}
												}
											],
											"id": "279b264d-46e0-42dd-af64-6bec472d8dc6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "83d6b26b-b865-459a-8007-415de3c0443d"
													}
												}
											],
											"id": "0f7b102d-04f9-4c33-b904-17fff9f0fc56",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "cca19abb-8427-441f-bc7a-b9727ba4bd9d"
								}
							],
							"id": "bb978587-80ce-46ea-8f81-dad4c6c4512c",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "2b67e430-aacf-4bd0-97ad-30262c30a496"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "9c07e004-bbb9-4203-b068-2a98d21e5cb9"
									}
								}
							]
						}
					],
					"id": "f5771dcf-cc30-42ce-bf8b-2fa78fef55cd",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "80cc59ed-9c55-49d7-8a9e-d26c6efba2e7"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "113c33eb-17a3-4d58-adac-e23e2dab237c"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "fac8c4c0-b5d1-4c62-998f-e310d1aa7194",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "037db440-e256-4f92-8755-1c278d7d56ce"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "811a9c9d-8a91-41b4-8ce1-6b118dd364a3"
											}
										}
									],
									"id": "ae29fcf8-708a-4689-91f6-c72abbe546ec",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ca5232cd-556d-4ef2-bdf5-a525772f57ae"
											}
										}
									],
									"id": "2e83c0bd-30b1-4688-8547-39dde1e3a77c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "06baef98-4581-4a0d-b1bd-55deb9c2f49e"
											}
										}
									],
									"id": "71c68ec6-4651-4e30-a8d8-7c14b78ce022",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "2040dfb9-a239-4381-96ef-c8e2b954b772"
											}
										}
									],
									"id": "8316ea1e-a8bf-4f32-a7cc-9d84ffbd56dc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "141445de-d96b-4d18-9463-6ddcf0564bb0"
											}
										}
									],
									"id": "1bbdc5b0-d211-4d25-b423-6589f69d63aa",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "605d3ed2-8319-4588-a0cf-c0dd89ea16e8"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "d73d2cb9-734c-458c-adc7-2c4cdc819d31"
											}
										}
									],
									"id": "ce1b1cef-8a20-4581-97c6-d105ac313ada",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "b9e7e7ef-f27c-4b08-b3e3-2126f60dca76"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "e6005f01-c8b2-4d7c-bfe1-387d7f8a91e5"
											}
										}
									],
									"id": "b7d461b5-e3cc-4647-8f6f-8be027f3f597",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "adff43d8-39e4-44e0-81a7-0424811a43ef"
											}
										}
									],
									"id": "d87052c4-2aa6-431f-a015-2dd19b2964ef",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "1a493fe8-094f-4bb4-8bce-76aae48b9b7a"
											}
										}
									],
									"id": "3a0e1ae3-50b9-4058-ae03-7256edf67afb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ba9f8cf7-a71c-40ac-955b-9d55e245993a"
											}
										}
									],
									"id": "514fadb2-d9c3-4caa-a68f-367cacde7926",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "82d9a518-f01b-4732-a782-489edfe82265"
											}
										}
									],
									"id": "351c2f78-b97f-45d8-a6ba-e172df7012d3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "4c68bb81-78ec-4535-a5fc-896f599b1848"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "4d28beb0-20ab-4812-b01b-86250d90fb54"
											}
										}
									],
									"id": "13d28d07-7ef2-461d-afb2-09b671033185",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "44b4a370-1a60-487e-ae21-3fedc5417ac1"
											}
										}
									],
									"id": "99ca1beb-8506-474a-ac7e-dbad85428f11",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "1eb3314f-7ded-4136-b687-19885064e129"
											}
										}
									],
									"id": "e3ea5343-a877-4f2a-a318-79aa9b69f270",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "bf2a114a-5deb-4fb3-b730-5078c11c62df"
											}
										}
									],
									"id": "161332e4-cc79-4eab-9524-41d9e65bca17",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "a35f048f-1016-467e-9f77-960009fc0472"
											}
										}
									],
									"id": "98c67aa6-30e8-4c55-b87a-f5cbcaba8937",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "990ec155-50cc-4191-b1f9-7e02ce6f1560"
											}
										}
									],
									"id": "2fc03018-d6b8-4227-adc3-98df1e4b2f67",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "cc8fad4b-c803-4fca-b7cc-07061b7a2ce1"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "3d113b10-33a0-447d-99ba-311c37ec5ae5"
											}
										}
									],
									"id": "62567c8b-aaa1-43d9-837e-348822280a0a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "62aeddc4-196e-4599-85e4-d9ea63bc812a"
											}
										}
									],
									"id": "5a71072e-dcb4-4c7a-99de-1a1fe16948d5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "4125f400-7e52-4adb-99ff-8b2820a86b1e"
											}
										}
									],
									"id": "0ecccd99-ff19-43b4-914b-09192ab983da",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "151deb46-936b-4b18-a7f4-ccf9869c4365"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "bffcb21c-ae5b-4018-838c-c8ded7370e73"
											}
										}
									],
									"id": "1dc26db2-1b46-4c65-8f1a-8bfdc3fe970f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "d6cd5115-0ae5-4b8e-ad46-d6ed8e00a504"
						}
					],
					"id": "cf301654-3268-4217-905d-a59d79cc80b0",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "9bbf790d-a045-45ac-9b6b-6dbe92a8775f"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "71339020-8604-459d-a3ec-4cc6f66a1d3d"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "a0789b62-eb8e-4dab-90a2-045d113c200d"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "d84b2f03-24a8-463b-b5f8-7d67a7345001"
									}
								}
							],
							"id": "b0176ddd-fb8f-4c88-8931-437d038bfa00",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "e85da7d8-8761-4073-80c2-a8e8da3a16f6",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "180b3fcc-db12-4bfd-b12f-23c65c2620db",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "63ce5f58-ef6d-4767-9ed3-a77ded33749a",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "04f10c8c-36bd-4e5c-9581-53439a937e28"
									}
								}
							],
							"id": "af7fc557-ca40-4a29-9963-0814450b70fd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "3ec7813a-748a-46d8-a11f-ecd463dee624"
									}
								}
							],
							"id": "bf7cc725-629a-47cb-aafe-04c165e9c3dc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "06d7e303-ae26-447d-9c71-2ccab291a9a6"
									}
								}
							],
							"id": "2003e0a9-9943-4023-89ab-801f1b97ea22",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "10d7aea9-20ee-4d02-9cc2-fdb0a16484d8",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{temp_team_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "81b675de-75fc-42f6-9d38-92874544027a"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "63391f80-ebfb-4685-b1cc-b74c734fb49c"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "99364ba4-2c6f-41aa-b9d3-90fc0b50bea3"
									}
								}
							],
							"id": "6de1a4bd-1f2e-41e1-bc16-32e28a8be7a6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "757a4637-5d61-4dbf-a0ec-8ebe0b478385"
									}
								}
							],
							"id": "24730435-4a3f-4016-a3d9-beb1fc9e7b5a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "c82fdf3a-818d-4863-97f5-bb1bda97d74e"
									}
								}
							],
							"id": "290ee615-4c1f-4a77-ba35-de10c070fc07",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "b5ef6e71-df62-4ad2-be99-fd80ec13c994",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{activity_feed_personal_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "25e97d46-640b-45d3-b8ed-4770d6fc4705"
									}
								}
							],
							"id": "843e7200-7a27-4c58-9610-1fb4f9ca5281",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "7ebe5cf0-4533-41e0-8212-3e0920dfd4a7"
				}
			],
			"id": "eeed4d6b-5be0-4765-af6b-985202ef57e9"
		},
		{
			"name": "Tests Copy 3",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ffebd243-f4e4-4517-a1f8-863206d98ffa"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "c5f33e9b-a79a-4e80-b0e4-2ef3283dc569"
											}
										}
									],
									"id": "fca97563-f646-45ac-a232-47fb774b6ccf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "d2451c53-bc40-494c-8de9-1b33cf14eb8e"
											}
										}
									],
									"id": "f31683a7-99cf-4964-8429-5000ab8f3f3b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "6dcba538-b97c-4130-a8b2-7d2c75e28d92"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "c7d5fc1e-5ae5-42ea-9d79-62567b05f83e"
											}
										}
									],
									"id": "954cdd03-c143-4804-98bd-0309dc3f4cfd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "7e2f5ff1-2642-4ae4-84ed-01dc24f28709"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "e98c1448-59c3-4823-acba-f17b2ac7ad4d"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "ec94cca3-f060-4ba4-9d33-52262e6bd3f1"
											}
										}
									],
									"id": "54132535-346c-4a97-bf85-bbc08002ef80",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "41162a5c-02d1-424f-a1d5-9ea84b25c4d5"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "2281bb82-26a4-4c04-ba8a-2430ecb3d803"
											}
										}
									],
									"id": "3acdb7c0-88f0-4162-bc82-c137d478e511",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "342bed32-c1df-4f0e-b396-64e524f95455"
											}
										}
									],
									"id": "59ecae62-2b26-4542-a770-85511828cf23",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "d03a3ae7-ad95-4d86-9ebf-70c9666ad142"
											}
										}
									],
									"id": "800297f9-cd4c-4c7f-9d0d-2e415456a2e7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "89c12432-a7e2-47e6-838a-f08b1a18a312"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "28e5e10f-e74b-4c23-85e6-9816d0efd42c"
											}
										}
									],
									"id": "7fe26f6c-9f77-4804-a2d4-89d165a3b0ef",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "de98c6be-d866-4929-a548-de4364857f97"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "8388e4ad-f363-456f-9d84-0d2c1028bcb4"
											}
										}
									],
									"id": "dfbfd06b-0a37-4fec-b76b-34627e36027b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "3c0647cb-9612-48e1-86b0-f7a903cb6411"
						}
					],
					"id": "f30791ce-4a00-4b64-a8be-a240204f5015",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "f7594131-eb01-45f0-b458-68cf819269bd"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "824ac76c-042d-42fe-868a-b76435156301"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "7aeb7477-40a0-4d6c-b3bb-8659074a00f6"
											}
										}
									],
									"id": "9ef53d24-241a-4088-bc2c-40c3c4b6c410",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "a8ab231e-15e9-49c0-b471-75edfb7e83d7"
											}
										}
									],
									"id": "315ef18e-4c2a-47d0-89dc-2c082ba16325",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "04185154-f11b-4bd7-89d7-f1e86292c3e6"
											}
										}
									],
									"id": "d6053f87-54b3-494c-a3c0-8beb8b5618e2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "21dc5ddb-fa28-4318-a713-5a654333bc9b"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "e14e011c-b6b0-4f0e-82ae-484696b76839"
											}
										}
									],
									"id": "0618b6fd-44cb-4737-b521-d07688a7785e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "35f6a90d-29fe-4b11-ba68-e1b87f020cc1"
											}
										}
									],
									"id": "f6eb0f15-5777-45c3-bc5c-06acaa9eb4b6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "f4fc0d11-e901-45b4-bdeb-47f94fb7c289"
											}
										}
									],
									"id": "be39da93-459c-4992-9157-e072c60406dd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "5738e7e0-8bae-4b40-9c88-286d5004b477"
						}
					],
					"id": "627dd2aa-220a-4eaa-9c16-26e1a030037c"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "552861cd-7965-4824-8e2c-ba75363d158a"
													}
												}
											],
											"id": "351276c0-ccdc-4347-ba4b-0860457162dd",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "e5fd08df-afa1-44b8-928e-c31ec8c9cf9f"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "091e6036-9635-4b46-8f8e-bb74e66119c4"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "21136149-6268-442b-92da-14503827104f"
													}
												}
											],
											"id": "cdedecdb-0c39-4dc7-a218-83d8282d7252",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "e9679113-e1d5-4914-9f53-899b9779c99d"
													}
												}
											],
											"id": "6352bf6f-e032-4645-b9ae-22521427d939",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "f70ed229-830d-4723-af5a-0cde8cfa7b16"
													}
												}
											],
											"id": "8c2a8aaf-4ae6-4dc2-a69e-cff9c933dbb6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "80c0539a-b24c-4f89-88e0-f88ce3236175"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "ffa8c3ae-72db-4888-9a2a-875158ac0135"
													}
												}
											],
											"id": "7f06db20-d714-4b8f-af6e-e7ef8175a514",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "1c8c049b-4d17-4960-970c-6c3049f3ecda"
													}
												}
											],
											"id": "4ac7ea7a-53d4-4172-a1df-bde85779248d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "c466ff5e-a4b3-44df-993d-463545cef889"
													}
												}
											],
											"id": "a32bc679-f281-48af-ba7e-640c8489ee1c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "b236e8a4-0604-428b-90eb-cfcdbeca513e"
													}
												}
											],
											"id": "50313ae6-08c6-49fd-b8e6-b767db43c6d6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "0f244c7b-ff82-4665-a129-2d0b43a567d2"
													}
												}
											],
											"id": "866eb364-230d-4401-8300-479bca47fa4f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "81f638b4-ad80-4990-b462-af70a5c06670"
													}
												}
											],
											"id": "03d26f41-c38b-40f7-8c64-45024314990a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "e877f9da-79a8-42bc-89d7-d162a8930699"
								}
							],
							"id": "42d0207f-3dcc-43f4-836e-ffc28557821d",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "7baaf56f-4400-4255-bec5-01d1dd4b2939"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "62e0c33a-8ecf-472c-b130-c9c6f3a590c2"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "f50ebf83-edda-43c5-9918-d34fc32f31a4"
													}
												}
											],
											"id": "c497d250-72c3-443e-8495-f264d80c56cb",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "067d63df-ce5e-4148-a8b8-3afb947aa0b7",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "7d616a4a-c819-45eb-8c7a-5091cf5a935e"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "9e24e228-9902-44ef-901d-0fd3cb39ca91"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "0cc6adb1-e731-4ca1-9dc0-39e2c8c1dd60"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "87df9bcf-6e14-4026-9fda-55bcf5eada7b"
													}
												}
											],
											"id": "0b89a53f-634b-4d6a-8bb0-1a930df941ec",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "d4a1c9ae-cbdc-470c-beef-134a1877487e"
													}
												}
											],
											"id": "4672c6f9-7434-4985-aadf-0e78c7697b67",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "eac6e443-a15e-4bb0-b8c4-eb23a3350040"
													}
												}
											],
											"id": "61271b3c-c3eb-49d2-85de-8cda8b573ed1",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "ab87b416-d090-45e6-9763-a7dd848d7e33"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "be9c11f2-0fef-42a1-8639-d8d8024e21ef"
													}
												}
											],
											"id": "3e97c15e-a10a-4d1b-a26f-32ecf3ed1831",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "0ad88558-c69f-452c-854d-dadf75dfa9f2"
													}
												}
											],
											"id": "30134923-c90d-483c-9d73-6d8d6957af51",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "3faf349a-b175-4831-8d35-c3939ec098ed"
													}
												}
											],
											"id": "db9745bd-6661-47cc-b26a-575629d750c4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "4801422f-614a-4e3f-987f-0865a74f0e79"
													}
												}
											],
											"id": "a0980612-7ac4-4640-abd7-b3c0d279309d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "d312168d-d9f6-4697-9af4-e6787b1d84f4"
													}
												}
											],
											"id": "16f14689-1f43-4dfd-8cd1-f0c350c513ee",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "b5358947-6887-4ee9-8748-d95512c33344"
													}
												}
											],
											"id": "8b6d2874-e9b6-40da-b133-4e50938a3860",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "46cb020b-a6da-4f1c-9852-7d494cc60c1b"
								}
							],
							"id": "d9907f98-a922-4a08-98c7-939823d683b2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "bcf65b71-95fa-43cf-be88-92d372ba9596"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "6e9f2858-1e3c-404d-a91e-3d9ca5704731"
									}
								}
							]
						}
					],
					"id": "d4983541-0718-47c0-bd00-872a7ef5a66c",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "dfef8215-639b-43e0-b90c-b98f39dbcc7c"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "28660475-c413-4f8d-b56e-fa36b07d4127"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "4c4a6783-4503-4795-a4da-2df3b568c647",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "cc47ab6c-b2bf-4515-ac72-5480d203f09f"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "d4001a9c-e0f9-4c01-b098-4f6871d58e4e"
											}
										}
									],
									"id": "b0af4953-238b-4afb-9c7a-b26042328850",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "5d817c78-156c-4ae2-9237-b5ed158fc9f7"
											}
										}
									],
									"id": "6ee6bba2-e2e6-41e1-b47b-93967a7c4cbc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "8bc3db41-38d9-4e42-b325-c618974ddc94"
											}
										}
									],
									"id": "57f8532d-6c3d-4017-947b-a1abdc433c47",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b24f0ad9-21cc-41b1-9620-93c241cf93d0"
											}
										}
									],
									"id": "1168fd9a-0920-41ed-a810-c0aec1df04c5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "e6f54ad0-9776-4d90-a390-d8d70245cec5"
											}
										}
									],
									"id": "de47ea71-f6e4-447b-ab10-51d1e152005e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "d1990e77-6682-4294-bb11-887c5bec5bcc"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "85cdf39d-a3e6-4cb0-b204-5cf8bc1797d4"
											}
										}
									],
									"id": "724f8655-c677-4f0f-a056-33482f97c1b9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "df5cf09f-7fae-49ad-8079-ab8de86b9057"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "5646be5a-90ac-46aa-a35d-4b5352983bbc"
											}
										}
									],
									"id": "93741918-ed9b-4537-802f-d83f14adc7d8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "e78e904f-853c-4b32-9cee-8eb80ec3964b"
											}
										}
									],
									"id": "c5feb68f-5b3e-42f5-8d5f-98a650e56704",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "7eec5b03-c9c7-4eec-8733-59098f5ae223"
											}
										}
									],
									"id": "18d6bdc5-7f6a-489c-b0e0-7369922329bb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "1c4d2b62-c5ce-422e-ba02-5742664ffbfa"
											}
										}
									],
									"id": "e3841dae-204d-41c3-a65a-59ccc3dec548",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "098a63c9-5af3-42a3-b48e-a34b98fb21fd"
											}
										}
									],
									"id": "877a9840-4ac2-4e9c-b0f8-6b7603906259",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "a4d84fc8-9ae2-47c3-8b2b-e4b1cdbb64ff"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "9fa03fb0-8925-4922-ad8c-a13bc4d775ec"
											}
										}
									],
									"id": "1f12a084-42b8-42c3-8b04-f4cdb5abf0d5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "0cd2214f-9ecb-4ace-9cae-c178ef4fe7d9"
											}
										}
									],
									"id": "57e17847-4b6c-49a8-abd8-5f8026005670",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ca46ad1c-8e26-427e-9c5d-0d70f8a7f0ef"
											}
										}
									],
									"id": "e91a6d7f-2c30-419a-97c2-37b8af15d02a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "773b79a8-4a36-4bdf-9c7f-a81e1a0f2b36"
											}
										}
									],
									"id": "09ec7bc1-b777-4e9e-9414-2e92b77eecf0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "88e25d74-19e4-4967-9b30-e7e635f74219"
											}
										}
									],
									"id": "2be5e596-f49f-4005-9128-be19408eb09e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "0e62b221-70e2-4fc3-8aa9-f997dae4666a"
											}
										}
									],
									"id": "8c8de646-0f88-4382-8171-697cdaa0428a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "0ef26e16-7cb0-4ec8-95b0-64b446a15494"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "912221a8-ae53-4e0c-9c17-d93a5a58ecdc"
											}
										}
									],
									"id": "bb427722-96f6-4835-95eb-8580e56de4c7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "9aa90c16-9159-4442-985d-c31ffd295ae1"
											}
										}
									],
									"id": "a63a69f1-8b66-452b-9161-96025c5bef00",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "4e54000a-b7c1-408f-aacb-3044ae3b4504"
											}
										}
									],
									"id": "56409e4d-9338-4d21-89e2-ecbe02422ee8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "43ace2de-2e23-46ea-ac70-286713f47b9a"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "3230cbe7-c4bb-4c3b-ab79-4d24264ff6d4"
											}
										}
									],
									"id": "6b4eaca1-3092-4b53-befd-74d49ca606f5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "e486f03f-6508-4128-8809-001aa7d73326"
						}
					],
					"id": "a27d9d7a-a494-4d3e-93f0-06bafa1553f3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "96087c42-7bc4-4066-9ad7-33c1a1838a0a"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "41557480-b7fe-469e-a09f-e10138e1ad8d"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "8c77db24-676e-44b9-9064-cb6a7a572145"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "746a4b78-a039-4be7-bf02-456f346c92fc"
									}
								}
							],
							"id": "e377a480-15a9-43b6-ba6e-82f7729b5226",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "6c32a1b5-8800-41c0-ba41-7671772c144a",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "c968538b-5e43-4465-854f-e736f3c5d86a",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "9d7a988f-db3c-4a7e-a8bd-135aad70866e",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "66ab695b-cc9e-44e8-98d8-00e09d2914f1"
									}
								}
							],
							"id": "d3966bc1-b734-480c-b1a1-2842ba69f8e1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "8483fa76-0c43-48df-905b-4b46087359aa"
									}
								}
							],
							"id": "a7d9c602-a35a-4184-961d-3cb7edf56d13",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "8c9cc479-642f-43d4-90db-390da591d5f2"
									}
								}
							],
							"id": "dfb51f86-9bec-4ea2-bd63-2723c0150a95",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "b9d04b37-541d-4525-a353-5caa59eb8768",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{temp_team_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "63eca07c-6a3a-4069-836b-e6b17bf20677"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "f5bc98fd-cf72-46a1-9d59-53f241c469de"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "a4f3fab5-e185-40b4-a48e-8004eaa753d0"
									}
								}
							],
							"id": "4b8fcf5f-65db-40f2-a0be-e3ca9cafac05",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "5522478b-91dd-44c4-801f-440d74900daf"
									}
								}
							],
							"id": "f2b13aff-b1ba-42fc-bef5-7a083b5d9f73",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "1f0cf7d9-e589-4830-a022-28ff280ce9b9"
									}
								}
							],
							"id": "a7c66afa-97f5-49e8-a326-9db264714b33",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "91b7070a-4187-4068-9cc4-2f72850cc153",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{activity_feed_personal_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "750d36aa-00b0-44af-ac4f-52cf88f5e113"
									}
								}
							],
							"id": "f47a67b2-3620-4c4b-8af3-3113d6335c87",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "3a84210a-4735-46a9-ad4a-8ab2f9028f5d"
				}
			],
			"id": "c164a492-ff60-445e-ace7-cc28b8de32f9"
		},
		{
			"name": "Tests Copy 4",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "aaceefcc-d549-48ad-bd19-5b536df4f957"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "84c16cca-fe9a-46ce-9a0c-77eabc073370"
											}
										}
									],
									"id": "32c51ff7-c630-418d-bb4e-100d0f20373c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "c2bda14a-d16f-4d32-a7af-b348052f6894"
											}
										}
									],
									"id": "576c8edf-42b8-4ea8-8ff9-c664ef6b2f4d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "2c654704-9038-40b0-baf3-c05916dca63e"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "08c9e9b3-effc-41d4-adcb-0a21fe55e3cd"
											}
										}
									],
									"id": "ef766694-ec10-4547-baed-b64727498504",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "a44b0d2f-7581-4fd9-a825-84a31b392890"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "7b74e57b-21a8-4342-88a9-15d697724e4b"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "f3ea8cdc-9525-40e0-91fe-ed4262579b65"
											}
										}
									],
									"id": "dcc68f5d-257e-4a7d-b83f-f21543a1db60",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "8d030deb-d913-487a-8981-09383df015a7"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "7ebb4274-8653-4aa0-b299-32f93ffd0516"
											}
										}
									],
									"id": "82c8431b-6641-4080-b871-ea10f52bc43c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "723a7bf9-79e7-4efb-9ce9-cff05ccaf073"
											}
										}
									],
									"id": "d75c7cd0-ca4d-49aa-9d52-10333067df87",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "86f10f07-e7eb-4997-bcfc-b90aaf09a9fd"
											}
										}
									],
									"id": "9d78be5b-7999-41d9-b18f-99e7799d45bd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "28822bc1-95fd-41e2-ada4-f0216b5a9aa6"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "925d9b82-bd76-4885-9f4c-8a89da2dac20"
											}
										}
									],
									"id": "6fc734c4-e256-4602-b65b-462391f63517",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "bfb5a346-7772-4fe9-bd8c-56f539772504"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "0a0e0298-90c0-445d-a0fa-654e61f03df6"
											}
										}
									],
									"id": "a80139ba-605e-4b57-927c-867abf99a8cc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "abe19cd7-ae82-4b90-aa77-6449dc8f0af9"
						}
					],
					"id": "2305153d-9cbc-49f4-ba3c-d549619e3334",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "6c670a55-c6b4-4793-bec0-bc1c3063266f"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "480549d6-37b4-4ca1-abec-f6745abfa1e4"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "2a2c16ca-8475-49de-956b-dc211238e2f9"
											}
										}
									],
									"id": "6051b0d2-80ea-429a-b465-90b92bbcbe8f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "9c0182cb-e740-4c06-8cec-9da7be9fcbe2"
											}
										}
									],
									"id": "854fccb3-1bb0-4d7c-983b-2140cbfcda27",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "5ba0c124-3258-4032-8dbd-949c349d8204"
											}
										}
									],
									"id": "5fecf1ba-fc50-453b-bc2a-dc73dcfd87ef",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "30291d04-8a62-4290-9c70-1a7684900ea1"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "0dd219ea-fbec-44b3-80f8-9bc50e3da531"
											}
										}
									],
									"id": "2a40fdf9-018a-4326-bb11-bc6eccd5b4a0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "b86594cb-a05e-477d-a33c-f25fb5771c3a"
											}
										}
									],
									"id": "9ed4628a-2fcf-40c5-b281-45ebb8df424d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "707f28fe-f4b4-45bc-806b-68f0e95aea68"
											}
										}
									],
									"id": "b56ef39e-6a36-4b7a-af0c-8ee258749b1b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "7f8c3c55-8888-48fe-b16b-9062571bc2e3"
						}
					],
					"id": "64ade8b2-232a-42f1-8a8e-8434f92ecc06"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "e5381085-921f-4019-a583-42af3f407f3a"
													}
												}
											],
											"id": "79d32261-cd6d-4254-9ea4-d42c9aec31b5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "5e28b311-0dae-42dc-8e1d-9b9ca2d33de7"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "1f640bdf-b4b6-4f0d-a0ea-02a10dea3a33"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "ac317164-8e75-4efd-9835-e469885b325b"
													}
												}
											],
											"id": "4fad7e40-35a8-41c9-934f-cf26b28510c9",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "20d3cdf1-3b5e-4a21-b97d-43269c780737"
													}
												}
											],
											"id": "ffed07fc-ef42-457c-a07b-bbb9e33d1f1a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "42d80ef3-fa2d-4f52-8895-ac389421d91c"
													}
												}
											],
											"id": "7889164b-1b8f-4dcf-95d7-50eb4ff12af8",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "f3966ec0-9bb4-4c42-8bd4-5a90f5f2dc8c"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "1478fd77-922c-48ee-add6-e2c9c94326b6"
													}
												}
											],
											"id": "d76377fa-bde3-4d18-882b-00fb1165eb93",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "d2bd5229-5b72-4380-aba2-7f21e4dd02ee"
													}
												}
											],
											"id": "7dcc658e-a7db-44c0-bc69-049e2ac00ed7",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "bb8acdd8-de96-4607-b59a-f435a24e3597"
													}
												}
											],
											"id": "e773dc3f-ffc6-475f-8511-2e268e498e87",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "2fb6f475-db14-4459-88b9-ca4a974ae238"
													}
												}
											],
											"id": "f334d61a-c26a-41cc-80ae-1b718e79aee3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "caa2a418-3308-4c05-a69a-8a5e8d0eb841"
													}
												}
											],
											"id": "f5afc568-1530-4142-894b-6ac87f4ee3d0",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "3626d323-e74d-4df2-a6e6-9ce23c177186"
													}
												}
											],
											"id": "4de5f189-8712-4f14-95d4-ee216927d423",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "c92ba724-a965-40f7-ac8f-fbf9fef3c850"
								}
							],
							"id": "449d09b8-6bce-4135-aef7-1b177d43437a",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "3603b1cd-318e-4c37-9925-c1a0a39e05e2"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "08b2132c-7716-4c44-80fd-76d7c4485c4c"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "7aa3a933-3ade-4555-be70-5b3f811b924b"
													}
												}
											],
											"id": "d6b93166-3d03-443f-aa01-f4e816652c3b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "633eb109-6ed8-45f3-b3b5-bb4f108311ca",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "45aeeebb-0091-475c-ae71-f6e740707db9"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "b60998c8-d80a-4813-a050-53faead118e8"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "4cc9699a-3a81-480b-abd5-6fc4d1ad33f5"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "4a2c09ec-903f-4732-a80f-384392940297"
													}
												}
											],
											"id": "42a4fcbd-4a8d-49ed-b7d1-06892f438340",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "2b67fad2-c9d4-4688-ba7c-78455f270074"
													}
												}
											],
											"id": "1991594a-de32-46fd-bb7e-d966f0ae3591",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "f6a796db-10fa-47b6-ad0f-91069f362c17"
													}
												}
											],
											"id": "d5a65d2c-930e-4aa6-bc54-dec89f34b13c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "4f07336e-8b7d-4d09-8818-f8ee92316f73"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "afbfef2f-6ad6-44a9-a440-a092a3084778"
													}
												}
											],
											"id": "e7737bdd-bc4c-4697-a49d-e4c8c6390d9b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "d446d8fd-9da0-479e-a2a9-a3f705fc8dc5"
													}
												}
											],
											"id": "178fa7f9-fb05-44f2-859a-10f9f371ddf4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "4943d2dc-9345-4b09-aa70-28b6958f355d"
													}
												}
											],
											"id": "4aac4876-01b7-4a45-9b1e-90a81885dddc",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "96527358-1237-4990-932d-718e509a9528"
													}
												}
											],
											"id": "08f9ff4f-f6d6-4ec0-b849-dcb0981115ae",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "d0764186-6ead-49a7-8a7f-a65441819767"
													}
												}
											],
											"id": "e16895c2-c9b9-4e50-8ec0-f1134c98e3a6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "eb54468e-ca12-45bb-b1c3-08b5d9368ee5"
													}
												}
											],
											"id": "3f4e9478-f23a-4cf0-bbef-9c6f32a856f4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "b2650205-174b-4503-afec-d413d4f87f0c"
								}
							],
							"id": "aa1ca04a-a328-4c4d-a77d-98ab7a7dfb1b",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "9fc25bc0-405b-42e5-ada4-f8320cfd91a8"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "430a9c4e-3f66-4c32-8d1c-b05e09568da3"
									}
								}
							]
						}
					],
					"id": "c3fbe736-7405-473b-923d-3342fbaa1813",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "fe9cf307-866a-49db-a0ec-c55a2524d16a"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "8c0a41a5-0a35-41e8-976c-ae82a7e8cf9b"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "0b4060ed-f439-44d2-ab26-7c6c28c60e85",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "2d9c3f7d-3521-41d9-b5b8-397b2065673e"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b79e2de8-e219-40af-865a-ae294234d520"
											}
										}
									],
									"id": "de30e718-9ade-44f7-a5cb-b025e243bfa6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b1f35ecd-7eb2-4147-96a5-8dbf8565dd76"
											}
										}
									],
									"id": "e7af5ee6-d121-497b-a175-c11e2a506016",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "f8a4fe7f-d06f-4952-94e6-ee84c7fa3f21"
											}
										}
									],
									"id": "aa143c93-ff4d-4a54-b3fe-fc8d83300be0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "43f629c4-b15b-4a88-b9cc-6065aeb6d6bd"
											}
										}
									],
									"id": "d3e72a40-2412-4ab5-af7d-a7adb093cb1e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "db96c43c-a533-43a5-8da3-b035df124d27"
											}
										}
									],
									"id": "4c33953a-846a-4872-9c3e-8a976a4d9733",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "40bf50a5-acc1-4cef-a6af-08002c98a265"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "1f9b6282-37ad-4870-a973-f4b0c018069a"
											}
										}
									],
									"id": "2b8306c8-1915-48af-bc4d-bd346a94f844",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "3c6353d0-344f-4474-a1e7-dfe8425830cb"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "3d9c49af-9732-452a-ab09-cbcab4daf22e"
											}
										}
									],
									"id": "ab4c1dea-bc3f-453e-abd1-d2e67f1cbcec",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "40f892fd-f5f7-4cfd-bbfa-f1ff45dc28f9"
											}
										}
									],
									"id": "ec4d8779-2238-4c5b-978a-e5f29643fa4c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "d03ac004-52c5-4337-a0af-f8b4e1162144"
											}
										}
									],
									"id": "3b548663-e4c1-4e70-96ff-93307feace04",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ccfce3b9-7212-4de9-a382-126417ebe515"
											}
										}
									],
									"id": "673062b1-216c-4a98-a728-97d527f41362",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "53dc24bf-6743-46b9-834b-cca8d6fcc79c"
											}
										}
									],
									"id": "7a420b99-55ff-4c7b-b74d-9ecfd2ca84cb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "5d9c70f0-87d6-47ad-a81a-e4e590380706"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "86739bf0-9105-4c26-a785-824cec139523"
											}
										}
									],
									"id": "9a0c78db-439b-47fa-951f-62826bbc60f2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "53e73968-ea50-4e95-9249-3774603c3be2"
											}
										}
									],
									"id": "bb238f7b-939f-49a7-a074-0f4c9704cc56",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "aeaa1fed-904b-463c-b162-7dc889e67661"
											}
										}
									],
									"id": "0f77ad78-bd88-4f63-a305-140751d18908",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "82749cc4-2406-4e9f-a52c-6a7a590f541f"
											}
										}
									],
									"id": "2e16069b-73f8-49c9-b91b-170e04e5f173",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "0d23bf02-45fb-465f-a297-645bbfdd738a"
											}
										}
									],
									"id": "bdb76b40-570a-4a26-9571-d1600693cfc6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "2ab48aab-8f6c-4e17-889a-f93c6c9ebda3"
											}
										}
									],
									"id": "7ece97c5-7994-4657-859a-97eef8e772b6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "f8f2119b-a6a0-4052-a505-440c6c3a6421"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "275e919d-4e68-4413-8ab7-0f9ddad014fb"
											}
										}
									],
									"id": "74666054-7e8b-49ea-a306-6a54e6af0a3d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "08a2719c-0948-4c81-b931-f4e1b79352f3"
											}
										}
									],
									"id": "1dfcf15c-b9f7-4943-9892-2ca29ac96307",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "9976a75d-e459-4b87-b933-ca9c87c988ea"
											}
										}
									],
									"id": "a3fcafb4-7df2-4f5f-9205-efa9a5c906ee",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "3d862a51-68d3-43dc-a481-670144006335"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "b99e4917-c440-4b03-973a-8177c3bc05e7"
											}
										}
									],
									"id": "adae674a-b04a-48db-871e-c7b6a50819b4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "1ae81f36-faf1-46a2-a54b-c24a45678b6a"
						}
					],
					"id": "d55a9710-6e1e-4f26-8c01-c84d226c186c",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "9bf58f19-5965-4d16-9bc3-f4b46176153b"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "3f67a3a0-00f7-4eef-b26d-9525ad937e56"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "6fdeb77c-315e-4e45-a53a-7cc75660d0eb"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "cafaa31b-93ae-4db5-a632-cceb571396f2"
									}
								}
							],
							"id": "90332c93-4992-454d-8f74-dcef87fef4a1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "a5e127e1-f40a-4daf-8b30-fd9bdf5091f2",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "86eaf6b5-072d-49ab-a895-97c5422bc970",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "eb6d8794-9e3c-4d9e-b4c1-9ad4dcd1ee5a",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "66b74cc6-0614-447c-baa0-6fc34f0224fc"
									}
								}
							],
							"id": "989885d4-7d83-40e8-aa7a-9a6489c5631e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "b3d0fdbf-1836-465b-848f-5a4f96479fb6"
									}
								}
							],
							"id": "be8c64e2-854e-4481-8644-6be032cb436c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "4a5f3ed7-64a0-4345-ae5e-cd2e522c72be"
									}
								}
							],
							"id": "c4c0faca-11a4-45e5-8707-73ddef3d9361",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "6c4a6c02-9436-4f96-8586-40b4e24dadce",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{temp_team_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "ed072432-00c5-4eaf-940d-7a4a5f25a42f"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "5d9751db-2efc-4859-a0b9-1b8bf7f22123"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "3f848082-e2ec-4590-915a-871d91096d08"
									}
								}
							],
							"id": "438ce161-767f-429c-97a5-84ff6283145e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "b9084ab5-05b5-41b1-bca0-65c94779e417"
									}
								}
							],
							"id": "d09c0e29-22c1-459b-89d2-9820837498ad",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "42d39f9d-2783-446b-8cfb-c7bd63f5d8a4"
									}
								}
							],
							"id": "c2ede06b-430e-438a-a24c-3b8173c0638b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "52593308-de22-4f15-91d7-6e18aff3123a",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{activity_feed_personal_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "dbd7f88a-d4d6-40ab-abea-55a84a086678"
									}
								}
							],
							"id": "e17d5050-957f-4a3a-8327-b0685195f5aa",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "df3ba64a-74f4-40a1-899c-b24c8bd82632"
				}
			],
			"id": "84e00d89-8d89-4ef2-9a87-85707a9d3672"
		},
		{
			"name": "Tests Copy 5",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "80f7d74b-7bd3-4c07-a2c0-ca42666ba987"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "72e4eb96-6aca-4bb3-816d-0a135e2a2715"
											}
										}
									],
									"id": "11932b09-dec3-410a-bf8b-123702ce9a28",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "948c9a69-4352-4555-8a2d-ef69cb4df9b2"
											}
										}
									],
									"id": "06b98ee0-a7d9-436a-9c02-8ec7ce1fb455",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "f35b2082-ce84-4347-bc72-63db5658938e"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "23434f86-544a-4e7c-8752-3d3707b345b4"
											}
										}
									],
									"id": "b9f936d4-3716-4a79-9472-917930f1d1bf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "29b66d3f-64da-4dd2-9cc5-0f3cee6968c3"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b2165b2e-258a-4fa0-bc6c-9a1520c9e9cf"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "aff99b09-ab3e-4975-b404-3a754c824c92"
											}
										}
									],
									"id": "831976ce-d224-480c-8549-7ea6af389072",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "6f239b22-155b-41d9-8261-8dccb9807e8e"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "afd4831f-dc63-4d39-8967-3670ebe19283"
											}
										}
									],
									"id": "a0194445-f86d-4093-b7ea-f3b66812645d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "60af2f68-52d7-4333-a5ac-30ce500a1b5a"
											}
										}
									],
									"id": "4b64f561-03fa-4b5a-9ebb-7d035078a5a8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "a5febac4-278b-4afc-96e8-287809dbcaec"
											}
										}
									],
									"id": "3a72a400-eade-4ee0-a62f-0220a612a897",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "608f41e0-4d45-4766-a9b7-2dc24fcedef9"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "d1103a97-f967-49d7-a808-ddcfc809c8e6"
											}
										}
									],
									"id": "c371b151-6ad4-46c8-8d81-f5f1e1285b87",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "7e46c2c0-8f2f-4cfd-8f26-ea365b38a0c1"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "cfa259f4-0295-4d89-8e2c-d37cdea4a152"
											}
										}
									],
									"id": "24700d9a-1530-4565-8a22-dce7e12e3232",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "f9964a46-6188-4072-832a-5bb70d15e4bc"
						}
					],
					"id": "4f0b0593-3227-4621-b5f3-c0dc2dc6fcaf",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "0280d88f-8fa3-418d-8330-3d0066edbe0a"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "56085ae7-89da-4a13-a208-6e379c9efa88"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "988bbbae-3100-422c-84f0-813f3e5ccb7b"
											}
										}
									],
									"id": "b7cc8b12-ec5d-4455-bdac-0fb30bed1b0a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "f74b0e0d-6ab7-4089-b6c4-bc8d07389d6b"
											}
										}
									],
									"id": "a6b03edd-2083-4ba0-ac93-adebafba86ae",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "5633f836-a0ff-43d4-aed8-7628bb5f569f"
											}
										}
									],
									"id": "c25b3061-cf1c-4837-b53d-efaaf18b9a9f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "fc4a4111-c523-4a73-9007-ad425bc379dc"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "6d31c5ab-84d4-4fe3-a9b9-092931985c9d"
											}
										}
									],
									"id": "534e80e0-7483-42b2-a161-02f271df9b7b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "ae52e6aa-742b-4d88-ac7b-16f8b36ac6dc"
											}
										}
									],
									"id": "3a64397a-3765-45fc-bc3d-f464cc28abd5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "ddadea9e-a406-4b0e-be85-fb9d13f4ce26"
											}
										}
									],
									"id": "293c39a8-a33f-44d3-b5ca-539f344c67f4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "3b97dd13-80b2-4c1b-aff5-6ecd6710c8f8"
						}
					],
					"id": "652cd23e-bbe4-4065-9ba9-2d28afd99766"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "2a57be1d-9af5-4824-8b69-069079955556"
													}
												}
											],
											"id": "c89a6311-11ba-47e9-b5c7-3d7f81d92328",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "75317ece-6419-42e1-941e-fbf25efff138"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "024a84b6-848d-40fd-a86d-e7d615384539"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "196f238b-4ada-4178-b614-59e36b742ced"
													}
												}
											],
											"id": "9bd7bea0-a872-4f4b-83f9-f2f8613b35cf",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "80c36166-2d20-4b00-9ba7-d9b70e1cf735"
													}
												}
											],
											"id": "e2a102b8-b1ac-4a27-a533-46196e384884",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "7bc3b47d-75f3-429e-afae-a0b9fc3d36b5"
													}
												}
											],
											"id": "dc514767-26ac-4031-a4be-0fbd215aaa23",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "157bf867-a39b-428e-8bd8-82d629188e9d"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "d5c580d9-529a-46ba-bd32-f51ba7662fd0"
													}
												}
											],
											"id": "0d1bd9e6-f809-4f64-9a01-78e38ba10d6b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "b863d0fa-60d6-48f4-abf6-cb5dc6c95fbe"
													}
												}
											],
											"id": "3cbbc8b3-36b0-4eaf-8765-816989de1bd6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "cc549a75-5e53-442e-a200-bee19fae3770"
													}
												}
											],
											"id": "490ee45f-1ba2-4d3b-b926-0b5988fcbf56",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "1eea8be3-b878-413e-9edd-8260268b123c"
													}
												}
											],
											"id": "1e253d19-dd4d-4d9b-8b5d-287db7ca4f1e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "acb4dc6b-68d9-4f54-bbb5-2a8b09de27fe"
													}
												}
											],
											"id": "5efff634-914f-48a3-babf-d0ea49428fa5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "7cc59a70-d206-4fa8-9700-8c9a9ff36399"
													}
												}
											],
											"id": "e01c412d-00cd-49a4-a17a-f87bb4aff8e4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "4997e4e5-78ae-46d8-9bbf-4a6bc84872dd"
								}
							],
							"id": "01114477-6cac-49ec-8bec-06f3a4aeddb1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "6c0ae55a-5026-4ebc-baa3-a56412655195"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "938275f0-2161-4b9a-b617-54a0f09d84e6"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "b0f28c3e-7c86-41ff-96aa-4ab64af54609"
													}
												}
											],
											"id": "fc3472ad-1079-44ae-bda1-b0138c4fef32",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "e18b56d3-4c5c-4839-93e9-11754fb7f988",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "374329e9-ab65-4a74-8790-70ba348769d5"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "5c454735-24c9-44b0-9d0b-f2c913b79017"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "5bac79f6-0a42-475e-a1c5-eaf9c5832109"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "fddf84f9-2b5a-4c37-9f30-d2d5a2bdae2b"
													}
												}
											],
											"id": "85a6bf78-21cb-4315-8cc7-f6a445a8ee06",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "fd61f9c3-1562-4413-9443-86a2e8a2f668"
													}
												}
											],
											"id": "e684a491-9455-4b4b-8962-bd9479621298",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "d2b6c4b7-ad85-4b73-875f-486831d8c473"
													}
												}
											],
											"id": "2bb19eb3-72d6-44bf-a4fb-18e212fd897f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "62820e72-e745-46fa-a5b1-ae75642e2fd3"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "bd8909ae-e547-40c1-b59e-f3face7f7a8b"
													}
												}
											],
											"id": "ecf4cce6-8358-403a-bee7-daa27cfe3b26",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "5147bd3e-2c4c-4d59-b118-b389a90f4ff0"
													}
												}
											],
											"id": "207f16be-073f-462f-809c-ea4e3be5b927",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "317c0ee9-6187-4ef2-8f0c-2534a842e827"
													}
												}
											],
											"id": "014e6bf9-bc10-4982-9379-a5947806ae5f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "1f18ef1f-28cd-4aae-ab81-5b0e469aa475"
													}
												}
											],
											"id": "1058ed63-670c-4a55-be79-d82ecbf79e78",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "fbdb5114-7aa0-4bad-8293-27291061e06c"
													}
												}
											],
											"id": "3016a73a-34f5-4bbe-a2e8-ecca0cf610dd",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "1e3da85d-1e01-4e87-bded-5147224189dc"
													}
												}
											],
											"id": "c3be8dab-936c-45e2-b0a3-ca62fcdacb7c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "1a5abbdd-7171-450e-8c89-29be96541b7f"
								}
							],
							"id": "3aa41c93-fbbc-4fa0-bf7f-1ce020b4a14b",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "7679556d-e9df-4da9-a02e-8a16324dbeae"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "52342153-0ecd-4469-80cb-5097b925207b"
									}
								}
							]
						}
					],
					"id": "4ac186fa-4cd2-4aac-816c-e980569a4b8a",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "0eab3e9c-97ee-4f2c-b629-e04af7471595"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "4eef2b39-9304-4d37-8431-b57715f1d64a"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "9728829d-97a3-431e-9202-40254fee7c8f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "d3d6280f-8e4c-4885-89f8-d1998cd2c4c3"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "8d951818-1aee-436f-ae9a-aefa0a4c0402"
											}
										}
									],
									"id": "ceb778a6-34d2-4284-a9ff-c0cbc5564682",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "1b971001-d0fa-4386-a824-07e6b7149746"
											}
										}
									],
									"id": "8463aa30-c70b-4272-ab3e-e3be48827cda",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "d5cdbf89-b9a5-4460-b448-0f8c2d5cdaad"
											}
										}
									],
									"id": "ab59d231-5f96-4fc7-ae5d-601bb351ec27",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "1c323d7c-877f-4e30-af7e-d87ed1979999"
											}
										}
									],
									"id": "c7ada98f-ed16-4186-93a8-e9dbe150117e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "cf0c8ee6-7e43-4810-8314-15af62b0d723"
											}
										}
									],
									"id": "305e00bd-4052-45a9-8234-2d6c68a9ea58",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "8e1fce6b-58e6-4c79-9638-9f345b54fe24"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "663b2c73-0407-44bb-aa1d-73a6d94b9950"
											}
										}
									],
									"id": "bb446899-8e45-4db5-bc75-83638bf1a58d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "bc77e428-2892-4ae6-86ae-5b6ccdce6a9b"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "9f28fbd0-5eef-4196-9b27-0c42a7086064"
											}
										}
									],
									"id": "fa5ae6cb-9bbc-4261-89d1-bfea8c254935",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "1bfc0efa-cd73-4fc0-8621-6364aa84dba6"
											}
										}
									],
									"id": "1f539ccc-6084-4dc2-9d20-9f9f0ee2bbf6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "92f24032-73a0-4b50-9549-02d380693d8c"
											}
										}
									],
									"id": "9aaba707-d742-4a31-a06c-f47fadd8d5ec",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "6f37e196-43b5-44d5-9f06-1610d6c8551f"
											}
										}
									],
									"id": "10da7fcc-c0ee-4928-a298-b01fe09f96a6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "d6455b59-243a-4cbf-a77f-e82870fb493e"
											}
										}
									],
									"id": "bdd9fe12-fc89-4b77-95d4-30d925a6c56e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "988d5170-5781-4d60-a0df-c07a63b138e3"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "283194e2-07e8-4ff3-8de3-3d7504a1902e"
											}
										}
									],
									"id": "9ab30673-ccb8-4f61-ab5c-e1e992e3d61a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "e8da4517-9166-4531-b41a-e36c119a7479"
											}
										}
									],
									"id": "aef9bce6-46d9-4b6d-b518-523a31b742ea",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "56992974-d243-4025-b419-41f26c91d917"
											}
										}
									],
									"id": "2756238c-bf47-4762-9e82-c4862de956d8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "906a9dd7-624b-4588-9422-88be3b7667b2"
											}
										}
									],
									"id": "a79b4cee-cf8d-4948-8817-b8c5d0542493",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b146458c-d4ee-4619-96a9-a92753a59ef6"
											}
										}
									],
									"id": "a7a98b70-6042-463f-a390-9c4b5da3a07e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "f5979eca-0114-45ef-84b8-7dd950268b5e"
											}
										}
									],
									"id": "aa5a1b08-f7c6-492e-8de0-d02d3c3d6137",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "c766e836-e100-4ba9-9d8d-1fa4f8a58fdc"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "95330aa0-4126-4bcf-adbd-98fa084898ea"
											}
										}
									],
									"id": "55c205fa-f434-45da-938f-4d05ece699f0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "a29484a1-4e59-4509-8c6c-23a9cd2a70bf"
											}
										}
									],
									"id": "17809956-5ad3-4b8f-a7ff-9245af8da7c6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "10e1f518-064a-40b7-95ca-9061232d4937"
											}
										}
									],
									"id": "6bf110ee-c8a7-416a-a7f6-2c95022509fe",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "06f80615-eea3-44f3-9c6f-006162d54211"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "c8a8acd8-5b9f-43e7-9cc0-062efe58ecad"
											}
										}
									],
									"id": "e7bfd3b9-ef4e-4b4b-8e1a-e524e5a2c345",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "975dd292-e575-4928-b9d5-7d3a9ae952d3"
						}
					],
					"id": "d5492214-87ac-4839-9325-747c3ec8ace2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "d2cfe126-8fc5-4384-b771-b23a648465f4"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "92a39b01-dd2c-408c-b500-aadbe666addf"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "989769a0-4f98-406c-b017-d28c6eeb31ac"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "ede1eb1d-53e5-44fb-a1fa-5ef92fecd5f3"
									}
								}
							],
							"id": "9109216d-2e82-47ee-84a3-ed92b690c478",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "37881b58-c250-4aa3-bdac-84379023d7af",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "581fe159-90e2-45a5-8fa1-d3f6dc3a4ec2",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "ee79956e-98f9-4f82-9d49-5bb6fea15f46",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "b897bd49-634f-4133-a19b-3c1c144108af"
									}
								}
							],
							"id": "bf81b7a4-8061-414f-953d-b55684bf42c8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "da2b8e67-31c1-4da7-8d03-1eefd10bae40"
									}
								}
							],
							"id": "c7442f24-8f36-4762-a508-6974e6121a4c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "e1ba7085-03e1-41a3-876f-db6675dc8d4f"
									}
								}
							],
							"id": "3fe05ad4-a947-4823-9b01-c997e1d37412",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "582e7582-5b1e-474f-bb5d-9b45c6a07197",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{temp_team_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "aef5d4b2-ec97-4940-a4c0-c5b98fc05877"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "84d447c9-09ac-43e5-a96a-ae5ba87f3167"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "fefb8f2e-9c91-48a0-ab06-c0f337ad8e34"
									}
								}
							],
							"id": "3f2bb5e2-4cc1-443e-9b73-8d22edfe42b4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "332d367e-84bb-4447-8eb8-8337ddd4eca3"
									}
								}
							],
							"id": "c0bf94e4-26f0-418e-a35d-6b3869ab8615",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "cf7744ba-b537-4fa5-9645-b23f134ce6ef"
									}
								}
							],
							"id": "32521d0e-ef03-4e4e-9625-a9b4a2d7fae7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "92cfc963-f6ce-47a0-9981-550d3badfdfd",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{activity_feed_personal_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "0bea70e2-3787-422a-98b3-63593f8d290f"
									}
								}
							],
							"id": "9aaa3917-f35a-4747-96e1-1de541f1f2b3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "5bfb118f-b7ee-42a7-a0ff-ef532ef4c055"
				}
			],
			"id": "c3c3a862-7d79-47f6-a5c5-93a4d2ccd6bd"
		},
		{
			"name": "Tests Copy 6",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "f7d7ebb7-2cd8-428e-8383-75b59d785b46"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "2a65d0e7-f8d6-4c88-bf0b-e236e745548b"
											}
										}
									],
									"id": "ee7113d5-dbed-4c24-9a16-108167c1558b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "9afe1816-66e0-4091-8e6c-0137f3b7c838"
											}
										}
									],
									"id": "a3e67d91-5bcb-4b9a-99f3-df3dbecc999a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "1f828ae9-8b16-4174-8955-58be24b4dfef"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "4ccf664a-6507-4031-bfe3-8d52b5ad5a6b"
											}
										}
									],
									"id": "d8ef1559-a577-464a-97ed-8fe39f13c453",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "b7027ea5-81b0-4eed-beb9-2047e9cd64d6"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b5a559ef-06c6-481c-8cbb-055d33163c24"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "cd78f831-f8ca-4edc-9d30-5fe30f6c6ce5"
											}
										}
									],
									"id": "52b6f8c6-e537-4389-8efb-276d9830ba18",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "cfd5245f-0792-4fdc-9f02-4220b204701c"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "ed6071d7-63a4-47f0-a984-3906396ccaae"
											}
										}
									],
									"id": "a0ca8079-a8d0-4f33-9112-be416c09e039",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "8be2161e-a563-4463-8461-cbd8f8dcb899"
											}
										}
									],
									"id": "feba291b-9e3b-48e0-9279-010b1e270c22",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ea83e45a-e330-4d62-aede-4b4f45a0e22a"
											}
										}
									],
									"id": "aff61660-3e3a-4ec5-987e-49f60e7ec5e9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "3438d54d-d6f4-4190-ba00-aea43549293a"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "d269fddb-82ed-4656-88df-6105838a9fdf"
											}
										}
									],
									"id": "b480756d-651c-49ed-8d32-415b91a33d4c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "250bb822-5575-41fd-a95a-20c0f6114716"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "bba1f680-731f-49b0-881e-57df6163b9e1"
											}
										}
									],
									"id": "b4f827b8-6192-4922-8515-34ea3a3d6f96",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "89e01843-4e81-4864-b986-68da52511a48"
						}
					],
					"id": "37037eed-10c8-4964-8c29-58e6d6d1e53a",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "ea05512a-eeee-40a4-be9f-1384ba6e69a3"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "f9f4ebce-fc99-481c-b43e-1b21a46f3358"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "a8b0d81d-1f0d-4d59-9b37-d984639f0641"
											}
										}
									],
									"id": "b4657ba5-5456-4cba-963b-2a8ac958b9f7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "04c882be-1d2c-4920-8b75-00ea8b4956bf"
											}
										}
									],
									"id": "2e3d9bd7-1c09-422d-9685-dfa13fd69254",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "7e5bd273-6948-4b0f-b393-b6f8e3d5ff08"
											}
										}
									],
									"id": "f0ed3663-15c9-48da-b881-556a08b0ff47",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "6e08cb80-5b04-4fb9-bbcf-49648b37b76c"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "2db541d8-ae2d-4123-ad16-d649f880c798"
											}
										}
									],
									"id": "88c935ac-5269-4c36-b88d-7614d5dfb0c6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "b635b7f0-0574-4805-9d8c-acf9978fabbc"
											}
										}
									],
									"id": "c639e3c7-2a2c-4267-ac65-d800b5aea321",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "507cc8d3-e18c-41db-8baa-a1fa77251257"
											}
										}
									],
									"id": "e7f31580-6afb-4b82-b6e5-1af4f9642893",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "7a89540c-11ce-44e4-ad0b-41803a97d4d9"
						}
					],
					"id": "7a04e1ba-4317-4235-bd0a-8a73032ecb80"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "6899ef3a-0c51-47cf-ae0b-b9e0188e2377"
													}
												}
											],
											"id": "4b7189d3-4393-4423-bb7f-aaad6bf2844f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "7d7cb6ea-ac06-425f-9aac-2989fb8c76d3"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "de702e3a-62b8-4f6a-aab3-f03232007f09"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "b0ecf824-6459-4d8d-b1d2-b32033100e75"
													}
												}
											],
											"id": "09122ab5-8fed-46c4-80bd-b7016611b3c4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "2712535d-c17f-466d-ada1-961d839e055d"
													}
												}
											],
											"id": "89dbcb42-72ef-4801-bd35-a34867e3d821",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "4704c6b6-2d07-45f7-b65d-85594cfd0c18"
													}
												}
											],
											"id": "3e4c3836-e000-49f8-82b9-50ac9f4de2c7",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "c078bc12-3844-422e-a769-c67cfecb396c"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "c1b38928-4d85-4832-af73-c9ca05d8c1c1"
													}
												}
											],
											"id": "bfd9721f-437c-42de-b6d0-bc7b712f7306",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "ebf95747-6445-49f7-b6c9-4c218af31bee"
													}
												}
											],
											"id": "1725ad8e-5c00-4952-b551-4c08d3df8e13",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "4cd8cee9-4917-41cc-b54b-adf7af3ee3fc"
													}
												}
											],
											"id": "e5d6be64-1d78-4d50-be8d-e1823d00a7b7",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "77fd3ba0-e461-42e2-9e57-dee1abf2a48f"
													}
												}
											],
											"id": "95fd081d-8188-4434-bd88-d8846952b444",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "2a723473-3e48-4cc5-87f6-6323e1011cfe"
													}
												}
											],
											"id": "4218ccf4-e1ee-4134-bd73-fec01246899c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "45373d86-4f20-46c5-ab8d-04ca6a97f491"
													}
												}
											],
											"id": "822b774e-bddd-4dd5-ac28-884c791a0e27",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "0fc8d42f-021c-4626-bfe9-2cbf47c1d11d"
								}
							],
							"id": "c34b354a-64e7-4e44-a77a-e4f94b4c2c7c",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "a20108e0-1ce9-4e65-8242-676f6a8b2a8c"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "c76131fa-6993-49c8-b9d3-8280a9c2d0fa"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "15b5e183-0dda-4b81-8cde-5680971da04c"
													}
												}
											],
											"id": "417d5794-fcc9-4f6a-9d28-6d02f8c8a543",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "5a4de3c2-4e1f-4bcd-aaca-64ae0051cac5",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "6e3138ea-88a2-4482-93c9-347fba43d9fd"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "6a463bf4-2321-4ee6-b1db-ad096c770849"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "fe055d73-f6dc-4afb-8dce-2c755c79a7f9"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "4d3e949d-054d-49f9-9eec-fa00d1f8b5af"
													}
												}
											],
											"id": "cfa46de2-33fb-4b24-802a-059616ead806",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "d403f512-5450-4bbd-80d9-4b79c5d871b1"
													}
												}
											],
											"id": "7a975880-8fef-4c7c-9b11-3a760145a589",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "1929b99c-a6b9-41dc-b843-0d8586425880"
													}
												}
											],
											"id": "3ebe9bdd-9bbf-422f-8113-75f0a12a4194",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "79d9202b-3410-49c4-8bc7-75fa18dacc8b"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "afd78691-6ce6-4e9e-a6e8-5cebffe0345f"
													}
												}
											],
											"id": "df384e65-05e4-4fe6-a48a-74ef6483824b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "32c94979-f919-49c9-81f5-0b57d2c931bc"
													}
												}
											],
											"id": "1bd92bef-6a8f-4dbf-ab50-860a854aa440",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "5e62a739-1f8a-4d8b-b105-5b59000936fa"
													}
												}
											],
											"id": "d244e37a-fe6f-4ce6-bbf1-139b5ca2ad65",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "666b163e-5494-4b39-94a3-b56f31c95eec"
													}
												}
											],
											"id": "76fd6d49-373d-439c-ae1c-7a8a95ceace1",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "bc1e5e6e-b59e-4a5d-9439-08bc5ac544cd"
													}
												}
											],
											"id": "54f99cab-e56b-4106-9297-8640227c9b80",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "8c61f791-ebc8-46bf-9f59-a6e09c51a3c6"
													}
												}
											],
											"id": "ae91f457-551f-4cfe-b4b3-aa84d375d425",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "419ae146-5e47-4757-94db-50307197495c"
								}
							],
							"id": "9f555723-3622-4692-bc80-2e4b1de1c987",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "3ebd2bae-eafc-4738-82e8-8b42148a56c3"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "8c3e8c79-5f44-4835-bb33-b2f5ddc4d6fe"
									}
								}
							]
						}
					],
					"id": "5008b9a3-d355-4e2d-b620-73632193dd4f",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "ed55e94a-b0e0-4749-883a-9eefb8d6a132"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "9a434f3c-6efc-41ec-ac26-f192c87430ad"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "7315d69a-ca7b-4191-851c-15430b198d85",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "38498e56-3abb-49ce-98ce-d0a0c432cce5"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "8a0316a9-1c33-42e8-88c1-f7a5e95ebe5e"
											}
										}
									],
									"id": "47be3225-0601-4624-99ae-5f2dd0c45208",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "7e987763-aaf6-4c52-b3f0-5df07c4fca42"
											}
										}
									],
									"id": "67a3a074-0604-432e-a92e-a34fbe8ac924",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "5ad55cbc-b4d0-46de-9050-586bfcffd9bc"
											}
										}
									],
									"id": "8c8ed2c1-b38a-42cc-9577-b326a8dca647",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ced9be34-b973-4472-8199-1b86cda738c7"
											}
										}
									],
									"id": "71a51342-334f-41bd-a117-7bb471963038",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "3ccc88d3-68b4-4ccc-a6bc-ce0e5245682a"
											}
										}
									],
									"id": "0f29a8f5-ca05-4a70-b52f-63282d09c5d0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "e6a3d8d4-9c33-49de-83c2-4a0177a0ec17"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "ce7a0c44-c949-4138-b1f5-930cc0eeaa11"
											}
										}
									],
									"id": "06e65e31-8ada-4bdc-ad2d-c3c7a0a6ee99",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "24905ea5-1f1c-4ac8-a86d-c5975e0e06de"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "897f9e6a-de5a-4eec-a500-a32e032ac943"
											}
										}
									],
									"id": "23e60652-030c-4dc2-8f51-71042daa4442",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "0bec911e-bc6f-4265-8708-4bf6e2055ed3"
											}
										}
									],
									"id": "107a05cd-46e7-4311-9e02-3292337ac97b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "3d807a9a-ab69-45b5-adaa-0e407efb413f"
											}
										}
									],
									"id": "7ee71b1b-b8ea-4d22-95bb-4bd0f747231f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "a3976c34-a070-46a6-8706-13375e5c24e3"
											}
										}
									],
									"id": "40932c95-7d52-47f7-92e1-222ce5a6859c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "8a319591-2bcb-42d5-8afb-440e305c5b39"
											}
										}
									],
									"id": "682b48a4-db14-4a25-ab8a-982c90a92685",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "71b2244d-5e64-4495-b620-82f5d48bdd26"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "42e497e5-bf85-460c-8431-3f272461be4e"
											}
										}
									],
									"id": "969bd1e9-bcf8-48dc-aaa3-d648990cf6b7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b22aee91-bca1-4546-a2ce-c757a514ee19"
											}
										}
									],
									"id": "08d6bc97-5638-464a-9783-e88231b48d13",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "e9cd9562-e90c-443d-a8b5-7f726f5bc735"
											}
										}
									],
									"id": "40590a55-fff1-46c4-aaba-f945ff5f8180",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "38cdd405-c7aa-4fdf-9ea2-9704bc2aca0d"
											}
										}
									],
									"id": "5f330182-f36d-4b1e-a22b-b1d3488d6f2e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "c87d1d56-959b-4d59-9491-3a64273a065f"
											}
										}
									],
									"id": "6f74869b-dd9e-46dc-bf52-986ec2b7416f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "7faf310e-7752-47d9-983c-0c401ff3ae12"
											}
										}
									],
									"id": "64fa3422-5b2d-4db6-9d4d-f983c71bcbf9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "21ab091e-f737-49cc-a8d5-cdb33aace25e"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "53358d9c-fe77-46f9-a03a-3faf8840967b"
											}
										}
									],
									"id": "36dfa7fd-4695-4cba-8b5f-21b29aadea29",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "1fcadb3a-11d5-48d2-814d-02c3792bc6ee"
											}
										}
									],
									"id": "0d277b21-d432-4d7a-916c-c8d10154be08",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "4f94b90b-2492-4a23-b344-5cee85378664"
											}
										}
									],
									"id": "7c828b47-3803-4d39-a7ca-245482fe9f72",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "3f6cc24b-b4d5-4725-b6b2-151066b335d5"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "003efba9-8846-45f8-ad23-69748a221f5c"
											}
										}
									],
									"id": "1c0d89e0-6671-44e8-9098-28ba4737096e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "8ca7927b-0914-4de5-ab9e-56066de58cce"
						}
					],
					"id": "09c06d99-a48d-4570-bc6a-6993c40fa516",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "c82e5403-7712-45a7-a63c-059ebbf50f4b"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "bc6eb6f1-ecd8-4ac2-9829-ece0eb6400a2"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "607c0e63-4947-49d5-8e51-fc7b247d4b4e"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "04bccce4-bdb6-4e30-91dd-4da13e872495"
									}
								}
							],
							"id": "e90a834f-8557-4aea-ac9a-6497f0f9d971",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "d001aa6d-77cc-4bee-b03c-58e65c4fad3b",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "f4e62a03-bbae-47d7-8480-5797ada60115",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "15231906-3273-4721-80fa-a133846afe7b",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "3d243a42-8dd6-4612-a62e-5313ce3bb654"
									}
								}
							],
							"id": "bb0c4ec9-e7ff-4858-9284-b579177d5196",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "8ef68a6d-e4f7-45ab-9d7e-f2e24124dd31"
									}
								}
							],
							"id": "6910de49-a445-4bdb-9bf1-83090b55c379",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "a8e1b427-a828-41fc-b71f-e775b2cbc3f0"
									}
								}
							],
							"id": "b46d882a-5c11-4b0b-9284-f4bd76208a9b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "1300371c-07b8-47a6-9794-01f03bf1b441",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{temp_team_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "2fc508a3-d203-404b-afff-5ca1a762f7dd"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "4bdf54dd-ba0d-407c-9ffa-49ca1bd15fda"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "24880721-4966-45d4-84fb-f0381b81a49f"
									}
								}
							],
							"id": "ceeab173-e18c-4b34-8806-4241d6e25e4f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "2b2ea073-676c-424a-a85f-ce2608c65d29"
									}
								}
							],
							"id": "38db4f99-0deb-46c1-acdd-374ed8442ba0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "8f9a2917-4402-40d8-be30-82ac632be82a"
									}
								}
							],
							"id": "206b9487-7c51-412e-ab34-5cda4bd8e621",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "ea28a3c1-7516-4b1d-980b-0ae3267edce7",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{activity_feed_personal_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "5e9ef267-29e1-4dcf-b8b1-eb6cd6daa0fa"
									}
								}
							],
							"id": "84dad5ad-e64c-47a2-b255-4481dcebc15c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "05e45123-2d55-4f55-a606-eba40db8720d"
				}
			],
			"id": "901ffb01-bb00-4af0-82f5-1542cd79b59d"
		},
		{
			"name": "Tests Copy 7",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b8c06405-0521-4231-bc68-d49a5a37cb33"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "6d1c1344-769b-4290-b8fc-643229950573"
											}
										}
									],
									"id": "7b2bf439-8404-45f4-a0d4-c6f5ed003f4c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "8447d461-a675-47f7-9164-c7e4f751bfb4"
											}
										}
									],
									"id": "1bf02497-0e0b-4afd-9676-4977c913c348",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "cd28159b-6e9e-4ee5-a0ae-786b08c5fb85"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "fe6c3ad5-b28a-4dc0-9e47-9d5acbbcabd3"
											}
										}
									],
									"id": "2e61b835-ab2a-477a-bc4a-b998e58dd892",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "da8a3124-6632-4121-87d3-533e897a5e4a"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "c2e799e6-1a33-4c87-a575-09f0f9ced2a8"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "bb75252c-050c-43de-b6f6-3a5646eb576e"
											}
										}
									],
									"id": "9ba7d505-4ed0-41f7-beee-ad574568a23f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "a4b42537-9e5e-4cec-af98-eb2617e160ab"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "7aed43e6-f7a9-4d5b-a772-dab7f2ae0728"
											}
										}
									],
									"id": "2e74ba09-d2f7-41ae-9560-b8881393bece",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "530d84bd-74c9-4daa-942e-0390497551dc"
											}
										}
									],
									"id": "a4b5f641-c435-491f-a69b-e067c5e88c73",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "6603c9b3-a71d-4752-a948-a1a854bd331b"
											}
										}
									],
									"id": "091896cb-24e0-4863-8c83-cbf91ffd6224",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "4b854b9b-8b98-4ee4-8464-585a431cc159"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "83da78e2-4c78-46f5-b1d1-66198b2ba8a8"
											}
										}
									],
									"id": "346a2e37-c52b-4525-ae29-2309e5163229",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "83d3b482-f32a-4cf6-abeb-90398d2776cc"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "e54fee97-aa97-4740-a3d1-e4d9e1f5e31f"
											}
										}
									],
									"id": "9f3f0803-9d23-40f0-94dc-10b4bb19c47e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "8e6e9742-9a6e-40cf-a934-0be1f9efdde7"
						}
					],
					"id": "de9eca6a-9ed9-431c-9c72-25af8fc4f0dd",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "2f35e58f-f29d-42c9-a600-b703daef6c2c"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "5bfcb2bc-9f68-4afb-8412-1a3e9645046a"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "579abed0-d03d-4071-a032-c23f20131270"
											}
										}
									],
									"id": "c890422d-c21a-453c-a0a6-35d665c1e1e7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "28ae3fcc-b43d-4268-9f33-610e2c1cdccd"
											}
										}
									],
									"id": "d3a95993-1d68-4e28-9854-ac4f73f964af",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "4a0195a6-bc78-4f81-affb-00737f0993c3"
											}
										}
									],
									"id": "6599dc45-db49-4163-9c1c-0628bd2e3d49",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "03cb361e-efd3-4e5d-bc43-0eb0e6765785"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "7e95b5de-0c69-443f-bf74-dde7688a6aca"
											}
										}
									],
									"id": "c6b3906d-27d6-42fc-b7ac-9beb90ffdfa8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "cc87d54e-4ec8-4b5b-9823-17bd4812c3c5"
											}
										}
									],
									"id": "b779398e-3cba-48e9-ba6a-2e471eae287a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "46d5f778-10c5-47cf-89ca-ceca60bc7841"
											}
										}
									],
									"id": "f09a92f9-1ccb-4102-84f2-c5451d99a333",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "2d343440-e2a3-4574-80ea-243733d645d5"
						}
					],
					"id": "0f8e216e-205f-49ca-8b41-3df71d7772d8"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "d8295dec-d96c-442f-bb3c-7847b7a71a53"
													}
												}
											],
											"id": "eb5f9b8f-15eb-474b-bf70-fa564625e5b3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "7b60a828-92dd-495c-b195-0f80abd209ef"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "9e4a07ca-b9bb-4f50-a8ed-fcc6da3f4a0f"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "320cf844-4a62-45b5-a308-ede18c4845ef"
													}
												}
											],
											"id": "68d3f73e-bca8-478b-a0b3-5df40df414e4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "8ce15be8-632a-4dc6-9889-594b02422b6d"
													}
												}
											],
											"id": "10413636-3864-4d65-96a2-187bb1ed5f67",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "155830ca-0eca-4c81-bdd0-2ed006a50346"
													}
												}
											],
											"id": "e6733c7c-74cb-4d8d-8ff3-8beebf18ba10",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "2862d6f7-2835-4a68-b453-a28acd39a7f1"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "850cee9e-9bb5-4364-ab81-5675cad37a97"
													}
												}
											],
											"id": "3d1d53ef-b239-4f4c-9c9e-6f0647c82cb1",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "9cb7245d-1625-4f99-beeb-02087645a5c6"
													}
												}
											],
											"id": "9767edbe-21fb-4e81-9f34-cf0c95a432d3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "131374c1-9afe-4150-965e-6ddc3b7a4257"
													}
												}
											],
											"id": "9862b77d-6f88-4cfa-9c9d-bb270b323ae3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "7cc3227b-106e-494c-bc22-dff062494b21"
													}
												}
											],
											"id": "b04263fd-7fac-4a7a-8152-d6f73d890d4c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "af8aef0d-d21e-4453-82bc-2234016a896f"
													}
												}
											],
											"id": "9532bdca-eebb-4980-b644-660ed58850c4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "f3200d86-64dd-416a-b2b4-d85aa416931b"
													}
												}
											],
											"id": "5c93272f-8e1d-4690-b44a-f9df2ab83070",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "14ffdf51-7433-42a5-a2a1-6144a9db87a3"
								}
							],
							"id": "6a4aef7d-9eea-4405-931b-fd0970263dc6",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "480b6bfa-6187-4bdb-9808-7b678e591dd5"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "6a861a6a-989e-4978-ab6c-8259796fcab7"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "d22f8281-0b9b-4c2d-a260-3b38035bf447"
													}
												}
											],
											"id": "11f28653-12df-4981-9406-d570842c9460",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "272a85a2-1cab-4a2c-81b0-a6b079fa081b",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "4da41835-d94c-4dc5-8e42-d85517826761"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "fed4e2d8-f594-41f7-926a-0ec531fef3cf"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "440c61b2-3087-4bda-8017-3045db8d55c3"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "e2f2ab38-0e97-4691-b491-c8013c83b29a"
													}
												}
											],
											"id": "4c77f232-4a78-483c-9a8d-58e96eda8c5b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "5e25ed3e-89cf-44ec-a07d-7ae521bcab84"
													}
												}
											],
											"id": "542880fe-2b30-4b98-ab65-6de3822d1cd1",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "a264be5d-16cc-4abd-98ba-f2f1be203fae"
													}
												}
											],
											"id": "f73027d7-3d1c-48aa-912e-d11dc911dc36",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "84e9dd97-4ec9-4c61-8ded-5fbf85843538"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "2dbee79f-a125-4f5a-b9ba-8f2efc0ff3c9"
													}
												}
											],
											"id": "f5c0e09b-07d4-4344-96e3-6b43cc8b11d0",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "7a899dc2-023a-4178-aea2-4cdbac87534a"
													}
												}
											],
											"id": "e240bba3-ae1e-4813-b29d-a85e716600ac",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "73499e66-2108-45ea-874c-7eff93e954e5"
													}
												}
											],
											"id": "929a8319-b246-4e4f-8024-a55384bfc06e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "27cd9475-c3d9-4844-93ee-d46bae763764"
													}
												}
											],
											"id": "abb4f4a4-657b-4bdb-a759-dadfac3b7fc4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "56ad2136-28c9-4f41-a637-b4b8af1326a5"
													}
												}
											],
											"id": "f9231aa6-6aa8-4fdc-a414-1060d78836ba",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "2a53af1e-b6fc-425e-91b1-c740d651c9eb"
													}
												}
											],
											"id": "bf729e6a-69dc-4ffe-812f-e807632edbc2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "84a8b366-a9ed-41a4-b3f1-a12c79017179"
								}
							],
							"id": "e4ca028d-e2de-4b26-abcb-e757f6e0c503",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "58a36343-9962-4b46-89eb-e0fbfea25747"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "2e59e132-76d4-4079-b175-4f5b72eedee3"
									}
								}
							]
						}
					],
					"id": "d552f8ae-5a55-46eb-8964-0e0b9d18c5c4",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "043d75a6-5fe3-4a2e-8f16-aecda6d411c2"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "d3dd9e94-86b6-4f4e-9a20-4d50daaa2c76"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "c9618048-7ad3-4cba-92cf-abe42f559eea",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "2418b71b-5084-454e-8ce2-9a6fb65b45ea"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "aea31783-988e-48ab-9a96-5a8efc62df72"
											}
										}
									],
									"id": "0d7330ee-be5d-484b-ba07-7a20a271f043",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "e71a896a-dd05-4f47-8f60-2fc201b2296e"
											}
										}
									],
									"id": "d5626115-b80d-4ead-b4a3-23392e2bbf60",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "73b3ae34-e77c-48e3-971e-9f9461ddf39a"
											}
										}
									],
									"id": "dd946849-dd64-4b31-b842-e65d95a70c7d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "f3c44f3f-ecad-412b-b284-6b153b470c9e"
											}
										}
									],
									"id": "f67c120b-e987-49a7-b534-361b83d96ae8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "a777655d-6770-4c51-a706-47a70090e201"
											}
										}
									],
									"id": "d27ca2b9-b033-4daf-8811-2311c9b8d2cd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b0f45f9f-bd0e-4798-89cd-0fa668abe2a5"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "0d806eef-3175-404c-a77e-1cf595901394"
											}
										}
									],
									"id": "336d024a-ff82-46dd-b098-83270f4cacf2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "54eba779-5701-4b7a-9373-67330df0558e"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "ccb42343-7ef6-4114-aecb-0c6bb7a8ef6f"
											}
										}
									],
									"id": "89bd55d5-33f5-4f2c-8261-a3e6957ba802",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "eb50075b-c4ca-4db3-929c-ddc6ad8ef665"
											}
										}
									],
									"id": "6f4b9f60-372f-4187-945e-3176fff72994",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "ae664cb0-851b-4eb5-ae0a-516e9dfdbad2"
											}
										}
									],
									"id": "83eb84e1-dbd9-4385-8248-1cac79d5cda9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ee585147-be62-469a-af20-871158165558"
											}
										}
									],
									"id": "b702f285-7cab-4966-a6bb-88028af02e44",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "d600ad4b-1cc3-433e-80f9-722d6a85fada"
											}
										}
									],
									"id": "90c36cf0-7f6e-4907-ae3d-2d4f530532a4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "6baef82f-b25e-4186-82b5-829977738667"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "e39e7158-c1b0-4f83-b08f-f75dcbeb759b"
											}
										}
									],
									"id": "417d5e75-517c-4ba9-b581-49e997808b8d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "e52608d6-92b0-4147-a8b0-39d4f2c03dbc"
											}
										}
									],
									"id": "b382d725-7354-4c18-a3b1-2983b7a602e3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "02e887f9-1141-4787-8d29-0cd235f2d5a4"
											}
										}
									],
									"id": "91718f1f-d409-46fb-aaf9-645c82f504db",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "73808212-65be-4297-9586-4f1ef29e008d"
											}
										}
									],
									"id": "b04a71ab-7e7c-4237-865c-7955fddff436",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "3421e713-51d6-4d1f-9bed-bc22c960d844"
											}
										}
									],
									"id": "614dc90a-6fd0-4d86-a355-0e0119f6e506",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "6a01b451-94b7-486b-ba3d-84a77f497d50"
											}
										}
									],
									"id": "dec145c3-0cc8-4add-8b84-554bbe01634e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "78de2d0a-2092-4dd2-a7c4-4bd90e5b288f"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "c5359c23-da38-4d46-ab9b-92fdd8f0a133"
											}
										}
									],
									"id": "e9b548a8-8aa7-4060-9b9f-a329dbf5bf2f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "598733fc-3784-44ed-83da-7fb154f60502"
											}
										}
									],
									"id": "c71dcc1d-f8ee-44aa-94b6-53b9508ece19",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "bf0c3012-32de-40f8-bc48-23538cbf4b8d"
											}
										}
									],
									"id": "b14ab598-5d07-408f-891c-b39fd91d59e2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "2392dfb1-0ba8-422e-a558-fac90569b1bd"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "4be2eb47-e313-473d-b117-e00a165a33cd"
											}
										}
									],
									"id": "c6a3aa78-d8ab-4d07-be7c-26b11743ceb5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "c53de77e-913f-4bd5-9b9a-932a84ad7e81"
						}
					],
					"id": "df759314-100f-43b7-b165-99fddbb00fa1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "78cb013c-949b-41a1-af5b-ed099391b8f5"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "00535fa5-fa25-4382-b57e-d0b7b3979297"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "38756cca-b726-498d-a2ed-629fd41a881c"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "169498eb-3ba3-48e0-a865-430e815baf97"
									}
								}
							],
							"id": "81c06fa9-8275-47b8-b406-5c6e12a9cc21",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "0e4b5b88-34eb-4605-8d3f-dcbe704c209e",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "78601f61-c8b6-428f-9c7c-ed11367457a1",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "97721506-f767-453e-a648-520f2dcc22b7",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "d39532ba-070d-43f9-bc4c-940778e14345"
									}
								}
							],
							"id": "59fa1919-9ede-4b10-a274-5cb934d60911",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "2f6f2037-913c-4a53-94b1-257ef0711d67"
									}
								}
							],
							"id": "87b33ea7-a21e-4ef4-9736-e1b30f12f390",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "9827fab8-34b1-44a8-ba81-e4ffe4bfcad0"
									}
								}
							],
							"id": "a7fe26f1-4a16-49de-991a-51b22582068f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "7888dfe3-ba94-4d11-b2fc-67680e64b4ad",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{temp_team_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "2ec39eba-1f05-48d3-a030-6c5d0c98c258"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "65596728-0ba8-4c48-8dbd-fc12eba5290c"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "d9f3ce6e-33b9-4f5d-a8f3-94822d9dd368"
									}
								}
							],
							"id": "786efc60-f52f-4380-8ba9-f61d3e93e940",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "48357591-ceec-4943-bd63-ce699fc5c18c"
									}
								}
							],
							"id": "99f90a51-7103-4cd6-b26f-6a19d6979924",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "fe299d77-2b0c-4adc-92e3-b1a90903c9b9"
									}
								}
							],
							"id": "4a74de14-cd7c-4921-9962-bbdcc4a150f6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "a4a0f189-c8ad-452f-862f-cfc5f3f6831b",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{activity_feed_personal_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "118d1f0e-b23a-42e2-a45e-0eb570a27bab"
									}
								}
							],
							"id": "848c9b7d-b531-40de-9849-94a30d17cc93",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "bcd37f1c-3aec-46bc-9e0f-6e3b739849c9"
				}
			],
			"id": "ecb0da13-ea81-4be0-90b7-6c51fae5c4fd"
		},
		{
			"name": "Tests Copy 8",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "0f228b80-51c9-419e-86a6-ed4d44a370b2"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "c47cc807-01d0-48d0-8cba-a7a443dd2a7a"
											}
										}
									],
									"id": "fd217414-4b94-462b-b7e3-2e8cd110044e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "58b2ccf4-19ec-4038-a74f-92a961ee6ca8"
											}
										}
									],
									"id": "86ce1937-bfc0-4cf7-899c-cea4b2ca0e35",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "88679d2d-6276-4b6b-8c47-49e841508534"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "8363709e-4f8b-4982-953e-d2f6f218b30f"
											}
										}
									],
									"id": "1a17e445-fc36-4b23-a405-30c0fe30a80c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "e0871859-992c-4807-9ed5-42ab70cf5b69"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "841b9134-ae5a-43f5-ae43-7c2b2c62bf30"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "a00e8bf5-19cf-4618-b0a0-f311aa02c4a6"
											}
										}
									],
									"id": "3384b2f3-634e-4b9a-83e4-e8481f140f14",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "1f23b568-b749-4a6c-8232-5eab46bcb5bc"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "265ca5f2-04d0-4b70-8bf7-932f929d3b08"
											}
										}
									],
									"id": "d1d53074-0dc4-4d41-8434-9586358ddba1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "6ae2761c-d35e-4f76-8085-7f86079cff79"
											}
										}
									],
									"id": "67340f7c-c394-48b9-bc3c-5dde4f6707df",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ec6a6799-ffc9-49f4-b89a-d479ad96ce1d"
											}
										}
									],
									"id": "b1784458-d440-4156-95ab-89833f01ff9d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "cf023d26-1aa4-4e8f-9766-c0f5f357a92e"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "deccb087-ec96-444a-83d7-0a7b3f0bea99"
											}
										}
									],
									"id": "fc70d06e-b8ff-41e2-9e0e-9b34e4d81d4e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "17e37866-a344-415a-80b4-38fb69c3104b"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "6314d430-6a63-4cfb-b923-f3de2a2202a2"
											}
										}
									],
									"id": "56ea1cec-a36e-4f58-a5b5-6db0310ffd7f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "45e84e0e-86a4-4399-b3d4-e011554be935"
						}
					],
					"id": "87d02dea-1fb9-45b8-9edd-68d0d9304715",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "bbafb4cc-2809-4374-bb67-cb0eaebe0fcd"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "1cc77611-f1ce-4702-aabc-6e2c0afc357f"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "acc020d7-4531-4a9f-ac21-bfb96a67091f"
											}
										}
									],
									"id": "d1284e3e-7d05-4368-87bc-84ed00e899e5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "bb178bac-89d7-459e-afe3-fb8994298386"
											}
										}
									],
									"id": "286b375d-21d6-4048-b4e5-034c4f4663ce",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "2b8d10b2-ffcf-4739-a008-8149d8cc532b"
											}
										}
									],
									"id": "bc85b69f-32e8-4f1f-92c6-9944f7df09de",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "6525a697-b093-42b0-808a-3038e77c01fa"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "fdce6e6e-301b-4564-b86e-f6b0e870adbf"
											}
										}
									],
									"id": "54996d95-2273-43da-b452-fb2c3771bb2e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "1e117497-39d9-49cc-abe5-86a1eee0930c"
											}
										}
									],
									"id": "bcdb4208-9aac-425b-9fbd-853a84542368",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "f5f15421-b518-4a57-a264-e871335fa3fb"
											}
										}
									],
									"id": "656caf5c-75e3-4862-acb8-863bb504b409",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "fc58b071-37c3-45a2-bf81-955f689fed42"
						}
					],
					"id": "32cb5cec-7873-4ab3-9ab7-158c54f24348"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "b6d64b5c-23dd-456c-95e6-ada94de4e3ba"
													}
												}
											],
											"id": "93a2a737-e9ab-4a27-919c-7e6a0cbf3dfc",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "887b71a5-0c41-4dda-ab10-f21f869bd432"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "d57c6f16-046c-4107-92fc-eda05083306f"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "7392c82b-fea1-4683-8ec2-d0ae5e15510f"
													}
												}
											],
											"id": "4881a1d9-685b-456b-a221-5c92ab92de0a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "71c5297a-7ae7-4388-a8ab-2f0fdecfd81f"
													}
												}
											],
											"id": "40009173-3dea-499b-8db6-4eb276e41056",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "931c9d02-faad-4308-b16e-db39dd9bf69b"
													}
												}
											],
											"id": "c33f8ada-ea33-442c-bf3b-cda5875921db",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "f3511218-738e-4043-916e-2abe513171c1"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "ff34383f-fe83-443b-b582-08fc6520a69a"
													}
												}
											],
											"id": "c5f3acfc-053c-45f8-9c70-e15736549660",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "5003e504-e936-4f75-8675-9785cb7b4d87"
													}
												}
											],
											"id": "5f4629b1-078c-4f9a-90eb-5cc2f2f8b8d8",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "511bb280-d85e-42e9-b0c4-7bfa47b0990a"
													}
												}
											],
											"id": "442f9076-a5e9-4049-b4f9-49605f6abd22",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "ec8fd0ee-a944-40a4-a7fd-a7cbc8cf9bdb"
													}
												}
											],
											"id": "413f0447-d710-4a89-8800-c7bc4c0bd496",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "73c2e65a-78c2-49f6-b577-83a0549567cf"
													}
												}
											],
											"id": "e62c780b-9fda-40ab-84be-4e9eebac4451",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "0613f640-660c-4753-815c-d20927dbfdcb"
													}
												}
											],
											"id": "f286d23c-193a-4e75-bf5e-d8d544e0a543",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "7b091d7d-e1b4-45b5-97e4-14ba3c0724ce"
								}
							],
							"id": "6d3faa09-8eef-4564-8882-341eb05e0d72",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "d78585ae-b0ce-4371-b606-a719260fc546"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "11a8359b-581d-43a2-966a-d6e102da2a8f"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "22ae3957-3974-421a-b807-637215f57476"
													}
												}
											],
											"id": "bc4d6f6c-0a97-4194-9652-1947d27a44dc",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "e3e58e21-2d82-4dc2-88b7-dfbfd79070c4",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "7eec49af-c7ab-4254-9700-ef6af041d603"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "0a4d8e89-7a27-4588-981c-9fef119629c0"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "a4db6d00-0eab-4719-8f4e-d682cd23d0ff"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "07fd23d9-fd54-4b0d-98e9-dae30c960559"
													}
												}
											],
											"id": "f73a58d4-7666-40a9-8683-70ba23b4a1ab",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "230cc6f4-b4a5-4358-9556-0a762f4382d2"
													}
												}
											],
											"id": "eb165fd0-d5cf-46a8-975c-7b657f9eb183",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "cc94023b-96c2-433a-aee4-b2950090e75d"
													}
												}
											],
											"id": "da203b64-5ce0-43c9-9cf6-b3d39fc8ec1d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "b669d481-d753-4484-b921-f29cf7e89046"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "0f524bc3-d4bb-46a8-8a62-4856a025355b"
													}
												}
											],
											"id": "d029bce6-108d-42b4-9ba4-ee9903232457",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "cd2ed0c2-b145-47e2-b56c-96b5d680608e"
													}
												}
											],
											"id": "ce4a113e-b74f-4821-b27d-6add9dd8add3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "09476322-537e-4dce-8173-2babc96138f5"
													}
												}
											],
											"id": "6e87104e-ff5f-4400-ad88-724567c34e5e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "a7c40592-c8dd-4886-bd6a-b45e2cedf21e"
													}
												}
											],
											"id": "783f2bae-e642-4aa1-8fe4-cbe2e83ae024",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "80639eb4-26d3-443b-a24f-1eea8e7ef07b"
													}
												}
											],
											"id": "44b35408-c15e-4696-8037-6caba17e16e1",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "eff081bb-bb4c-4080-a38e-f3c49b77d311"
													}
												}
											],
											"id": "6751b5a1-a094-4ede-94a5-ad5a942d22dc",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "741d1a60-bc91-43d7-8225-068b607d7879"
								}
							],
							"id": "058f06c2-24a4-4477-a2c5-e73b2269ab75",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "20c1845a-51a8-4ec8-bd6f-53633c4edc49"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "078fe4ea-8ca5-43e8-9b7e-83494ea95ec0"
									}
								}
							]
						}
					],
					"id": "a8495045-2db5-424c-acc0-3135e6917067",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "88690392-10da-4bb3-aec1-a40dc6aa18da"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "31fcc917-ad12-46ef-9da5-56281a67b644"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "b95879ee-5360-4aa5-b1ca-c4f2363e3acc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "51061fd9-5dd6-40cc-a8fc-0936d75afdff"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ac51291b-bd03-450c-8071-591ed4bda3ea"
											}
										}
									],
									"id": "4b328ee8-03f9-4e50-b94f-e205232e5746",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "cb863590-ca20-4d4b-84a2-dacd9959a8e1"
											}
										}
									],
									"id": "c524c876-0597-42bb-aee2-3d8593084807",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "c111fc1c-7ea8-4d23-bad7-c42b1cb5757a"
											}
										}
									],
									"id": "d54017ee-bb0d-405e-a14b-3a7dcd728a98",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "6b7a6adb-ce3a-4e1b-b04d-33b6051c8188"
											}
										}
									],
									"id": "bfe4a272-17bc-4631-8cf9-18bc0cbdd524",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "5438f094-9fa7-4539-97cb-907531d77015"
											}
										}
									],
									"id": "17cfe829-8df6-441f-8176-2a270a9a7a10",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b2f9c200-9b3c-4d37-9d36-a4a76f036967"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "cccfaf8b-07de-480e-9617-b71ebf5f70be"
											}
										}
									],
									"id": "fda1a3d1-e8f5-4f6b-911c-27d6b986999e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "2070917e-f039-48f3-9fbd-f57916d0fe4b"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "98c016ce-27d7-46b7-9ef6-309742240f5e"
											}
										}
									],
									"id": "e170c7e7-cf5f-4940-affc-ff79d35a6a73",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b6d679af-4059-4901-b225-819d57361343"
											}
										}
									],
									"id": "073cbcad-51fd-48f8-816d-9d5e6220f042",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "7418dc6e-faa6-452f-a606-197d59138e00"
											}
										}
									],
									"id": "0e439bf6-f287-4d25-8ccc-bb03e8f3cdf9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "6f841995-277a-40db-88e3-aa8c560a8f00"
											}
										}
									],
									"id": "456a6e9d-40a3-4d2d-93b8-0132aefb0e19",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "28e0fb07-16c1-4085-a08f-0dc298241ac2"
											}
										}
									],
									"id": "03f88a45-681a-4f33-baab-7db3244d2b89",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "a2b1bc5f-c7a5-4c93-9913-8c6b6e045ffe"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "238e21c6-2ab6-48e4-8b6b-ab182e60e678"
											}
										}
									],
									"id": "4bc99f9e-b8d1-4364-8ac0-309eae5da1e8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "25ab7e3c-eba5-4857-b6c0-77842ec3c46e"
											}
										}
									],
									"id": "7ce575c3-b328-4849-8fd4-368c92a6d8ab",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "8e86a437-fffd-4060-8cea-69af73064868"
											}
										}
									],
									"id": "6bdcfb8b-cc57-429a-836e-1a5c6fcd5e2a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "3adf6ccd-2ff3-4e2b-86df-6747b1fe5b71"
											}
										}
									],
									"id": "0475b8c5-baa0-4834-95ac-b97119d3d428",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "1c0de33f-d48e-4465-95b0-2ea1f7e25932"
											}
										}
									],
									"id": "5f1503c3-9e3e-4704-a568-67ee4bdf7260",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "ac505585-891c-45df-a186-48683713685e"
											}
										}
									],
									"id": "8bf72b43-51d6-4d26-8695-b06efae8a42e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityType",
													"value": "documentation"
												},
												{
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "8edd583d-6be7-4f0a-8df9-4a8bdf0578ad"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "ec09263c-6b5f-4690-9abe-d1061a97919b"
											}
										}
									],
									"id": "0f41e958-b0f3-4a43-b689-61a97505fa8d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "952dabef-a868-4144-9af3-fd8a36da1aa7"
											}
										}
									],
									"id": "72f82bde-029e-4790-b76b-622a6eec54f5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "a03931c1-28b7-4882-bd4b-5b2616712c4e"
											}
										}
									],
									"id": "6e9fa87c-cc65-4879-bf9b-cdaba5459b5e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "70e09516-62e3-4a0e-a45c-a47b41e0a0f0"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "2721ed74-ac52-4a9c-953c-c5ad14e13220"
											}
										}
									],
									"id": "2e9e5f64-2ee1-458e-81c6-74705104afe0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "e24e77ac-7b20-4fec-b9b7-63fae6e39d0c"
						}
					],
					"id": "3aa693ec-2598-4e43-87de-eeb8662e09a8",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "918f5ee8-d2e2-4ffa-b426-97813eaf253b"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "2d84b329-9eb7-4aad-9e52-68292f52c837"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "70ac218c-4cd5-4d91-8063-81b9185b60cf"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "f4366f47-ef48-4454-bffb-047528038e52"
									}
								}
							],
							"id": "10d45ad3-1ad8-40b9-a141-edd7a712cf86",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "c556239a-c2b5-4304-a176-a3c88fd9a531",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "9b8d348a-f50a-4e15-ad5a-0644e0bb84bb",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "4cb86e2f-b9df-4a77-b085-abaaca5de2aa",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										},
										"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "a58b2a6c-c8a7-4d29-a1eb-767011eab51d"
									}
								}
							],
							"id": "196e1c51-76ca-4286-94a9-dac3d1bad84c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "ccd27a7b-b499-4172-a291-5c2443ffadd1"
									}
								}
							],
							"id": "11c643a2-3408-4737-88ed-55d0523c0ddb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "1390ca76-9e4a-4870-8389-42a1449232a2"
									}
								}
							],
							"id": "82f6282f-2253-4f17-b6ca-1be588704e20",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "cec87e30-26ed-4f4c-a4b6-d944925651d6",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{temp_team_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "8c5d68d0-e64b-4b5d-a7e4-fc2fa427a9ca"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "b250f348-93ef-46db-a44b-ace2970309c2"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "c1e5206a-c7f8-4639-b926-bc2c4a723107"
									}
								}
							],
							"id": "35658096-26e6-4023-af06-87a09abd1ec5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "5739233a-a0ef-4e56-bcc4-a730ec90d0af"
									}
								}
							],
							"id": "fe243f93-fc1e-4016-b3e0-c8aec2c8a21a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "96857662-0022-42f9-a70c-89aa97904793"
									}
								}
							],
							"id": "d0421db3-4f71-427b-9a9e-d5a6b2a92c23",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "5974581d-0810-4ea2-94b0-5d2e39a2578e",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{activity_feed_personal_workspace_api_id}}"
											]
										},
										"description": "This endpoint deletes an API."
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "fc2fae33-bcfd-4974-b5a8-1118084c7fac"
									}
								}
							],
							"id": "abfc7192-c02d-45ae-929c-368022e28548",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "78334d4b-a494-47cf-8c3f-028bbcc88deb"
				}
			],
			"id": "3f2139ba-9ffb-48e8-a07d-f0bc45095493"
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "575c9061-2c4c-42d2-b639-99685291af16"
							}
						}
					],
					"id": "772b9a1a-ab86-46c7-b2dd-3ca531572de3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "cd02b113-18f2-4821-862b-910d9211bb7d"
							}
						}
					],
					"id": "eabc91fb-aff2-4ece-b710-d5994dac9daf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "7ee3d958-07ad-42b7-9fe0-cf0ff3215c9a",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "d23db960-bde1-4f5e-b537-89238c7cb434"
							}
						}
					],
					"id": "c0581adc-8d52-49cf-800e-d3333963a7e0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "f2173852-db40-4aec-9b2b-2bb60fd156c2",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "ace8aeed-f72c-4f9f-8606-f347b4d4ae76"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "6004dabe-488b-4aa3-9a53-20fe5a2b7a7e"
							}
						}
					],
					"id": "43fb54cc-90b7-448a-b16e-f4cf00cad9c5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "4869960f-9c3d-4d69-9c50-f453bf4abc2e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "bcb09669-17f4-46d6-9c75-f7f41f9b474d"
							}
						}
					],
					"id": "eab4f3a6-2e4d-4320-9f13-90470b465072",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "617393a1-8f26-461e-bbac-b740d60a8052"
							}
						}
					],
					"id": "c40882cd-764e-41b8-b43f-537edb5cb0e5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "f83af346-c8d6-4353-92e1-fd19d4995b88",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_viewer_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "589cff04-47e5-4ce7-ae83-9705f811c265"
							}
						}
					],
					"id": "829b4810-6f8e-431a-b571-7ef83535155e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "29acab2e-1ccf-4550-a413-0bd6fdb9dade",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_editor_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "bc612b2e-830c-46f4-99ed-50a1f12d2063"
							}
						}
					],
					"id": "fe56d632-54f7-41fa-9f85-03a11b7aa303",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "768406b4-1426-4b7b-ae90-169cffd16c09"
							}
						}
					],
					"id": "288ebd97-7039-4898-a3ef-153b31f6414c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "2e4fc214-feca-4bc4-9f13-94500e6c8347",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"value": "{{api_viewer_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_viewer_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_viewer_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_viewer_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "27bfd06e-e3f2-4836-8731-b2d773c06d5a"
							}
						}
					],
					"id": "9a627e04-0623-4ab9-b2e3-6dcc166e685a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "f3b4fde7-a4f7-4012-a98b-aede6d28cd43",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_editor_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_editor_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_editor_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "2037c2ab-8e18-4f4b-8118-bfeaf6978e8a",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "f73d6fe1-a526-4a29-805a-c90f41d52424"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "8f3170cd-6e95-4b3e-868f-1c262ec4406c"
					}
				}
			]
		},
		{
			"name": "Cleanup Copy",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c74478a8-c3c3-4671-b911-e0f5778f2f73"
							}
						}
					],
					"id": "39419b63-7d0d-427a-a72b-9d947c5bc2fa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "1a8ce827-af1d-45d0-a9f7-16d8a0e21e72"
							}
						}
					],
					"id": "c6a56040-9b6a-45e4-a3ae-5221422c8869",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "d3c0d9ec-4e1e-4e0a-8c74-f209f8fb01c4",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "17d48196-b8c1-4f21-8c0a-b57a19cf7835"
							}
						}
					],
					"id": "b4054ea5-7a83-46fa-81bc-eac6c63570ff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "78abaa3f-9269-4e58-8276-4093869ba843",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "58928193-dbde-47bb-9b60-9968d8882b98"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "9b23476a-3e5e-4c1c-a64c-306bddcdc5fa"
							}
						}
					],
					"id": "c0819019-9bad-4db0-accf-05d4e447a365",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "e45103ad-8ac2-414b-9bde-7ff1c64f8a1e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "a5503c9b-8fc0-440f-be57-f9ccbb1e2020"
							}
						}
					],
					"id": "8b322c7d-7b65-49ce-8918-552d140cbda0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "ecfe84bf-08dc-411f-b82a-992b1ea6dcfe"
							}
						}
					],
					"id": "e37df272-df7a-4cec-97ad-3855969e6b03",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "a34066f5-c11c-4659-996b-c2d70d125331",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_viewer_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "7cc33db8-6bec-47c1-8b1e-643e4ee5be3d"
							}
						}
					],
					"id": "838e9986-62ae-4163-8330-a501bd9f9646",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "43671747-0c65-4f52-b243-86a30bf3f91a",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_editor_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "055080b2-a714-47a2-b635-ef09bc500af2"
							}
						}
					],
					"id": "6948578e-8b58-4daa-9c77-ed82c0b29106",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "0dd26db6-163e-4012-bf0b-ed241fc1c6fb"
							}
						}
					],
					"id": "c1c3019b-8492-48b1-8c4c-54af1a803594",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "b5392c2e-58ee-4c52-8c3c-bdefc37ece9f",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"value": "{{api_viewer_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_viewer_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_viewer_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_viewer_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "a95a0a31-2f9a-4da4-a687-255fe486bf25"
							}
						}
					],
					"id": "0dfa9fc9-ebcb-46ba-9d73-37ae41148a5a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "e089d269-b31c-4b33-8005-78d6aa7052d7",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_editor_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_editor_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_editor_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "d63a98e1-82ae-4081-9651-819392118f8c",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "b1d0092a-6f90-484b-ac4c-e1e7981d10bf"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "bbd37c7d-90fd-4132-b5df-d1eabd75da8d"
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 2",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4ea130d0-0e75-418c-ab26-21ffd5febf0f"
							}
						}
					],
					"id": "3818dd1a-20a2-4387-8f1b-11e8775a2b7f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "9d1e6788-404f-4f0c-bcbc-eb652e39af73"
							}
						}
					],
					"id": "af23af56-a6a3-4183-b1ab-87e7b9f85ec3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "b9b80cae-23d2-4a01-88a5-8991bd2398f8",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "4eb35978-26aa-49e7-bf4f-f620fb1daf47"
							}
						}
					],
					"id": "d861d0c4-8fe0-4aed-b6b8-2393c8b1f6ae",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "6b341e60-f48f-4471-b588-06c8c1147cd7",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "f0d8985c-4b1c-4382-bd2a-661e10fc7acc"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "088efdeb-3777-46dc-9315-c2bcc21ad88a"
							}
						}
					],
					"id": "5a2705d0-cbe3-4a03-a964-d9c821681da1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "410a1a0a-d0e1-43ef-882a-0c3510fb7454"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "d5dc9c32-1d8a-48db-a128-ccaba8be3659"
							}
						}
					],
					"id": "d69ec1c8-7a8a-44a1-9248-dd73669e3c4a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "1d0ab0f7-673d-4369-8625-3d8e4c55221b"
							}
						}
					],
					"id": "e08277e7-d0d6-4376-b97f-f48f629f7412",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "98dd4687-58e8-4a6f-a032-034790d634d5",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_viewer_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "2fe4a4ad-2a4e-4aa1-a992-4db4428da641"
							}
						}
					],
					"id": "e6607a61-c2ee-4fef-a1cf-d6e8aab15375",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "fc4cae3d-25a0-49a2-b431-54e74a97adb1",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_editor_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "2c58b134-71f2-4323-9aee-9421f5d6d320"
							}
						}
					],
					"id": "4582ea13-7143-4cc5-9353-57226b43de2e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "d1c1ac4f-ddbd-4d3f-89ce-d3e8853a9355"
							}
						}
					],
					"id": "4c359fb1-9608-4400-b666-68e8f8e95362",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "4ac7242c-343b-4914-8edd-08453a9c9295",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"value": "{{api_viewer_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_viewer_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_viewer_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_viewer_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "2023b862-7a08-46b6-a70f-a9924c591a16"
							}
						}
					],
					"id": "a9ffa387-c45a-45cd-97e9-ac6315f0f02f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "abbd7273-f0b4-47f1-9ef1-83a3cbc7c697",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_editor_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_editor_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_editor_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "e9d69104-6106-4626-953f-8ba58769418a",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "7d040dfb-7f6c-49de-88e4-4aa5e0c3e33b"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "db2ac01a-e4e1-4ef5-96cb-5cd958def406"
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 3",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3ef30b48-3cb2-429f-a556-2c389fb77efe"
							}
						}
					],
					"id": "a02941d0-872b-4ed9-83e0-872ea0e2a22d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "62df2011-ee3a-4ae5-96a5-3ed1d4472d65"
							}
						}
					],
					"id": "68c3ec7e-1871-4926-ae38-4a0f9920cef6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "ccc406c8-b1f6-449c-b075-f6881b88ab4d",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "36f36adb-dd8c-47b0-94e4-7fd0e3b9217c"
							}
						}
					],
					"id": "4482bbdd-a77d-4573-b800-159f993f365a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "0e378bcf-eb20-4b8d-9319-d5ac75c96909",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "a6eb662b-e194-48d6-a572-0ab4ac1aaeee"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "1e2a1751-c221-453a-8150-4e3d0484bd56"
							}
						}
					],
					"id": "5b684e29-185c-4c70-80e5-9bb18563e084",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "1fe49dfb-2f01-4781-9c47-a0406753cd41"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "5b61d6f8-e1ae-41bf-a4f2-282ed872645e"
							}
						}
					],
					"id": "93884ab3-fc34-49d6-a0f8-fa6a1530ac46",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "b331f9ee-8580-43b4-8835-c3a9f76b5e65"
							}
						}
					],
					"id": "5702670c-93fe-48b4-8e49-9923838c2c6c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "a26db32d-6d28-4df2-91a1-a2be824c5276",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_viewer_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "4fd28e90-fa4e-43c9-ba2e-259953402269"
							}
						}
					],
					"id": "acbcf1b5-71df-4abd-bc29-e87e4b536e96",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "9a4a3d1e-9ef3-4272-9ce2-d98456a1ed34",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_editor_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "4f1cc487-d9a2-41d3-ba34-9ba023967ceb"
							}
						}
					],
					"id": "32ff10d5-6533-4e29-b51e-07d492f55ba9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "11ef4b19-2061-4211-b766-d8fb12f43864"
							}
						}
					],
					"id": "f75e476c-e14e-4231-aaec-a18cf9f90b9f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "c79998b9-d9ad-47dd-aa2b-22b3e1e6d64e",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"value": "{{api_viewer_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_viewer_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_viewer_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_viewer_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "91dfdea9-4e3b-4bf2-8e83-4f69d7eb0411"
							}
						}
					],
					"id": "fb3719b7-ba1c-4a64-8842-ef280fd5ca8a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "0e1690cd-25e0-4265-a557-c9f60c0c031b",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_editor_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_editor_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_editor_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "bd69823b-1618-44c5-aa16-020266b57a95",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "f2bb2205-5779-4308-8305-609d122249c0"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "048cd119-04d8-4b26-b6b3-39cec97f9127"
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 4",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3c09b913-4073-4b2b-b3e6-a4f7f733bba8"
							}
						}
					],
					"id": "0769fce9-7595-4a52-8ec0-cf3c5ee76e8c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "f17ab3ca-3ca0-496a-af27-226bdf1430fb"
							}
						}
					],
					"id": "75791e93-3837-453b-9cc4-8d06b23a20c9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "8f119d62-79c3-4bd8-b4f0-ec7b6d06e1c1",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "52d5589d-2065-406e-b7d4-be57c07fa32c"
							}
						}
					],
					"id": "9f24ed0a-51ca-4a85-b099-0afca12bc540",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "3721f9fc-f260-4851-a0f8-05c3d7d8c237",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "c9d52716-9c1b-4bb0-bb43-15bd1a4f7036"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "5211f5f5-c561-4c5f-a896-b9c62d808a9e"
							}
						}
					],
					"id": "aac8d3f3-8d3f-46e0-a28f-e4187c3bcf5f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "71c4f5ea-6b5a-4daf-92e0-a5e309e0380f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "034df6bc-f954-4658-844f-acfd21ae2ae4"
							}
						}
					],
					"id": "468d7925-97da-42cf-b8df-5cad1a7dfa26",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "0250c146-33a6-401b-b8b9-c10227ddecde"
							}
						}
					],
					"id": "8e2cf0e7-574f-4641-b24f-034ff3ff2f66",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "77b49e5d-f38a-45c0-9951-7619a3aa1f01",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_viewer_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "a9b2fa7f-6144-415d-964f-d85a6e61c534"
							}
						}
					],
					"id": "ffa57d71-c321-4819-b8f0-8549ad9c9917",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "4e9bebe6-8e8a-4113-8cbd-e326e65a3728",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_editor_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "a6193d0d-9c03-47c0-b99a-3a69aab9a061"
							}
						}
					],
					"id": "7edc62b0-1e61-403b-8a18-8ed5b7273170",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "af8d0fbf-230e-4f9c-a60f-041e2b45b053"
							}
						}
					],
					"id": "4cd5933c-61e7-4f3e-89ba-d981aa395a2e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "d7edd181-f15c-4dc8-a198-5adbbf3eb428",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"value": "{{api_viewer_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_viewer_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_viewer_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_viewer_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "3fd8ddae-d037-4123-9aff-85560c500329"
							}
						}
					],
					"id": "7b4500ab-4ced-468f-8ae4-9bc795953484",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "8456c261-1328-4182-94dc-9f350dd3add0",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_editor_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_editor_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_editor_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "78213028-7067-48d7-bd54-aeebd10867ea",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "d9b26c90-3624-4f25-913b-e16a4922406e"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "538bb98a-d44f-46ea-bc7d-af5e40aea532"
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 5",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "9336b4ec-cc66-4a5e-9a27-affdc7b29642"
							}
						}
					],
					"id": "92ad8a6e-289c-44d9-96af-0c9b3f19e36f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "a5fd6f69-bdcf-4255-b835-cfbdf18ee0bb"
							}
						}
					],
					"id": "7a97c6a1-b93e-494f-bda6-e4b564e64c0d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "74f4719d-abdd-4df8-b2da-264595d2df3d",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "1ab2c658-f562-4449-bcff-303ff0914a39"
							}
						}
					],
					"id": "de651701-c658-4c83-b9bc-0bf4360e3ab6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "0d62f95a-9a5b-488a-aa31-da2061e04349",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "557521ff-f8f3-459d-b440-1b04a901aafa"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "24b944e7-21cb-42c6-815d-2cc205900322"
							}
						}
					],
					"id": "fef9466f-64a9-49f3-a795-f8a0b7651e96",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "f09dd476-0d21-4ae7-b91b-0839214f49d9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "ff05ff90-92ba-4ab4-978c-44ea2ab4ace3"
							}
						}
					],
					"id": "088cd9a9-8711-4e63-a3ca-43466fa24c2a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "a31ed9a1-a8cf-4e86-bc9f-76e94f7e2148"
							}
						}
					],
					"id": "a1fec360-3047-4fc6-9030-5f2690efcda0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "ab1a179d-52f2-4cb9-a990-c6f3a8a92a51",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_viewer_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "7ccd9315-09f0-4df6-8e79-eedde13b85dc"
							}
						}
					],
					"id": "d05bcc51-3860-4de8-97e2-de52fbb3b209",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "b54760ee-10ec-490d-98d5-7e5e63c77361",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_editor_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "742efaa2-2577-4b25-8a05-5908bd858298"
							}
						}
					],
					"id": "e3389dfa-dc27-4e83-b934-81d3c2208036",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "466b411e-1090-42b0-9bbc-91ad42986356"
							}
						}
					],
					"id": "fd131b25-5847-4f9e-b967-8250d17b9025",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "cce20180-6e4c-4b9c-8ccf-cdf3d492224a",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"value": "{{api_viewer_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_viewer_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_viewer_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_viewer_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "a2326935-27e0-4dcb-bf79-5d419163830a"
							}
						}
					],
					"id": "acee62f2-ed59-4ad1-9fb3-ea3c0cef05a0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "bec1a6be-3ffb-4b58-b42d-439afac29ac2",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_editor_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_editor_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_editor_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "586dfc48-bf95-4398-b86e-10de7c1fad26",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "c3c0dd32-ec21-4b28-b282-ec8fbf14359d"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "9828b786-ceb2-4738-b734-2de8c979167e"
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 6",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "bcda3330-ef77-445d-b649-29d52e77c24b"
							}
						}
					],
					"id": "a11d8328-0d85-4664-8e69-45354d81e980",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "0646b232-62e2-4890-b494-b4828d95ee7b"
							}
						}
					],
					"id": "540260bc-5c56-4ca6-80a9-6d90d74d4f36",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "65845daa-520a-4b6a-b697-8b729fd1258c",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "a1690bc3-f441-47ee-b092-2712184a1d15"
							}
						}
					],
					"id": "753a56c7-9ddb-4ca0-8881-8f6706c72928",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "48e5bd9f-ff26-4548-80fc-fd11b6b4c004",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "d592b9f3-dfa9-461f-9934-5ff02e118f44"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "07d6f8ad-42f4-46ef-bc36-7ce28d9ca81f"
							}
						}
					],
					"id": "05d0a240-065f-44ee-96bf-4105310326a9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "d340cc08-b6b1-4419-8011-f1d7a5b3be76"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "3c397dc4-b129-4b99-bc5f-ddf902eb1bcd"
							}
						}
					],
					"id": "51f886ca-f8d1-4fa5-a099-3a8eefb60c8e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "1b0ff5f2-e1f5-4830-ae33-739e5da2239d"
							}
						}
					],
					"id": "7a2407cd-98bc-4445-a098-857f26375f13",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "8936a62c-d8e4-4c70-8ff7-c237b4c10654",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_viewer_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "2a62bde2-e640-4f90-b361-7bf9009e59fb"
							}
						}
					],
					"id": "b83a281d-6124-4690-abb7-26eda07afa7d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "065bf152-43c6-4d3b-9c5f-978f2acad4f4",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_editor_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "c09bb1c4-5689-4bf6-81a5-a386d3bb9a08"
							}
						}
					],
					"id": "af7d1560-d351-48e4-a4d4-2ebe9941e8cf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "cf248f8e-8bc0-46fa-ba6a-bf775027814f"
							}
						}
					],
					"id": "db69c8ac-a41a-4d85-9a69-5756dad65e8a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "e8f58bc5-93fa-475a-a0ee-a47c4948f1e3",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"value": "{{api_viewer_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_viewer_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_viewer_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_viewer_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "95d51c0c-d622-4601-8d98-0d2602961f9b"
							}
						}
					],
					"id": "407c6851-3aa7-4787-ad06-ade2a285ff92",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "0a148574-2325-4d67-9e54-1cbf7b4b2be0",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_editor_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_editor_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_editor_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "a6c471f4-8bee-4d21-92a1-3b419254dc97",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "8e03c9d2-9c9a-489f-a079-638f63e2b099"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "f3f57648-9786-4650-9429-d8963975229d"
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 7",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ad80e92c-f4d5-4c5f-88e8-ac0cb8e66161"
							}
						}
					],
					"id": "ef337953-2837-4c84-b3ec-89b7ff953097",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "a945c4b7-2970-439b-93b3-a4205365935b"
							}
						}
					],
					"id": "87f0fdf5-9956-476b-99d5-599fc9e4518b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "85839a45-7da5-4db6-bcb9-4110f9befa98",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "6fdcb2f5-d877-425e-bb9e-d357b14bed7e"
							}
						}
					],
					"id": "a3e476e8-f1bb-4bde-9180-b28bfb2147e8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "a492d70a-a069-4b75-9ed1-3cf2d79f603f",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "df167221-630f-4110-8abd-d99133d67e37"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "f9f93e46-a147-42ef-88d9-02c04e2dc6c0"
							}
						}
					],
					"id": "476531f2-f664-4bd8-a752-00f8528dd6c4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "1fabc1a3-1c2f-445d-8243-22aac689d6bd"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "3d47e4cb-72a9-4d11-bad7-0943e2b4a27e"
							}
						}
					],
					"id": "e75723db-374d-4170-884a-4bb53abaf05c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "c74680ed-bced-4e20-9f3f-8b8909b51bae"
							}
						}
					],
					"id": "3c8cbf54-5a9d-46ac-9bfe-c8bc48692673",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "31354a87-80cf-4e22-baaa-ec7999ef23e5",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_viewer_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "f37d17a2-e99a-426f-95d1-84983bee5559"
							}
						}
					],
					"id": "2fdb3680-344b-4a89-a009-059048be4564",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "a8df06d3-04fd-411f-8ed0-b87401a00a8c",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_editor_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "709d0c5a-5ad4-4de8-b4d4-b49cdbe14221"
							}
						}
					],
					"id": "20e27597-0992-407b-b2dc-c35e80d8709d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "0738912b-857b-4e4a-ba8f-9f9cd55465f6"
							}
						}
					],
					"id": "52869625-079c-4ce4-9f57-67b8d2b33878",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "0414d3c7-49ae-46b1-a65b-c0b512a1730f",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"value": "{{api_viewer_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_viewer_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_viewer_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_viewer_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "79615bf2-1a27-4d3c-89b4-94c22b1034d8"
							}
						}
					],
					"id": "66e7ff53-7cb7-4eaa-9d72-1ae7fa9456cb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "1fcb0432-80b3-4ffb-819a-158998e0c14d",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_editor_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_editor_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_editor_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "d2914eef-fc4b-4eb6-8cf4-3f4eb5899c57",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "15c9c4fa-4085-4368-b559-614c49cae03f"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "6aa108c0-fd3e-4227-b18b-250fa61f6009"
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 8",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2d29dcf1-e549-4f83-9b08-997b7b39eb36"
							}
						}
					],
					"id": "8fa358ce-bf6f-4018-b90b-25ae97f715b0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "9d17ab22-93b5-4a7f-97df-d89a5669cfdc"
							}
						}
					],
					"id": "794e6cbb-598f-4d0a-b6e0-0488292d3969",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "94d8ec05-0f63-4342-b698-8875f61b8139",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "5224f7db-cb37-459f-8142-95e326d4bdad"
							}
						}
					],
					"id": "52424824-beb5-4237-9296-4af203449f81",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "dcd697dd-1f57-4c97-978d-90b0b2a930b6",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "58685caa-994c-4a7d-ab57-caecdf236443"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "865c3254-1b98-41fc-9ceb-483915ddffdc"
							}
						}
					],
					"id": "390965ae-2889-4e72-b296-482667961a70",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "bf5bb4e5-13ac-4039-b0bd-12d7db5c0485"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "b7691afd-60a7-4a1c-8a41-6a2860c9aa22"
							}
						}
					],
					"id": "595de8f0-8547-438d-82de-2191d7c8d496",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "712dc475-7ab5-43ba-8cbc-cb0a9ddb632a"
							}
						}
					],
					"id": "947d45ba-3623-45d5-b3f0-bd5e3c48e1ce",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "546f4b5b-4260-47a9-813a-6d4dfac4fc73",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_viewer_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "78fe2e32-3224-49fd-9ecc-cad376cc2c5b"
							}
						}
					],
					"id": "5fe257ab-63f4-4f90-a775-b23e94979c71",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "da5bb688-4999-4b41-8ce4-4aec12c1bc91",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"organizations",
										":organization_id",
										"users",
										":target_user_id"
									],
									"query": [
										{
											"key": "access_token",
											"value": "{{admin_access_token}}"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "force",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "organization_id",
											"value": "{{quality_team_id}}"
										},
										{
											"key": "target_user_id",
											"value": "{{api_editor_user_id}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "46306f23-d4df-4c8f-9729-c56c710c0f51"
							}
						}
					],
					"id": "b362704c-257f-4978-aec7-c4d60b85fb83",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "3df05edc-d1a6-4492-997f-6a299be84958"
							}
						}
					],
					"id": "c59da1cd-4db4-449e-9529-373391dfec12",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "b1a8f890-49c4-4062-bd9b-cc137708ee7d",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"value": "{{api_viewer_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_viewer_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_viewer_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_viewer_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "12b03e0b-a1b1-4e54-b2b7-d75c86f9f273"
							}
						}
					],
					"id": "6ff972fe-e260-4381-bce3-74aa9ccca0b4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "7b2fd09f-0e68-4900-b617-eeeb8b4bb558",
							"name": "200",
							"originalRequest": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-access-token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{api_editor_user_id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{api_editor_user_id}}"
										},
										{
											"key": "access_token",
											"value": "{{api_editor_access_token}}"
										},
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "f0185fd0-d03c-4b24-a3de-b8a437c7b283",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "9746deb0-fc18-4734-bc62-60ad47be73e5"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "ffc4788a-983b-4a86-92e4-30d392eeb50d"
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "23567b07-d678-4907-97fa-3203fb831532"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if (!pm.response.text()) {",
					"  const url = pm.request.url.toString();",
					"  const requestHeaders = pm.request.headers;",
					"",
					"  const resCode = pm.response.code;",
					"  const resHeaders = pm.response.headers;",
					"",
					"",
					"  const req = {",
					"    url: 'https://hooks.slack.com/services/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',",
					"    method: 'POST',",
					"    body: {",
					"      mode: 'raw',",
					"      raw: JSON.stringify({",
					"        \"text\": \"Empty Response\",",
					"        \"blocks\": [",
					"          {",
					"            \"type\": \"section\",",
					"            \"text\": {",
					"              \"type\": \"mrkdwn\",",
					"              \"text\": url",
					"            }",
					"          },",
					"          {",
					"            \"type\": \"divider\"",
					"          },",
					"          {",
					"            \"type\": \"section\",",
					"            \"text\": {",
					"              \"type\": \"mrkdwn\",",
					"              \"text\": \"*Request*\"",
					"            }",
					"          },",
					"          {",
					"            \"type\": \"section\",",
					"            \"text\": {",
					"              \"type\": \"mrkdwn\",",
					"              \"text\": `Headers:\\n\\`\\`\\`${JSON.stringify(requestHeaders, null, 2)}\\`\\`\\``",
					"            }",
					"          },",
					"          {",
					"            \"type\": \"divider\"",
					"          },",
					"          {",
					"            \"type\": \"section\",",
					"            \"text\": {",
					"              \"type\": \"mrkdwn\",",
					"              \"text\": \"*Response*\"",
					"            }",
					"          },",
					"          {",
					"            \"type\": \"section\",",
					"            \"text\": {",
					"              \"type\": \"mrkdwn\",",
					"              \"text\": `*Code*: ${resCode}\\n*Content*: ${response}\\n*Headers*:\\n\\`\\`\\`${JSON.stringify(resHeaders, null, 2)}\\`\\`\\``",
					"            }",
					"          },",
					"          {",
					"            \"type\": \"actions\",",
					"            \"elements\": [",
					"              {",
					"                \"type\": \"button\",",
					"                \"text\": {",
					"                  \"type\": \"plain_text\",",
					"                  \"text\": \"Open AWS\",",
					"                  \"emoji\": true",
					"                },",
					"                \"value\": \"click_me_123\"",
					"              }",
					"            ]",
					"          },",
					"          {",
					"            \"type\": \"divider\"",
					"          },",
					"          {",
					"            \"type\": \"divider\"",
					"          }",
					"        ]",
					"      })",
					"    }",
					"  };",
					"",
					"  pm.sendRequest(req);",
					"",
					"  return postman.setNextRequest(null);",
					"} else {",
					"  console.log(JSON.stringify(pm.response.json(), null, 2));",
					"}",
					"",
					"console.log(pm.response.code);"
				],
				"id": "01437cdd-cd88-4eb7-9390-82858baec4c2"
			}
		}
	]
}